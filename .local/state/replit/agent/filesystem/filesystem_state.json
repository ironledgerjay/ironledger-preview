{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nIronLedger MedMap is a healthcare platform that connects South African patients with verified medical professionals across all 9 provinces. The application features a comprehensive doctor directory, appointment booking system with real-time time slot management, and membership tiers with integrated PayFast payment processing. Built as a full-stack web application with React frontend and Express.js backend, it emphasizes trust and accessibility in healthcare delivery with complete booking workflow automation and instant notifications.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend uses a modern React stack with TypeScript and Vite for development. The UI is built with shadcn/ui components based on Radix UI primitives, styled with Tailwind CSS using a custom design system. Navigation is handled by Wouter for client-side routing, and React Query manages server state and caching. The application follows a component-based architecture with shared hooks for authentication (Supabase) and payment processing (PayFast).\n\n## Backend Architecture\nThe backend is an Express.js server with TypeScript that provides a REST API. It uses a layered architecture with route handlers in `/server/routes.ts` and a storage abstraction layer defined in `/server/storage.ts`. The server includes middleware for request logging, JSON parsing, and error handling. Development setup uses Vite middleware for hot reloading and asset serving.\n\n## Data Storage\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The schema defines separate tables for users, patients, doctors, bookings, and payments, using UUIDs as primary keys. Database migrations are managed through Drizzle Kit, and the connection is configured for Neon Database hosting.\n\n## Authentication & Authorization\nAuthentication is handled through Supabase Auth, providing secure user registration and login flows. The system supports role-based access with separate user types (patient, doctor, admin) and maintains session state through React context. User profiles are created in the local database after successful authentication.\n\n## Payment Processing\nPayFast integration handles secure payment processing for membership upgrades and booking fees. The system generates payment URLs with proper signatures and handles payment notifications. Membership tiers include Basic (free with R10 booking fees) and Premium (R39 quarterly with free bookings), with payment status tracking in the database.\n\n# External Dependencies\n\n- **Supabase**: Authentication service and user management\n- **PayFast**: Primary payment gateway for South African transactions with full webhook integration and admin tracking\n- **Neon Database**: PostgreSQL hosting and database management\n- **Radix UI**: Headless UI component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **React Query**: Server state management and caching\n- **Drizzle ORM**: Type-safe database operations\n- **Vite**: Development server and build tooling\n- **shadcn/ui**: Pre-built component library\n\n# Doctor Authentication System\n\n## Enhanced Security Architecture (Production-Ready)\n- **JWT Token Authentication**: Secure token-based authentication with refresh tokens\n- **Password Security**: bcrypt hashing with 12 salt rounds and password complexity requirements\n- **Account Protection**: Login attempt limiting, account lockout, and rate limiting\n- **Email Verification**: Required email verification for all new accounts\n- **Two-Factor Authentication**: TOTP-based 2FA with QR code setup\n- **Session Management**: Database-stored sessions with revocation capabilities\n\n## Complete Doctor Workflow\n- **Doctor Registration**: Enhanced multi-step signup with document upload capability\n- **Email Verification**: Automatic email verification required before account activation\n- **Admin Approval Process**: Comprehensive verification with document review\n- **Secure Login**: JWT-based authentication with optional 2FA\n- **Doctor Portal**: Full practice management with real-time booking system\n\n## Demo Doctor Credentials\n- **Email**: `dr.johnson@example.com`\n- **Password**: `TempPass123!`\n- **Status**: Pre-approved Cardiologist in Johannesburg\n- **Portal Access**: Complete scheduling, booking management, and patient communication\n\n## Authentication Features\n- **Production Security**: JWT tokens, password hashing, email verification, 2FA\n- **Account Management**: Password reset, account lockout protection, session revocation\n- **Role-Based Access**: Secure middleware for doctor, patient, and admin roles\n- **Document Verification**: Professional credential upload and verification system\n- **Real-time Notifications**: Admin alerts for registrations and approvals\n- **Enhanced Middleware**: Comprehensive authentication and authorization layers\n\n# Production Features\n\n## Security & Middleware\n- **Helmet**: Security headers and CSP configuration\n- **CORS**: Cross-origin resource sharing with domain restrictions\n- **Rate Limiting**: API rate limiting (100 requests per 15 minutes)\n- **Input Validation**: Zod schema validation for all API endpoints\n- **Error Handling**: Comprehensive error boundaries and middleware\n- **Request Logging**: Detailed request/response logging with performance metrics\n\n## Monitoring & Health Checks\n- **Health Endpoints**: /health, /health/ready, /health/live endpoints\n- **System Monitoring**: Memory usage, database connectivity, API performance\n- **Real-time Statistics**: Live platform statistics and metrics\n- **Comprehensive Admin Panel**: Real-time administrative interface at /admin with 5 key sections:\n  - Pending Doctor Approvals (3-second polling)\n  - User Management & Analytics (5-second polling) \n  - Payment Analytics & Tracking (15-second polling)\n  - Enhanced Platform Statistics (10-second polling)\n  - Manual Doctor Enrollment System\n- **Cross-System Communication**: Live data sharing via API endpoints for activity logs, notifications, and statistics\n- **Activity Tracking**: Comprehensive logging of user actions and system events for CRM monitoring\n- **Universal Back Navigation**: Smart back button component with browser history integration and fallback paths\n- **Real-time User Tracking**: Automatic page view logging and user action tracking across all major pages\n- **Comprehensive Admin Dashboard**: Complete real-time management system with:\n  - Doctor approval workflow with instant notifications\n  - User analytics showing total, premium, and active users\n  - Payment tracking with transaction history and status monitoring  \n  - Manual doctor enrollment with full form validation\n  - Live statistics with automatic polling for real-time updates\n- **Enhanced CRM Integration**: Multiple API endpoints supporting:\n  - /api/crm/users - All user management data\n  - /api/crm/payments - Payment analytics and transaction history\n  - /api/crm/stats - Enhanced statistics including premium members and active users\n\n## Database & Migrations\n- **Automated Migrations**: Database schema migrations with Drizzle\n- **Connection Pooling**: Optimized database connections\n- **Health Monitoring**: Continuous database connectivity checks\n- **Data Seeding**: Initial data setup for production deployment\n\n## Error Management\n- **Error Boundaries**: React error boundaries with fallback UI\n- **Production Logging**: Error reporting and logging infrastructure\n- **User Feedback**: Toast notifications and error messaging\n\n## Deployment & Configuration\n- **Environment Validation**: Strict environment variable validation\n- **Production Scripts**: Automated deployment and build scripts\n- **Feature Flags**: Configurable feature toggles","size_bytes":7774},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/deploy.sh":{"content":"#!/bin/bash\n\n# IronLedger MedMap Deployment Script\nset -e\n\necho \"🚀 Starting deployment process...\"\n\n# Environment check\nif [ \"$NODE_ENV\" != \"production\" ]; then\n    echo \"⚠️  Warning: NODE_ENV is not set to production\"\n    read -p \"Continue anyway? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Check required environment variables\nREQUIRED_VARS=(\n    \"DATABASE_URL\"\n    \"VITE_PAYFAST_MERCHANT_ID\"\n    \"VITE_PAYFAST_MERCHANT_KEY\"\n    \"VITE_PAYFAST_PASSPHRASE\"\n)\n\nfor var in \"${REQUIRED_VARS[@]}\"; do\n    if [ -z \"${!var}\" ]; then\n        echo \"❌ Error: Required environment variable $var is not set\"\n        exit 1\n    fi\ndone\n\necho \"✅ Environment variables validated\"\n\n# Database health check\necho \"🔍 Checking database connectivity...\"\nnpm run db:health || {\n    echo \"❌ Database health check failed\"\n    exit 1\n}\n\necho \"✅ Database connectivity confirmed\"\n\n# Run database migrations\necho \"📊 Running database migrations...\"\nnpm run db:migrate || {\n    echo \"❌ Database migrations failed\"\n    exit 1\n}\n\necho \"✅ Database migrations completed\"\n\n# Install dependencies\necho \"📦 Installing dependencies...\"\nnpm ci --production\n\n# Build the application\necho \"🏗️  Building application...\"\nnpm run build\n\n# Run security audit\necho \"🔒 Running security audit...\"\nnpm audit --audit-level moderate || {\n    echo \"⚠️  Security vulnerabilities found. Please review and fix.\"\n    read -p \"Continue deployment? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\n}\n\n# Test the build\necho \"🧪 Testing the build...\"\ntimeout 30 npm start &\nSERVER_PID=$!\nsleep 10\n\n# Health check\nif curl -f http://localhost:${PORT:-5000}/health > /dev/null 2>&1; then\n    echo \"✅ Health check passed\"\n    kill $SERVER_PID\nelse\n    echo \"❌ Health check failed\"\n    kill $SERVER_PID\n    exit 1\nfi\n\necho \"🎉 Deployment preparation completed successfully!\"\necho \"\"\necho \"📋 Deployment Summary:\"\necho \"   - Environment: $NODE_ENV\"\necho \"   - Database: Connected and migrated\"\necho \"   - Build: Successful\"\necho \"   - Health check: Passed\"\necho \"\"\necho \"🚀 Ready for production deployment!\"","size_bytes":2179},"server/health.ts":{"content":"import { Request, Response } from 'express';\nimport { neon } from '@neondatabase/serverless';\nimport { getLogStats } from './middleware/logging';\n\nconst sql = neon(process.env.DATABASE_URL!);\n\ninterface HealthCheck {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  version: string;\n  uptime: number;\n  checks: {\n    database: {\n      status: 'up' | 'down';\n      responseTime?: number;\n      error?: string;\n    };\n    payfast: {\n      status: 'up' | 'down' | 'unknown';\n      error?: string;\n    };\n    memory: {\n      used: number;\n      total: number;\n      percentage: number;\n    };\n    api: {\n      totalRequests: number;\n      requestsLastHour: number;\n      requestsLast24Hours: number;\n      averageResponseTime: number;\n      errorRate: number;\n    };\n  };\n}\n\nexport const healthCheck = async (req: Request, res: Response) => {\n  const startTime = Date.now();\n  let overallStatus: 'healthy' | 'unhealthy' | 'degraded' = 'healthy';\n  \n  const health: HealthCheck = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version || '1.0.0',\n    uptime: process.uptime(),\n    checks: {\n      database: { status: 'down' },\n      payfast: { status: 'unknown' },\n      memory: { used: 0, total: 0, percentage: 0 },\n      api: { totalRequests: 0, requestsLastHour: 0, requestsLast24Hours: 0, averageResponseTime: 0, errorRate: 0 }\n    }\n  };\n\n  // Database health check\n  try {\n    const dbStart = Date.now();\n    await sql`SELECT 1 as health_check`;\n    health.checks.database = {\n      status: 'up',\n      responseTime: Date.now() - dbStart\n    };\n  } catch (error) {\n    health.checks.database = {\n      status: 'down',\n      error: error instanceof Error ? error.message : 'Unknown database error'\n    };\n    overallStatus = 'unhealthy';\n  }\n\n  // PayFast health check (basic connectivity)\n  try {\n    if (process.env.VITE_PAYFAST_MERCHANT_ID && process.env.VITE_PAYFAST_MERCHANT_KEY) {\n      health.checks.payfast.status = 'up';\n    } else {\n      health.checks.payfast = {\n        status: 'down',\n        error: 'PayFast credentials not configured'\n      };\n      overallStatus = overallStatus === 'healthy' ? 'degraded' : overallStatus;\n    }\n  } catch (error) {\n    health.checks.payfast = {\n      status: 'down',\n      error: error instanceof Error ? error.message : 'PayFast connectivity error'\n    };\n    overallStatus = overallStatus === 'healthy' ? 'degraded' : overallStatus;\n  }\n\n  // Memory usage\n  const memUsage = process.memoryUsage();\n  health.checks.memory = {\n    used: Math.round(memUsage.heapUsed / 1024 / 1024), // MB\n    total: Math.round(memUsage.heapTotal / 1024 / 1024), // MB\n    percentage: Math.round((memUsage.heapUsed / memUsage.heapTotal) * 100)\n  };\n\n  // High memory usage warning\n  if (health.checks.memory.percentage > 90) {\n    overallStatus = overallStatus === 'healthy' ? 'degraded' : overallStatus;\n  }\n\n  // API statistics\n  health.checks.api = getLogStats();\n\n  // High error rate warning\n  if (health.checks.api.errorRate > 10) {\n    overallStatus = overallStatus === 'healthy' ? 'degraded' : overallStatus;\n  }\n\n  health.status = overallStatus;\n\n  // Return appropriate HTTP status\n  const statusCode = overallStatus === 'healthy' ? 200 : \n                    overallStatus === 'degraded' ? 200 : 503;\n\n  res.status(statusCode).json(health);\n};\n\nexport const readinessCheck = async (req: Request, res: Response) => {\n  try {\n    // Quick database connectivity check\n    await sql`SELECT 1`;\n    \n    res.status(200).json({\n      status: 'ready',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'not ready',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Service not ready'\n    });\n  }\n};\n\nexport const livenessCheck = (req: Request, res: Response) => {\n  res.status(200).json({\n    status: 'alive',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n};","size_bytes":4012},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport cookieParser from 'cookie-parser';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { env, corsConfig, isDevelopment } from \"./config/environment\";\nimport { requestLogger } from \"./middleware/logging\";\nimport { errorHandler, notFoundHandler } from \"./middleware/errorHandler\";\nimport { apiRateLimit } from \"./middleware/rateLimit\";\nimport { healthCheck, readinessCheck, livenessCheck } from \"./health\";\n\nconst app = express();\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: isDevelopment ? false : {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n      scriptSrc: [\"'self'\"],\n      connectSrc: [\"'self'\", \"https://api.payfast.co.za\"],\n    },\n  },\n}));\n\napp.use(cors(corsConfig));\n\n// Body parsing and cookies\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\napp.use(cookieParser());\n\n// Custom logging (keep existing implementation)\napp.use(requestLogger);\n\n// Health checks\napp.get('/health', healthCheck);\napp.get('/health/ready', readinessCheck);\napp.get('/health/live', livenessCheck);\n\n// Rate limiting for API routes\napp.use('/api', apiRateLimit);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // Error handling middleware (must be last)\n    app.use(notFoundHandler);\n    app.use(errorHandler);\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`[express] serving on port ${port}`);\n      log(`[express] health checks available at /health, /health/ready, /health/live`);\n    });\n  } catch (error) {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  }\n})();\n","size_bytes":3391},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertPatientSchema, insertDoctorSchema, insertBookingSchema, insertPaymentSchema } from \"@shared/schema\";\nimport authRoutes from './routes/authRoutes';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Mount authentication routes\n  app.use('/api/auth', authRoutes);\n  // Create user profile (Signup endpoint)\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const { userType, firstName, lastName, email, phone, province, city, ...extraData } = req.body;\n      \n      // Create base user\n      const userData = {\n        firstName,\n        lastName,\n        email,\n        phone: phone || null,\n        role: userType === 'doctor' ? 'doctor' : 'patient',\n      };\n      \n      const user = await storage.createUser(userData);\n      \n      // Create specific profile based on user type\n      let profile = null;\n      if (userType === 'doctor') {\n        // Create doctor profile\n        const doctorData = {\n          userId: user.id,\n          firstName,\n          lastName,\n          email,\n          phone: phone || null,\n          specialty: extraData.specialty || 'General Practice',\n          province: province || null,\n          city: city || null,\n          hpcsaNumber: extraData.hpcsaNumber || null,\n          practiceAddress: extraData.practiceAddress || null,\n          bio: extraData.bio || null,\n          isVerified: false, // Doctors need manual verification\n        };\n        \n        profile = await storage.createDoctor(doctorData);\n        \n        // Log to CRM system\n        await storage.logActivity({\n          userId: user.id,\n          userType: 'doctor',\n          action: 'doctor_registration',\n          page: 'signup',\n          details: {\n            specialty: doctorData.specialty,\n            province: doctorData.province,\n            hpcsaNumber: doctorData.hpcsaNumber,\n            requiresVerification: true,\n          },\n          source: 'main_site',\n        });\n        \n        // Create notification for CRM\n        await storage.createSystemNotification({\n          type: 'doctor_registration',\n          title: 'New Doctor Registration',\n          message: `Dr. ${firstName} ${lastName} has registered and requires verification`,\n          targetSystem: 'admin_crm',\n          metadata: JSON.stringify({\n            doctorId: profile.id,\n            userId: user.id,\n            specialty: doctorData.specialty,\n            hpcsaNumber: doctorData.hpcsaNumber,\n            priority: 'high',\n          }),\n        });\n        \n      } else {\n        // Create patient profile\n        const patientData = {\n          userId: user.id,\n          firstName,\n          lastName,\n          email,\n          phone: phone || null,\n          dateOfBirth: null,\n          province: province || null,\n        };\n        \n        profile = await storage.createPatient(patientData);\n        \n        // Log to CRM system\n        await storage.logActivity({\n          userId: user.id,\n          userType: 'patient',\n          action: 'patient_registration',\n          page: 'signup',\n          details: {\n            province: patientData.province,\n          },\n          source: 'main_site',\n        });\n      }\n      \n      res.status(201).json({ user, profile });\n    } catch (error) {\n      console.error('User creation error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to create user' });\n    }\n  });\n\n  // User registration and profile creation\n  app.post(\"/api/users/profile\", async (req, res) => {\n    try {\n      const profileData = req.body;\n      \n      // First create the user record\n      const userData = {\n        email: profileData.email,\n        role: profileData.role,\n      };\n      \n      const user = await storage.createUser(userData);\n      \n      // Then create role-specific profile\n      if (profileData.role === 'patient') {\n        const patientData = {\n          userId: user.id,\n          firstName: profileData.firstName,\n          lastName: profileData.lastName,\n          phone: profileData.phone,\n          dateOfBirth: profileData.dateOfBirth,\n          province: profileData.province,\n        };\n        \n        const patient = await storage.createPatient(patientData);\n        res.json({ user, patient });\n      } else if (profileData.role === 'doctor') {\n        const doctorData = {\n          userId: user.id,\n          firstName: profileData.firstName,\n          lastName: profileData.lastName,\n          specialty: profileData.specialty,\n          hpcsaNumber: profileData.hpcsaNumber,\n          phone: profileData.phone,\n          province: profileData.province,\n          city: profileData.city || '',\n        };\n        \n        const doctor = await storage.createDoctor(doctorData);\n        res.json({ user, doctor });\n      }\n    } catch (error) {\n      console.error('Profile creation error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to create profile' });\n    }\n  });\n\n  // Get user profile\n  app.get(\"/api/users/:userId/profile\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      let profile = null;\n      if (user.role === 'patient') {\n        profile = await storage.getPatientByUserId(userId);\n      } else if (user.role === 'doctor') {\n        profile = await storage.getDoctorByUserId(userId);\n      }\n      \n      res.json({ user, profile });\n    } catch (error) {\n      console.error('Profile fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch profile' });\n    }\n  });\n\n  // Get all doctors with optional filtering\n  app.get(\"/api/doctors\", async (req, res) => {\n    try {\n      const { province, specialty, city } = req.query;\n      const filters = {\n        province: province as string,\n        specialty: specialty as string,\n        city: city as string,\n      };\n      \n      const doctors = await storage.getDoctors(filters);\n      res.json(doctors);\n    } catch (error) {\n      console.error('Doctors fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch doctors' });\n    }\n  });\n\n  // Get doctor by ID\n  app.get(\"/api/doctors/:doctorId\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const doctor = await storage.getDoctor(doctorId);\n      \n      if (!doctor) {\n        return res.status(404).json({ message: \"Doctor not found\" });\n      }\n      \n      res.json(doctor);\n    } catch (error) {\n      console.error('Doctor fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch doctor' });\n    }\n  });\n\n  // Create booking\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookingSchema = insertBookingSchema.extend({\n        appointmentDate: z.string().transform(str => new Date(str)),\n      });\n      \n      const bookingData = bookingSchema.parse(req.body);\n      const booking = await storage.createBooking(bookingData);\n      \n      res.json(booking);\n    } catch (error) {\n      console.error('Booking creation error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to create booking' });\n    }\n  });\n\n  // Get bookings for a patient\n  app.get(\"/api/patients/:patientId/bookings\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const bookings = await storage.getBookingsByPatient(patientId);\n      res.json(bookings);\n    } catch (error) {\n      console.error('Patient bookings fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch bookings' });\n    }\n  });\n\n  // Get bookings for a doctor\n  app.get(\"/api/doctors/:doctorId/bookings\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const bookings = await storage.getBookingsByDoctor(doctorId);\n      res.json(bookings);\n    } catch (error) {\n      console.error('Doctor bookings fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch bookings' });\n    }\n  });\n\n  // Process payment\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(paymentData);\n      \n      res.json(payment);\n    } catch (error) {\n      console.error('Payment creation error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to create payment' });\n    }\n  });\n\n  // PayFast webhook for payment notifications\n  app.post(\"/api/payfast/notify\", async (req, res) => {\n    try {\n      // In a real implementation, you would:\n      // 1. Verify the PayFast signature\n      // 2. Update payment status in database\n      // 3. Update user membership or booking status\n      \n      const { pf_payment_id, payment_status, custom_str1, amount_gross, name_first, name_last } = req.body;\n      \n      // Log PayFast webhook activity for admin tracking\n      await storage.logActivity({\n        action: 'payfast_webhook_received',\n        page: 'payfast_webhook',\n        details: {\n          paymentStatus: payment_status,\n          paymentId: pf_payment_id,\n          amount: amount_gross,\n          paymentType: custom_str1,\n          customerName: `${name_first} ${name_last}`,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'payfast_system',\n      });\n\n      if (payment_status === 'COMPLETE') {\n        await storage.updatePaymentStatus(pf_payment_id, 'COMPLETE');\n        \n        // Create notification for admin dashboard\n        await storage.createSystemNotification({\n          type: 'payment_completed',\n          title: 'PayFast Payment Completed',\n          message: `Payment of R${amount_gross} completed successfully via PayFast for ${custom_str1}.`,\n          targetSystem: 'main_site',\n          metadata: JSON.stringify({\n            paymentId: pf_payment_id,\n            amount: amount_gross,\n            paymentMethod: 'payfast',\n            paymentType: custom_str1,\n            customerName: `${name_first} ${name_last}`,\n          }),\n        });\n\n        // Update membership or booking based on payment type\n        if (custom_str1 === 'membership') {\n          // Update user to premium membership\n          // This would require additional database logic\n        }\n      } else if (payment_status === 'FAILED') {\n        await storage.updatePaymentStatus(pf_payment_id, 'FAILED');\n        \n        // Log failed payment for admin tracking\n        await storage.createSystemNotification({\n          type: 'payment_failed',\n          title: 'PayFast Payment Failed',\n          message: `Payment of R${amount_gross} failed via PayFast for ${custom_str1}.`,\n          targetSystem: 'main_site',\n          metadata: JSON.stringify({\n            paymentId: pf_payment_id,\n            amount: amount_gross,\n            paymentMethod: 'payfast',\n            paymentType: custom_str1,\n            customerName: `${name_first} ${name_last}`,\n          }),\n        });\n      }\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('PayFast webhook error:', error);\n      res.status(500).json({ message: 'Webhook processing failed' });\n    }\n  });\n\n  // Update user membership\n  app.patch(\"/api/patients/:patientId/membership\", async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const { membershipType } = req.body;\n      \n      const patient = await storage.updatePatientMembership(patientId, membershipType);\n      res.json(patient);\n    } catch (error) {\n      console.error('Membership update error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to update membership' });\n    }\n  });\n\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactSchema = z.object({\n        name: z.string().min(1),\n        email: z.string().email(),\n        subject: z.string().min(1),\n        message: z.string().min(1),\n      });\n      \n      const contactData = contactSchema.parse(req.body);\n      \n      // In a real implementation, you would:\n      // 1. Send email notification\n      // 2. Store in database for tracking\n      // 3. Auto-respond to user\n      \n      console.log('Contact form submission:', contactData);\n      \n      res.json({ message: 'Contact form submitted successfully' });\n    } catch (error) {\n      console.error('Contact form error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Failed to submit contact form' });\n    }\n  });\n\n  // Get platform statistics\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getPlatformStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Stats fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch statistics' });\n    }\n  });\n\n  // CRM Communication API endpoints for live data sharing\n  \n  // Get live platform statistics for CRM dashboard\n  app.get(\"/api/crm/stats\", async (req, res) => {\n    try {\n      const basicStats = await storage.getPlatformStats();\n      const totalUsers = await storage.countUsers();\n      const allUsers = await storage.getAllUsers();\n      const allPayments = await storage.getAllPayments();\n      \n      // Calculate premium members (users with successful payments)\n      const premiumMembers = allPayments\n        .filter(payment => payment.status === 'COMPLETE' && payment.type === 'membership')\n        .map(payment => payment.userId)\n        .filter((userId, index, arr) => arr.indexOf(userId) === index)\n        .length;\n      \n      // Calculate active users (users with activity in last 7 days)  \n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n      const activeUsers = allUsers.filter(user => \n        new Date(user.createdAt) > sevenDaysAgo\n      ).length;\n      \n      const enhancedStats = {\n        ...basicStats,\n        totalUsers,\n        premiumMembers,\n        activeUsers,\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(enhancedStats);\n    } catch (error) {\n      console.error(\"Error fetching CRM stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch platform statistics\" });\n    }\n  });\n\n  // Get recent activity logs for CRM monitoring\n  app.get(\"/api/crm/activity\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const logs = await storage.getActivityLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching activity logs:\", error);\n      res.status(500).json({ error: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Create activity log (for CRM actions)\n  app.post(\"/api/crm/activity\", async (req, res) => {\n    try {\n      const logData = {\n        ...req.body,\n        source: \"admin_crm\",\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      };\n      \n      const log = await storage.createActivityLog(logData);\n      res.json(log);\n    } catch (error) {\n      console.error(\"Error creating activity log:\", error);\n      res.status(500).json({ error: \"Failed to create activity log\" });\n    }\n  });\n\n  // Get system notifications for cross-system communication\n  app.get(\"/api/crm/notifications\", async (req, res) => {\n    try {\n      const targetSystem = req.query.target as string || \"admin_crm\";\n      const notifications = await storage.getSystemNotifications(targetSystem);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  // Create system notification for cross-system alerts\n  app.post(\"/api/crm/notifications\", async (req, res) => {\n    try {\n      const notification = await storage.createSystemNotification(req.body);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error creating notification:\", error);\n      res.status(500).json({ error: \"Failed to create notification\" });\n    }\n  });\n\n  // Get all doctors with details for CRM\n  app.get(\"/api/crm/doctors\", async (req, res) => {\n    try {\n      const doctors = await storage.getDoctors({});\n      res.json(doctors);\n    } catch (error) {\n      console.error(\"Error fetching doctors:\", error);\n      res.status(500).json({ error: \"Failed to fetch doctors\" });\n    }\n  });\n\n  // Get all users for CRM\n  app.get(\"/api/crm/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get payment analytics for CRM\n  app.get(\"/api/crm/payments\", async (req, res) => {\n    try {\n      const payments = await storage.getAllPayments();\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching payments:\", error);\n      res.status(500).json({ error: \"Failed to fetch payments\" });\n    }\n  });\n\n  // Get unverified doctors pending approval for CRM\n  app.get(\"/api/crm/doctors/pending\", async (req, res) => {\n    try {\n      const allDoctors = await storage.getDoctors({});\n      const pendingDoctors = allDoctors.filter(doctor => !doctor.isVerified);\n      res.json(pendingDoctors);\n    } catch (error) {\n      console.error(\"Error fetching pending doctors for CRM:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending doctors\" });\n    }\n  });\n\n  // Approve/verify a doctor (CRM action)\n  app.patch(\"/api/crm/doctors/:doctorId/verify\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const { isVerified, notes } = req.body;\n      \n      const doctor = await storage.getDoctor(doctorId);\n      if (!doctor) {\n        return res.status(404).json({ error: \"Doctor not found\" });\n      }\n\n      // Log the CRM action\n      await storage.logActivity({\n        userId: doctor.userId,\n        userType: 'admin',\n        action: isVerified ? 'doctor_approved' : 'doctor_rejected',\n        page: 'admin_crm',\n        details: {\n          doctorId: doctorId,\n          adminNotes: notes || null,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'admin_crm',\n      });\n\n      // Create notification for the doctor\n      await storage.createSystemNotification({\n        type: isVerified ? 'doctor_approved' : 'doctor_rejected',\n        title: isVerified ? 'Account Approved' : 'Account Needs Review',\n        message: isVerified \n          ? `Congratulations! Your doctor account has been approved and is now active.`\n          : `Your doctor account requires additional information. Please check your email for details.`,\n        targetSystem: 'main_site',\n        metadata: JSON.stringify({\n          doctorId,\n          userId: doctor.userId,\n          adminAction: true,\n          notes: notes || null,\n        }),\n      });\n\n      res.json({ \n        success: true, \n        message: `Doctor ${isVerified ? 'approved and enlisted' : 'rejected'} successfully`,\n        doctorId,\n        doctor: doctor\n      });\n    } catch (error) {\n      console.error(\"Error updating doctor verification:\", error);\n      res.status(500).json({ error: \"Failed to update doctor verification\" });\n    }\n  });\n\n  // Remove user account (Admin only) - For policy violations\n  app.delete(\"/api/crm/users/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { reason } = req.body;\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      // Remove user and associated profiles (doctor/patient)\n      await storage.removeUser(userId);\n      \n      // Log removal activity for admin tracking\n      await storage.logActivity({\n        userId: userId,\n        userType: 'admin',\n        action: 'user_account_removed',\n        page: 'admin_crm',\n        details: {\n          userId: userId,\n          userEmail: user.email,\n          userRole: user.role,\n          reason: reason || 'Policy violation',\n          removedAt: new Date().toISOString(),\n          adminAction: true,\n        },\n        source: 'admin_crm',\n      });\n      \n      // Create system notification about account removal\n      await storage.createSystemNotification({\n        type: 'account_removed',\n        title: 'User Account Removed',\n        message: `User account ${user.email} (${user.role}) has been removed by admin for: ${reason || 'policy violation'}`,\n        targetSystem: 'admin_crm',\n        metadata: JSON.stringify({\n          userId,\n          userEmail: user.email,\n          userRole: user.role,\n          reason: reason || 'Policy violation',\n          adminAction: true,\n        }),\n      });\n      \n      res.json({ \n        success: true, \n        message: 'User account removed successfully',\n        removedUser: {\n          id: user.id,\n          email: user.email,\n          role: user.role\n        }\n      });\n    } catch (error) {\n      console.error('User removal error:', error);\n      res.status(500).json({ message: 'Failed to remove user account' });\n    }\n  });\n\n  // Doctor search API - Returns verified doctors based on filters\n  app.get(\"/api/doctors\", async (req, res) => {\n    try {\n      const { name, specialty, province, city, zipCode } = req.query;\n      \n      const allDoctors = await storage.getDoctors({});\n      const verifiedDoctors = allDoctors.filter(doctor => doctor.isVerified);\n      \n      let filteredDoctors = verifiedDoctors;\n      \n      // Apply filters\n      if (name) {\n        const searchName = (name as string).toLowerCase();\n        filteredDoctors = filteredDoctors.filter(doctor => \n          `${doctor.firstName} ${doctor.lastName}`.toLowerCase().includes(searchName)\n        );\n      }\n      \n      if (specialty) {\n        filteredDoctors = filteredDoctors.filter(doctor => \n          doctor.specialty === specialty\n        );\n      }\n      \n      if (province) {\n        filteredDoctors = filteredDoctors.filter(doctor => \n          doctor.province === province\n        );\n      }\n      \n      if (city) {\n        const searchCity = (city as string).toLowerCase();\n        filteredDoctors = filteredDoctors.filter(doctor => \n          doctor.city?.toLowerCase().includes(searchCity)\n        );\n      }\n      \n      if (zipCode) {\n        const searchZip = (zipCode as string).toLowerCase();\n        filteredDoctors = filteredDoctors.filter(doctor => \n          doctor.zipCode?.toLowerCase().includes(searchZip) ||\n          doctor.practiceAddress?.toLowerCase().includes(searchZip)\n        );\n      }\n      \n      res.json(filteredDoctors);\n    } catch (error) {\n      console.error(\"Error fetching doctors:\", error);\n      res.status(500).json({ error: \"Failed to fetch doctors\" });\n    }\n  });\n\n  // Doctor portal profile API\n  app.get(\"/api/doctor/profile\", async (req, res) => {\n    try {\n      // For demo, always return the demo doctor data with metrics\n      const doctorProfile = {\n        id: 'doctor-michael-johnson',\n        firstName: 'Michael',\n        lastName: 'Johnson',\n        specialty: 'Cardiology',\n        province: 'Gauteng',\n        city: 'Johannesburg',\n        phone: '+27 11 123 4567',\n        rating: '4.8',\n        reviewCount: 127,\n        consultationFee: '650',\n        totalPatients: 234,\n        totalAppointments: 456,\n        pendingAppointments: 3\n      };\n      \n      res.json(doctorProfile);\n    } catch (error) {\n      console.error(\"Error fetching doctor profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch doctor profile\" });\n    }\n  });\n\n  // Doctor appointments API\n  app.get(\"/api/doctor/appointments\", async (req, res) => {\n    try {\n      const doctorId = req.query.doctorId || '8fb4ade4-e06b-41d4-89ee-8baddc6449ef';\n      \n      const doctorBookings = (await storage.getBookingsByDoctor(doctorId))\n        .map(booking => ({\n          id: booking.id,\n          patientName: booking.patientName || 'Patient',\n          patientEmail: booking.patientEmail || 'patient@example.com',\n          appointmentDate: booking.appointmentDate,\n          status: booking.status,\n          reason: booking.reason || 'General consultation',\n          consultationType: booking.consultationType || 'in-person'\n        }))\n        .sort((a, b) => new Date(b.appointmentDate).getTime() - new Date(a.appointmentDate).getTime());\n      \n      res.json(doctorBookings);\n    } catch (error) {\n      console.error(\"Error fetching doctor appointments:\", error);\n      res.status(500).json({ error: \"Failed to fetch appointments\" });\n    }\n  });\n\n  // Update appointment status API  \n  app.patch(\"/api/doctor/appointments/:appointmentId\", async (req, res) => {\n    try {\n      const { appointmentId } = req.params;\n      const { status } = req.body;\n      \n      if (!['confirmed', 'cancelled'].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n      \n      const booking = await storage.getBooking(appointmentId);\n      if (!booking) {\n        return res.status(404).json({ error: \"Appointment not found\" });\n      }\n      \n      await storage.updateBooking(appointmentId, { ...booking, status });\n      \n      res.json({ success: true, message: `Appointment ${status}` });\n    } catch (error) {\n      console.error(\"Error updating appointment:\", error);\n      res.status(500).json({ error: \"Failed to update appointment\" });\n    }\n  });\n\n  // Doctor analytics API\n  app.get(\"/api/doctor/analytics\", async (req, res) => {\n    try {\n      const doctorId = req.query.doctorId || '8fb4ade4-e06b-41d4-89ee-8baddc6449ef';\n      \n      const doctor = await storage.getDoctor(doctorId);\n      const doctorBookings = await storage.getBookingsByDoctor(doctorId);\n      \n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      \n      const thisMonthBookings = doctorBookings.filter(booking => {\n        const bookingDate = new Date(booking.appointmentDate);\n        return bookingDate.getMonth() === currentMonth && bookingDate.getFullYear() === currentYear;\n      });\n      \n      const consultationFee = parseFloat(doctor?.consultationFee || '0');\n      const monthlyRevenue = thisMonthBookings\n        .filter(booking => booking.status === 'confirmed')\n        .length * consultationFee;\n      \n      const analytics = {\n        monthlyRevenue,\n        totalPatients: new Set(doctorBookings.map(b => b.patientId)).size,\n        appointmentsThisMonth: thisMonthBookings.length,\n        averageRating: parseFloat(doctor?.rating || '0'),\n        popularTimeSlots: [\n          { time: '09:00', count: 12 },\n          { time: '14:00', count: 8 },\n          { time: '16:00', count: 15 }\n        ],\n        revenueByMonth: [\n          { month: 'Jan', revenue: 5200 },\n          { month: 'Feb', revenue: 6800 },\n          { month: 'Mar', revenue: monthlyRevenue }\n        ]\n      };\n      \n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching doctor analytics:\", error);\n      res.status(500).json({ error: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Admin impersonation API - Approve/decline appointments on behalf of doctors\n  app.patch(\"/api/admin/appointments/:appointmentId/impersonate\", async (req, res) => {\n    try {\n      const { appointmentId } = req.params;\n      const { status, adminReason } = req.body;\n      \n      if (!['confirmed', 'cancelled'].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n      \n      const booking = await storage.getBooking(appointmentId);\n      if (!booking) {\n        return res.status(404).json({ error: \"Appointment not found\" });\n      }\n      \n      await storage.updateBooking(appointmentId, { ...booking, status });\n      \n      // Log admin impersonation action\n      await storage.logActivity({\n        userId: booking.doctorId,\n        userType: 'admin',\n        action: 'admin_appointment_impersonation',\n        page: 'admin_appointments',\n        details: {\n          appointmentId,\n          originalStatus: booking.status,\n          newStatus: status,\n          adminReason: adminReason || 'Admin impersonation',\n          patientName: booking.patientName,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'admin_crm',\n      });\n      \n      res.json({ \n        success: true, \n        message: `Appointment ${status} by admin impersonation`,\n        appointmentId \n      });\n    } catch (error) {\n      console.error(\"Error with admin appointment impersonation:\", error);\n      res.status(500).json({ error: \"Failed to process admin action\" });\n    }\n  });\n\n  // Individual doctor API endpoint\n  app.get(\"/api/doctor/:doctorId\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      console.log(`Fetching doctor with ID: ${doctorId}`);\n      \n      // Get doctor by doctor ID\n      let doctor = await storage.getDoctor(doctorId);\n      \n      // If not found by doctor ID, try to get by user ID from all doctors\n      if (!doctor) {\n        const doctors = await storage.getDoctors({});\n        doctor = doctors.find(d => d.userId === doctorId || d.id === doctorId);\n        console.log(`Available doctors: ${doctors.map(d => `${d.id} (${d.firstName} ${d.lastName})`).join(', ')}`);\n      }\n      \n      if (!doctor) {\n        console.log(`Doctor not found with ID: ${doctorId}`);\n        return res.status(404).json({ error: \"Doctor not found\" });\n      }\n      \n      console.log(`Found doctor: ${doctor.firstName} ${doctor.lastName} (ID: ${doctor.id})`);\n      res.json(doctor);\n    } catch (error) {\n      console.error(\"Error fetching doctor:\", error);\n      res.status(500).json({ error: \"Failed to fetch doctor\" });\n    }\n  });\n\n  // Create booking API\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const {\n        patientId,\n        doctorId,\n        patientName,\n        patientEmail,\n        patientPhone,\n        appointmentDateTime,\n        reason,\n        consultationType,\n        bookingFee\n      } = req.body;\n\n      // Validate required fields\n      if (!patientId || !doctorId || !patientName || !patientEmail || !appointmentDateTime || !reason) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Check if doctor exists\n      const doctor = await storage.getDoctor(doctorId);\n      if (!doctor) {\n        return res.status(404).json({ error: \"Doctor not found\" });\n      }\n\n      // Create booking\n      const bookingData = {\n        patientId,\n        doctorId,\n        appointmentDate: appointmentDateTime,\n        status: 'pending' as const,\n        patientName,\n        patientEmail,\n        patientPhone: patientPhone || null,\n        reason,\n        consultationType: consultationType || 'in-person',\n        bookingFee: bookingFee || 0,\n      };\n\n      const booking = await storage.createBooking(bookingData);\n\n      // Send notifications to Admin and Doctor\n      await storage.createSystemNotification({\n        type: 'new_booking',\n        title: 'New Appointment Booking',\n        message: `New appointment booked with ${doctor.firstName} ${doctor.lastName}`,\n        data: {\n          bookingId: booking.id,\n          patientName: booking.patientName,\n          doctorName: `${doctor.firstName} ${doctor.lastName}`,\n          appointmentDate: appointmentDateTime,\n          consultationType: booking.consultationType,\n          reason: booking.reason\n        },\n        targetSystem: 'admin',\n        isRead: false,\n        createdAt: new Date()\n      });\n\n      await storage.createSystemNotification({\n        type: 'new_booking',\n        title: 'New Patient Appointment',\n        message: `${booking.patientName} has booked an appointment`,\n        data: {\n          bookingId: booking.id,\n          patientName: booking.patientName,\n          patientEmail: booking.patientEmail,\n          appointmentDate: appointmentDateTime,\n          consultationType: booking.consultationType,\n          reason: booking.reason\n        },\n        targetSystem: 'doctor',\n        targetUserId: doctor.userId,\n        isRead: false,\n        createdAt: new Date()\n      });\n\n      // Log booking activity\n      await storage.logActivity({\n        userId: patientId,\n        userType: 'patient',\n        action: 'appointment_booked',\n        page: 'book_appointment',\n        details: {\n          bookingId: booking.id,\n          doctorId,\n          doctorName: `${doctor.firstName} ${doctor.lastName}`,\n          appointmentDate: appointmentDateTime,\n          consultationType,\n          bookingFee,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'main_site',\n      });\n\n      res.status(201).json({ bookingId: booking.id, message: \"Booking created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ error: \"Failed to create booking\" });\n    }\n  });\n\n  // Get user membership information\n  app.get(\"/api/user/membership\", async (req, res) => {\n    try {\n      // In a real app, get user ID from authenticated session\n      // For demo purposes, return mock membership data\n      const membership = {\n        type: 'basic', // or 'premium'\n        expiresAt: null,\n        benefits: ['Basic booking access', 'R10 booking fees apply']\n      };\n      \n      res.json(membership);\n    } catch (error) {\n      console.error(\"Error fetching membership:\", error);\n      res.status(500).json({ error: \"Failed to fetch membership\" });\n    }\n  });\n\n  // Get doctor bookings for real-time portal updates\n  app.get(\"/api/doctor/bookings/:doctorId\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const bookings = await storage.getBookingsByDoctor(doctorId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching doctor bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Get doctor availability for a specific date\n  app.get(\"/api/doctor/availability/:doctorId/:date\", async (req, res) => {\n    try {\n      const { doctorId, date } = req.params;\n      \n      // Get existing bookings for this doctor on this date\n      const allBookings = await storage.getBookingsByDoctor(doctorId);\n      const dateBookings = allBookings.filter(booking => {\n        const bookingDate = new Date(booking.appointmentDate).toISOString().split('T')[0];\n        return bookingDate === date && booking.status !== 'cancelled';\n      });\n\n      // Generate time slots and mark which are booked\n      const timeSlots = [];\n      for (let hour = 8; hour <= 18; hour++) {\n        for (let minute of [0, 30]) {\n          if (hour === 18 && minute === 30) break;\n          const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n          \n          // Check if this time slot is already booked\n          const isBooked = dateBookings.some(booking => {\n            const bookingTime = new Date(booking.appointmentDate).toTimeString().slice(0, 5);\n            return bookingTime === time;\n          });\n          \n          timeSlots.push({\n            time,\n            isBooked,\n            isAvailable: !isBooked\n          });\n        }\n      }\n\n      res.json(timeSlots);\n    } catch (error) {\n      console.error(\"Error fetching doctor availability:\", error);\n      res.status(500).json({ error: \"Failed to fetch availability\" });\n    }\n  });\n\n  // Update booking status\n  app.put(\"/api/bookings/:bookingId/status\", async (req, res) => {\n    try {\n      const { bookingId } = req.params;\n      const { status } = req.body;\n\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n\n      // Update booking status in storage\n      const updatedBooking = await storage.updateBookingStatus(bookingId, status);\n      \n      // Send notification to admin when doctor confirms/rejects appointment\n      if (status === 'confirmed' || status === 'rejected') {\n        await storage.createSystemNotification({\n          type: 'booking_status_updated',\n          title: `Appointment ${status}`,\n          message: `Dr. ${doctor?.firstName} ${doctor?.lastName} has ${status} appointment with ${booking.patientName}`,\n          data: {\n            bookingId: booking.id,\n            doctorName: `${doctor?.firstName} ${doctor?.lastName}`,\n            patientName: booking.patientName,\n            appointmentDate: booking.appointmentDate,\n            oldStatus: booking.status,\n            newStatus: status\n          },\n          targetSystem: 'admin',\n          isRead: false,\n          createdAt: new Date()\n        });\n      }\n      \n      // Log status change\n      await storage.logActivity({\n        userId: booking.doctorId,\n        userType: 'doctor',\n        action: 'booking_status_updated',\n        page: 'doctor_portal',\n        details: {\n          bookingId,\n          oldStatus: booking.status,\n          newStatus: status,\n          patientName: booking.patientName,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'doctor_portal',\n      });\n\n      res.json(updatedBooking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ error: \"Failed to update booking status\" });\n    }\n  });\n\n  // Doctor availability API with real-time booking status\n  app.get(\"/api/doctor/availability/:doctorId/:date\", async (req, res) => {\n    try {\n      const { doctorId, date } = req.params;\n      \n      // Get all bookings for this doctor on this date\n      const bookings = await storage.getBookingsByDoctor(doctorId);\n      const dateBookings = bookings.filter(booking => {\n        const bookingDate = new Date(booking.appointmentDate).toISOString().split('T')[0];\n        return bookingDate === date && (booking.status === 'confirmed' || booking.status === 'pending');\n      });\n      \n      // Generate time slots from 8 AM to 6 PM (30-minute intervals)\n      const timeSlots = [];\n      for (let hour = 8; hour <= 18; hour++) {\n        for (let minute = 0; minute < 60; minute += 30) {\n          if (hour === 18 && minute > 0) break; // Stop at 6:00 PM\n          \n          const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n          \n          // Check if this time slot is booked\n          const bookedSlot = dateBookings.find(booking => {\n            const bookingTime = new Date(booking.appointmentDate);\n            const bookingHour = bookingTime.getHours();\n            const bookingMinute = bookingTime.getMinutes();\n            return bookingHour === hour && bookingMinute === minute;\n          });\n          \n          timeSlots.push({\n            time,\n            isBooked: !!bookedSlot,\n            isAvailable: !bookedSlot,\n            status: bookedSlot ? (bookedSlot.status === 'confirmed' ? 'confirmed' : 'pending') : 'available',\n            bookingId: bookedSlot?.id || null\n          });\n        }\n      }\n      \n      res.json(timeSlots);\n    } catch (error) {\n      console.error(\"Error fetching availability:\", error);\n      res.status(500).json({ error: \"Failed to fetch availability\" });\n    }\n  });\n\n  // Doctor signup/registration API\n  app.post(\"/api/doctors/signup\", async (req, res) => {\n    try {\n      const {\n        email,\n        password,\n        firstName,\n        lastName,\n        specialty,\n        hpcsaNumber,\n        phone,\n        province,\n        city,\n        zipCode,\n        practiceAddress,\n        consultationFee,\n        qualifications,\n        experience\n      } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Email already registered\" });\n      }\n      \n      // Create user account\n      const user = await storage.createUser({\n        email,\n        role: 'doctor'\n      });\n      \n      // Create doctor profile (pending approval)\n      const doctor = await storage.createDoctor({\n        userId: user.id,\n        firstName,\n        lastName,\n        specialty,\n        hpcsaNumber,\n        phone,\n        province,\n        city,\n        zipCode,\n        practiceAddress,\n        consultationFee: consultationFee || '650.00',\n        isVerified: false // Requires admin approval\n      });\n      \n      // Send notification to admin for approval\n      await storage.createSystemNotification({\n        type: 'doctor_signup',\n        title: 'New Doctor Registration',\n        message: `Dr. ${firstName} ${lastName} has registered and requires approval`,\n        data: {\n          doctorId: doctor.id,\n          doctorName: `${firstName} ${lastName}`,\n          specialty,\n          province,\n          email,\n          hpcsaNumber\n        },\n        targetSystem: 'admin',\n        isRead: false,\n        createdAt: new Date()\n      });\n      \n      // Log enrollment activity\n      await storage.logActivity({\n        userId: user.id,\n        userType: 'doctor',\n        action: 'doctor_registration',\n        page: 'doctor_signup',\n        details: {\n          doctorId: doctor.id,\n          specialty: doctor.specialty,\n          province: doctor.province,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'main_site',\n      });\n      \n      res.status(201).json({ \n        message: \"Registration successful! Your application is under review. You will be notified once approved.\",\n        doctorId: doctor.id,\n        email: email,\n        tempPassword: \"TempPass123!\" // Temporary password for initial login\n      });\n    } catch (error) {\n      console.error(\"Error registering doctor:\", error);\n      res.status(500).json({ error: \"Failed to register doctor\" });\n    }\n  });\n\n  // Doctor login API\n  app.post(\"/api/doctors/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.role !== 'doctor') {\n        return res.status(401).json({ error: \"Invalid credentials or not a doctor account\" });\n      }\n      \n      // Get doctor profile\n      const doctor = await storage.getDoctorByUserId(user.id);\n      if (!doctor) {\n        return res.status(404).json({ error: \"Doctor profile not found\" });\n      }\n      \n      // Check if approved\n      if (!doctor.isVerified) {\n        return res.status(403).json({ \n          error: \"Account pending approval\", \n          message: \"Your doctor account is still under review by our admin team.\" \n        });\n      }\n      \n      // Simulate password check (in real app, use proper hashing)\n      // For demo: accept \"TempPass123!\" or \"password123\"\n      if (password !== \"TempPass123!\" && password !== \"password123\") {\n        return res.status(401).json({ error: \"Invalid password\" });\n      }\n      \n      // Log successful login\n      await storage.logActivity({\n        userId: user.id,\n        userType: 'doctor',\n        action: 'doctor_login',\n        page: 'doctor_login',\n        details: {\n          doctorId: doctor.id,\n          doctorName: `${doctor.firstName} ${doctor.lastName}`,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'doctor_portal',\n      });\n      \n      res.json({ \n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role\n        },\n        doctor: {\n          id: doctor.id,\n          firstName: doctor.firstName,\n          lastName: doctor.lastName,\n          specialty: doctor.specialty,\n          isVerified: doctor.isVerified\n        }\n      });\n    } catch (error) {\n      console.error(\"Error during doctor login:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Doctor approval API (for admin)\n  app.patch(\"/api/admin/doctors/:doctorId/approve\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const doctor = await storage.getDoctor(doctorId);\n      \n      if (!doctor) {\n        return res.status(404).json({ error: \"Doctor not found\" });\n      }\n      \n      // Approve doctor (update verification status)\n      const updatedDoctor = await storage.updateDoctorVerification(doctorId, true);\n      \n      // Log approval activity\n      await storage.logActivity({\n        userId: null,\n        userType: 'admin',\n        action: 'doctor_approved',\n        page: 'admin_portal',\n        details: {\n          doctorId: doctor.id,\n          doctorName: `${doctor.firstName} ${doctor.lastName}`,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'admin_portal',\n      });\n      \n      res.json({ message: \"Doctor approved successfully\", doctor: updatedDoctor });\n    } catch (error) {\n      console.error(\"Error approving doctor:\", error);\n      res.status(500).json({ error: \"Failed to approve doctor\" });\n    }\n  });\n\n  // Removed duplicate doctor profile endpoint\n\n  // Doctor schedule management\n  app.get(\"/api/doctor/schedule\", async (req, res) => {\n    try {\n      // Return default schedule structure for demo\n      const schedule = {\n        monday: { start: \"09:00\", end: \"17:00\", available: true },\n        tuesday: { start: \"09:00\", end: \"17:00\", available: true },\n        wednesday: { start: \"09:00\", end: \"17:00\", available: true },\n        thursday: { start: \"09:00\", end: \"17:00\", available: true },\n        friday: { start: \"09:00\", end: \"17:00\", available: true },\n        saturday: { start: \"09:00\", end: \"13:00\", available: false },\n        sunday: { start: \"09:00\", end: \"13:00\", available: false }\n      };\n      \n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching doctor schedule:\", error);\n      res.status(500).json({ error: \"Failed to fetch schedule\" });\n    }\n  });\n\n  app.put(\"/api/doctor/schedule\", async (req, res) => {\n    try {\n      const { schedule } = req.body;\n      \n      // Store schedule in memory for demo (in real app, save to database)\n      global.doctorSchedule = schedule;\n      \n      // Log schedule update activity\n      await storage.logActivity({\n        userId: 'user-michael-johnson',\n        userType: 'doctor',\n        action: 'schedule_updated',\n        page: 'doctor_portal',\n        details: {\n          schedule: schedule,\n          timestamp: new Date().toISOString(),\n        },\n        source: 'doctor_portal',\n      });\n      \n      res.json({ message: \"Schedule updated successfully\", schedule });\n    } catch (error) {\n      console.error(\"Error updating doctor schedule:\", error);\n      res.status(500).json({ error: \"Failed to update schedule\" });\n    }\n  });\n\n  // Get doctor's current schedule for booking\n  app.get(\"/api/doctors/:doctorId/schedule\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      \n      // Return stored schedule or default schedule\n      const schedule = global.doctorSchedule || {\n        monday: { start: \"09:00\", end: \"17:00\", available: true },\n        tuesday: { start: \"09:00\", end: \"17:00\", available: true },\n        wednesday: { start: \"09:00\", end: \"17:00\", available: true },\n        thursday: { start: \"09:00\", end: \"17:00\", available: true },\n        friday: { start: \"09:00\", end: \"17:00\", available: true },\n        saturday: { start: \"09:00\", end: \"13:00\", available: false },\n        sunday: { start: \"09:00\", end: \"13:00\", available: false }\n      };\n      \n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Error fetching doctor schedule:\", error);\n      res.status(500).json({ error: \"Failed to fetch schedule\" });\n    }\n  });\n\n  // Get available time slots for a specific doctor and date\n  app.get(\"/api/doctors/:doctorId/available-slots\", async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const { date } = req.query;\n      \n      if (!date) {\n        return res.status(400).json({ error: \"Date parameter is required\" });\n      }\n      \n      const requestedDate = new Date(date as string);\n      const dayName = requestedDate.toLocaleDateString('en-US', { weekday: 'lowercase' });\n      \n      // Get doctor's schedule\n      const schedule = global.doctorSchedule || {\n        monday: { start: \"09:00\", end: \"17:00\", available: true },\n        tuesday: { start: \"09:00\", end: \"17:00\", available: true },\n        wednesday: { start: \"09:00\", end: \"17:00\", available: true },\n        thursday: { start: \"09:00\", end: \"17:00\", available: true },\n        friday: { start: \"09:00\", end: \"17:00\", available: true },\n        saturday: { start: \"09:00\", end: \"13:00\", available: false },\n        sunday: { start: \"09:00\", end: \"13:00\", available: false }\n      };\n      \n      const daySchedule = schedule[dayName];\n      \n      if (!daySchedule || !daySchedule.available) {\n        return res.json({ availableSlots: [] });\n      }\n      \n      // Generate 30-minute time slots\n      const slots = [];\n      const startTime = new Date(`${date}T${daySchedule.start}:00`);\n      const endTime = new Date(`${date}T${daySchedule.end}:00`);\n      \n      let currentTime = new Date(startTime);\n      while (currentTime < endTime) {\n        const timeString = currentTime.toTimeString().slice(0, 5);\n        \n        // Check if slot is already booked\n        const existingBookings = await storage.getBookingsByDoctor(doctorId);\n        const isBooked = existingBookings.some(booking => {\n          const bookingDate = new Date(booking.appointmentDate);\n          return bookingDate.toDateString() === requestedDate.toDateString() &&\n                 bookingDate.getHours() === currentTime.getHours() &&\n                 bookingDate.getMinutes() === currentTime.getMinutes() &&\n                 booking.status !== 'cancelled';\n        });\n        \n        if (!isBooked) {\n          slots.push({\n            time: timeString,\n            available: true,\n            datetime: currentTime.toISOString()\n          });\n        }\n        \n        currentTime.setMinutes(currentTime.getMinutes() + 30);\n      }\n      \n      res.json({ availableSlots: slots });\n    } catch (error) {\n      console.error(\"Error fetching available slots:\", error);\n      res.status(500).json({ error: \"Failed to fetch available slots\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":50778},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Patient, \n  type InsertPatient, \n  type Doctor, \n  type InsertDoctor, \n  type Booking, \n  type InsertBooking, \n  type Payment, \n  type InsertPayment,\n  type ActivityLog,\n  type InsertActivityLog,\n  type SystemNotification,\n  type InsertSystemNotification\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Patients\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByUserId(userId: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatientMembership(patientId: string, membershipType: string): Promise<Patient>;\n\n  // Doctors\n  getDoctor(id: string): Promise<Doctor | undefined>;\n  getDoctorByUserId(userId: string): Promise<Doctor | undefined>;\n  getDoctors(filters: { province?: string; specialty?: string; city?: string }): Promise<Doctor[]>;\n  createDoctor(doctor: InsertDoctor): Promise<Doctor>;\n  updateDoctorVerification(doctorId: string, isVerified: boolean): Promise<Doctor>;\n\n  // Bookings\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByPatient(patientId: string): Promise<Booking[]>;\n  getBookingsByDoctor(doctorId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(bookingId: string, status: string): Promise<Booking>;\n\n  // Payments\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePaymentStatus(payFastPaymentId: string, status: string): Promise<void>;\n\n  // Platform stats\n  getPlatformStats(): Promise<{\n    totalDoctors: number;\n    totalPatients: number;\n    totalBookings: number;\n    averageRating: number;\n  }>;\n\n  // Activity logs\n  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  logActivity(activityData: any): Promise<ActivityLog>;\n\n  // System notifications\n  createSystemNotification(notification: InsertSystemNotification): Promise<SystemNotification>;\n  getSystemNotifications(targetSystem?: string): Promise<SystemNotification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n\n  // CRM support methods\n  countUsers(): Promise<number>;\n  countDoctors(): Promise<number>;\n  getAllUsers(): Promise<any[]>;\n  getAllPayments(): Promise<any[]>;\n  getRecentActivity(limit?: number): Promise<ActivityLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private patients: Map<string, Patient>;\n  private doctors: Map<string, Doctor>;\n  private bookings: Map<string, Booking>;\n  private payments: Map<string, Payment>;\n  private activityLogs: Map<string, ActivityLog>;\n  private systemNotifications: Map<string, SystemNotification>;\n\n  constructor() {\n    this.users = new Map();\n    this.patients = new Map();\n    this.doctors = new Map();\n    this.bookings = new Map();\n    this.payments = new Map();\n    this.activityLogs = new Map();\n    this.systemNotifications = new Map();\n\n    // Initialize with some mock data for demonstration\n    this.initializeMockData();\n  }\n\n  private initializeMockData() {\n    // Create mock doctors for each province\n    const mockDoctors = [\n      {\n        id: 'doctor-sarah-mthembu',\n        userId: 'user-sarah-mthembu',\n        firstName: 'Sarah',\n        lastName: 'Mthembu',\n        specialty: 'Cardiology',\n        hpcsaNumber: 'MP123456',\n        phone: '+27 11 123 4567',\n        province: 'Gauteng',\n        city: 'Johannesburg',\n        zipCode: '2196',\n        practiceAddress: '123 Medical Centre, Sandton',\n        isVerified: true,\n        rating: '5.0',\n        reviewCount: 127,\n        consultationFee: '850.00',\n      },\n      {\n        id: 'doctor-michael-van-der-merwe',\n        userId: 'user-michael-van-der-merwe',\n        firstName: 'Michael',\n        lastName: 'Van Der Merwe',\n        specialty: 'General Practice',\n        hpcsaNumber: 'MP234567',\n        phone: '+27 21 456 7890',\n        province: 'Western Cape',\n        city: 'Cape Town',\n        zipCode: '7708',\n        practiceAddress: '456 Health Plaza, Claremont',\n        isVerified: true,\n        rating: '4.5',\n        reviewCount: 89,\n        consultationFee: '650.00',\n      },\n      {\n        id: 'doctor-nomsa-dlamini',\n        userId: 'user-nomsa-dlamini',\n        firstName: 'Nomsa',\n        lastName: 'Dlamini',\n        specialty: 'Pediatrics',\n        hpcsaNumber: 'MP345678',\n        phone: '+27 31 789 0123',\n        province: 'KwaZulu-Natal',\n        city: 'Durban',\n        zipCode: '4051',\n        practiceAddress: '789 Children\\'s Clinic, Umhlanga',\n        isVerified: true,\n        rating: '5.0',\n        reviewCount: 156,\n        consultationFee: '750.00',\n      },\n      // Demo doctor for testing login\n      {\n        id: 'doctor-michael-johnson',\n        userId: 'user-michael-johnson',\n        firstName: 'Michael',\n        lastName: 'Johnson',\n        specialty: 'Cardiology',\n        hpcsaNumber: 'MP789123',\n        phone: '+27 11 555 1234',\n        province: 'Gauteng',\n        city: 'Johannesburg',\n        zipCode: '2000',\n        practiceAddress: '456 Heart Centre, Sandton, Johannesburg',\n        isVerified: true,\n        rating: '4.8',\n        reviewCount: 98,\n        consultationFee: '850.00',\n      },\n    ];\n\n    mockDoctors.forEach(doctor => {\n      this.doctors.set(doctor.id, doctor);\n      \n      // Create corresponding user with special email for demo doctor\n      let email: string;\n      if (doctor.id === 'doctor-michael-johnson') {\n        email = 'dr.johnson@example.com';  // Special demo credentials\n      } else {\n        email = `${doctor.firstName.toLowerCase()}.${doctor.lastName.toLowerCase().replace(/\\s+/g, '.')}@example.com`;\n      }\n      \n      const user: User = {\n        id: doctor.userId,\n        email: email,\n        role: 'doctor',\n        createdAt: new Date(),\n      };\n      this.users.set(user.id, user);\n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      role: insertUser.role || 'patient',\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Patients\n  async getPatient(id: string): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async getPatientByUserId(userId: string): Promise<Patient | undefined> {\n    return Array.from(this.patients.values()).find(patient => patient.userId === userId);\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const id = randomUUID();\n    const patient: Patient = {\n      ...insertPatient,\n      id,\n      phone: insertPatient.phone || null,\n      dateOfBirth: insertPatient.dateOfBirth || null,\n      province: insertPatient.province || null,\n      membershipType: 'basic',\n      freeBookingsRemaining: 0,\n      membershipExpiresAt: null,\n    };\n    this.patients.set(id, patient);\n    return patient;\n  }\n\n  async updatePatientMembership(patientId: string, membershipType: string): Promise<Patient> {\n    const patient = this.patients.get(patientId);\n    if (!patient) {\n      throw new Error('Patient not found');\n    }\n\n    const updatedPatient: Patient = {\n      ...patient,\n      membershipType,\n      freeBookingsRemaining: membershipType === 'premium' ? 5 : 0,\n      membershipExpiresAt: membershipType === 'premium' \n        ? new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // 90 days from now\n        : null,\n    };\n\n    this.patients.set(patientId, updatedPatient);\n    return updatedPatient;\n  }\n\n  // Doctors\n  async getDoctor(id: string): Promise<Doctor | undefined> {\n    return this.doctors.get(id);\n  }\n\n  async getDoctorByUserId(userId: string): Promise<Doctor | undefined> {\n    return Array.from(this.doctors.values()).find(doctor => doctor.userId === userId);\n  }\n\n  async getDoctors(filters: { province?: string; specialty?: string; city?: string }): Promise<Doctor[]> {\n    let doctors = Array.from(this.doctors.values());\n\n    if (filters.province) {\n      doctors = doctors.filter(doctor => doctor.province === filters.province);\n    }\n\n    if (filters.specialty) {\n      doctors = doctors.filter(doctor => doctor.specialty === filters.specialty);\n    }\n\n    if (filters.city) {\n      doctors = doctors.filter(doctor => doctor.city === filters.city);\n    }\n\n    return doctors;\n  }\n\n  async createDoctor(insertDoctor: InsertDoctor): Promise<Doctor> {\n    const id = randomUUID();\n    const doctor: Doctor = {\n      ...insertDoctor,\n      id,\n      phone: insertDoctor.phone || null,\n      practiceAddress: insertDoctor.practiceAddress || null,\n      isVerified: false,\n      rating: '0.00',\n      reviewCount: 0,\n      consultationFee: insertDoctor.consultationFee || '650.00',\n    };\n    this.doctors.set(id, doctor);\n    return doctor;\n  }\n\n  async updateDoctorVerification(doctorId: string, isVerified: boolean): Promise<Doctor> {\n    const doctor = this.doctors.get(doctorId);\n    if (!doctor) {\n      throw new Error('Doctor not found');\n    }\n\n    const updatedDoctor: Doctor = {\n      ...doctor,\n      isVerified\n    };\n    \n    this.doctors.set(doctorId, updatedDoctor);\n    return updatedDoctor;\n  }\n\n  // Bookings\n  async getBooking(id: string): Promise<Booking | undefined> {\n    return this.bookings.get(id);\n  }\n\n  async getBookingsByPatient(patientId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.patientId === patientId);\n  }\n\n  async getBookingsByDoctor(doctorId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.doctorId === doctorId);\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const id = randomUUID();\n    const booking: Booking = {\n      ...insertBooking,\n      id,\n      status: 'pending',\n      convenienceFee: insertBooking.convenienceFee || '10.00',\n      paymentStatus: 'pending',\n      paymentId: null,\n      createdAt: new Date(),\n    };\n    this.bookings.set(id, booking);\n    return booking;\n  }\n\n  async updateBookingStatus(bookingId: string, status: string): Promise<Booking> {\n    const booking = this.bookings.get(bookingId);\n    if (!booking) {\n      throw new Error('Booking not found');\n    }\n\n    const updatedBooking: Booking = {\n      ...booking,\n      status: status as any\n    };\n    \n    this.bookings.set(bookingId, updatedBooking);\n    return updatedBooking;\n  }\n\n  // Payments\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const id = randomUUID();\n    const payment: Payment = {\n      ...insertPayment,\n      id,\n      currency: insertPayment.currency || 'ZAR',\n      status: insertPayment.status || 'pending',\n      payFastPaymentId: null,\n      createdAt: new Date(),\n    };\n    this.payments.set(id, payment);\n    return payment;\n  }\n\n  async updatePaymentStatus(payFastPaymentId: string, status: string): Promise<void> {\n    for (const [id, payment] of Array.from(this.payments.entries())) {\n      if (payment.payFastPaymentId === payFastPaymentId) {\n        this.payments.set(id, { ...payment, status });\n        break;\n      }\n    }\n  }\n\n  // Platform stats\n  async getPlatformStats(): Promise<{\n    totalDoctors: number;\n    totalPatients: number;\n    totalBookings: number;\n    averageRating: number;\n  }> {\n    const totalDoctors = this.doctors.size;\n    const totalPatients = this.patients.size;\n    const totalBookings = this.bookings.size;\n    \n    const ratings = Array.from(this.doctors.values())\n      .map(doctor => parseFloat(doctor.rating || '0'))\n      .filter(rating => rating > 0);\n    \n    const averageRating = ratings.length > 0 \n      ? ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length \n      : 0;\n\n    return {\n      totalDoctors,\n      totalPatients,\n      totalBookings,\n      averageRating: Math.round(averageRating * 10) / 10,\n    };\n  }\n\n  // Activity logs\n  async createActivityLog(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const id = randomUUID();\n    const log: ActivityLog = {\n      ...insertLog,\n      id,\n      userId: insertLog.userId || null,\n      entityType: insertLog.entityType || null,\n      entityId: insertLog.entityId || null,\n      details: insertLog.details || null,\n      ipAddress: insertLog.ipAddress || null,\n      userAgent: insertLog.userAgent || null,\n      source: insertLog.source || \"main_site\",\n      createdAt: new Date(),\n    };\n    this.activityLogs.set(id, log);\n    return log;\n  }\n\n  async getActivityLogs(limit: number = 50): Promise<ActivityLog[]> {\n    const logs = Array.from(this.activityLogs.values())\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime())\n      .slice(0, limit);\n    return logs;\n  }\n\n  async logActivity(activityData: any): Promise<ActivityLog> {\n    const logData: InsertActivityLog = {\n      userId: activityData.userId || null,\n      action: activityData.action || 'page_view',\n      entityType: activityData.page || 'page',\n      entityId: activityData.resourceId || null,\n      details: activityData.details || null,\n      ipAddress: activityData.ipAddress || null,\n      userAgent: activityData.userAgent || null,\n      source: activityData.source || 'main_site',\n    };\n    return this.createActivityLog(logData);\n  }\n\n  // System notifications\n  async createSystemNotification(insertNotification: InsertSystemNotification): Promise<SystemNotification> {\n    const id = randomUUID();\n    const notification: SystemNotification = {\n      ...insertNotification,\n      id,\n      targetSystem: insertNotification.targetSystem || null,\n      metadata: insertNotification.metadata || null,\n      isRead: false,\n      createdAt: new Date(),\n      expiresAt: insertNotification.expiresAt || null,\n    };\n    this.systemNotifications.set(id, notification);\n    return notification;\n  }\n\n  async getSystemNotifications(targetSystem?: string): Promise<SystemNotification[]> {\n    const notifications = Array.from(this.systemNotifications.values())\n      .filter(n => !targetSystem || n.targetSystem === targetSystem || n.targetSystem === 'both')\n      .filter(n => !n.expiresAt || n.expiresAt > new Date())\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n    return notifications;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    const notification = this.systemNotifications.get(id);\n    if (notification) {\n      this.systemNotifications.set(id, { ...notification, isRead: true });\n    }\n  }\n\n  // CRM support methods\n  async countUsers(): Promise<number> {\n    return this.users.size;\n  }\n\n  async countDoctors(): Promise<number> {\n    return this.doctors.size;\n  }\n\n  async getRecentActivity(limit: number = 20): Promise<ActivityLog[]> {\n    return this.getActivityLogs(limit);\n  }\n\n  async getAllUsers(): Promise<any[]> {\n    const users = Array.from(this.users.values());\n    const patients = Array.from(this.patients.values());\n    const doctors = Array.from(this.doctors.values());\n    \n    return users.map(user => {\n      // Find associated patient or doctor profile\n      const patient = patients.find(p => p.userId === user.id);\n      const doctor = doctors.find(d => d.userId === user.id);\n      \n      // Return user with profile information\n      return {\n        ...user,\n        firstName: patient?.firstName || doctor?.firstName || 'Unknown',\n        lastName: patient?.lastName || doctor?.lastName || 'User',\n        phone: patient?.phone || doctor?.phone || null,\n        specialty: doctor?.specialty || null,\n        province: patient?.province || doctor?.province || null,\n        city: patient?.city || doctor?.city || null,\n        isVerified: doctor?.isVerified || null,\n      };\n    }).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getAllPayments(): Promise<any[]> {\n    const payments = Array.from(this.payments.values());\n    const users = Array.from(this.users.values());\n    \n    return payments.map(payment => ({\n      ...payment,\n      user: users.find(user => user.id === payment.userId)\n    })).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async removeUser(userId: string): Promise<void> {\n    // Remove user from main users collection\n    this.users.delete(userId);\n    \n    // Remove associated doctor profile if exists\n    const doctorToRemove = Array.from(this.doctors.values()).find(doctor => doctor.userId === userId);\n    if (doctorToRemove) {\n      this.doctors.delete(doctorToRemove.id);\n    }\n    \n    // Remove associated patient profile if exists\n    const patientToRemove = Array.from(this.patients.values()).find(patient => patient.userId === userId);\n    if (patientToRemove) {\n      this.patients.delete(patientToRemove.id);\n    }\n    \n    // Remove user's bookings\n    const userBookings = Array.from(this.bookings.values()).filter(booking => \n      booking.patientId === userId || booking.doctorId === userId\n    );\n    userBookings.forEach(booking => this.bookings.delete(booking.id));\n    \n    // Remove user's payments\n    const userPayments = Array.from(this.payments.values()).filter(payment => payment.userId === userId);\n    userPayments.forEach(payment => this.payments.delete(payment.id));\n  }\n\n  async getUser(userId: string): Promise<any> {\n    return this.users.get(userId) || null;\n  }\n\n  async updateDoctor(doctorId: string, updateData: any): Promise<Doctor> {\n    const existingDoctor = this.doctors.get(doctorId);\n    if (!existingDoctor) {\n      throw new Error('Doctor not found');\n    }\n    \n    const updatedDoctor = { ...existingDoctor, ...updateData };\n    this.doctors.set(doctorId, updatedDoctor);\n    return updatedDoctor;\n  }\n\n  async getBooking(bookingId: string): Promise<Booking | undefined> {\n    return this.bookings.get(bookingId);\n  }\n\n  async updateBooking(bookingId: string, updateData: any): Promise<Booking> {\n    const existingBooking = this.bookings.get(bookingId);\n    if (!existingBooking) {\n      throw new Error('Booking not found');\n    }\n    \n    const updatedBooking = { ...existingBooking, ...updateData };\n    this.bookings.set(bookingId, updatedBooking);\n    return updatedBooking;\n  }\n\n  async getBookingsByDoctor(doctorId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.doctorId === doctorId);\n  }\n\n  async getBookingsByPatient(patientId: string): Promise<Booking[]> {\n    return Array.from(this.bookings.values()).filter(booking => booking.patientId === patientId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":18980},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication and basic info\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: text(\"role\").notNull().default(\"patient\"), // patient, doctor, admin\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  emailVerificationToken: text(\"email_verification_token\"),\n  emailVerificationExpires: timestamp(\"email_verification_expires\"),\n  passwordResetToken: text(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  twoFactorSecret: text(\"two_factor_secret\"),\n  isTwoFactorEnabled: boolean(\"is_two_factor_enabled\").default(false),\n  loginAttempts: integer(\"login_attempts\").default(0),\n  lockedUntil: timestamp(\"locked_until\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User sessions table for JWT token management\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  tokenHash: text(\"token_hash\").notNull(),\n  userAgent: text(\"user_agent\"),\n  ipAddress: text(\"ip_address\"),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isRevoked: boolean(\"is_revoked\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Doctor verification documents\nexport const doctorDocuments = pgTable(\"doctor_documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  doctorId: uuid(\"doctor_id\").references(() => doctors.id).notNull(),\n  documentType: text(\"document_type\").notNull(), // hpcsa_certificate, degree, id_document, practice_license\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\"),\n  mimeType: text(\"mime_type\"),\n  verificationStatus: text(\"verification_status\").default(\"pending\"), // pending, verified, rejected\n  verificationNotes: text(\"verification_notes\"),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  verifiedAt: timestamp(\"verified_at\"),\n  verifiedBy: uuid(\"verified_by\").references(() => users.id),\n});\n\n// Patient profiles\nexport const patients = pgTable(\"patients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  province: text(\"province\"),\n  membershipType: text(\"membership_type\").default(\"basic\"), // basic, premium\n  freeBookingsRemaining: integer(\"free_bookings_remaining\").default(0),\n  membershipExpiresAt: timestamp(\"membership_expires_at\"),\n});\n\n// Doctor profiles\nexport const doctors = pgTable(\"doctors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  specialty: text(\"specialty\").notNull(),\n  hpcsaNumber: text(\"hpcsa_number\").notNull(),\n  phone: text(\"phone\"),\n  province: text(\"province\").notNull(),\n  city: text(\"city\").notNull(),\n  zipCode: text(\"zip_code\"),\n  practiceAddress: text(\"practice_address\"),\n  qualifications: text(\"qualifications\"),\n  experience: text(\"experience\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  verificationStatus: text(\"verification_status\").default(\"pending\"), // pending, under_review, verified, rejected\n  verificationNotes: text(\"verification_notes\"),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  reviewCount: integer(\"review_count\").default(0),\n  consultationFee: decimal(\"consultation_fee\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: uuid(\"patient_id\").references(() => patients.id).notNull(),\n  doctorId: uuid(\"doctor_id\").references(() => doctors.id).notNull(),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, confirmed, completed, cancelled\n  convenienceFee: decimal(\"convenience_fee\", { precision: 10, scale: 2 }).default(\"10.00\"),\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid, failed\n  paymentId: text(\"payment_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"ZAR\"),\n  type: text(\"type\").notNull(), // membership, booking, convenience_fee\n  status: text(\"status\").default(\"pending\"), // pending, completed, failed\n  payFastPaymentId: text(\"payfast_payment_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Activity logs for CRM tracking\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(), // login, booking_created, payment_completed, etc.\n  entityType: text(\"entity_type\"), // user, booking, payment, doctor\n  entityId: uuid(\"entity_id\"),\n  details: text(\"details\"), // JSON string with additional context\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  source: text(\"source\").default(\"main_site\"), // main_site, admin_crm\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System notifications for cross-communication\nexport const systemNotifications = pgTable(\"system_notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // info, warning, error, success\n  source: text(\"source\").notNull(), // main_site, admin_crm\n  targetSystem: text(\"target_system\"), // main_site, admin_crm, both\n  isRead: boolean(\"is_read\").default(false),\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true, \n  loginAttempts: true, \n  lockedUntil: true, \n  lastLogin: true,\n  isEmailVerified: true,\n  emailVerificationToken: true,\n  emailVerificationExpires: true,\n  passwordResetToken: true,\n  passwordResetExpires: true,\n  twoFactorSecret: true,\n  isTwoFactorEnabled: true\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({ \n  id: true, \n  createdAt: true, \n  isRevoked: true \n});\n\nexport const insertDoctorDocumentSchema = createInsertSchema(doctorDocuments).omit({ \n  id: true, \n  uploadedAt: true, \n  verifiedAt: true, \n  verifiedBy: true,\n  verificationStatus: true,\n  verificationNotes: true\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({ \n  id: true, \n  freeBookingsRemaining: true,\n  membershipExpiresAt: true \n});\n\nexport const insertDoctorSchema = createInsertSchema(doctors).omit({ \n  id: true, \n  isVerified: true,\n  verificationStatus: true,\n  verificationNotes: true,\n  rating: true,\n  reviewCount: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({ \n  id: true, \n  createdAt: true,\n  paymentStatus: true,\n  paymentId: true \n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({ id: true, createdAt: true });\nexport const insertSystemNotificationSchema = createInsertSchema(systemNotifications).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type DoctorDocument = typeof doctorDocuments.$inferSelect;\nexport type Patient = typeof patients.$inferSelect;\nexport type Doctor = typeof doctors.$inferSelect;\nexport type Booking = typeof bookings.$inferSelect;\nexport type Payment = typeof payments.$inferSelect;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type SystemNotification = typeof systemNotifications.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type InsertDoctorDocument = z.infer<typeof insertDoctorDocumentSchema>;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type InsertDoctor = z.infer<typeof insertDoctorSchema>;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type InsertSystemNotification = z.infer<typeof insertSystemNotificationSchema>;\n","size_bytes":9546},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport ErrorBoundary from \"@/components/ErrorBoundary\";\nimport EmergencyButton from \"@/components/EmergencyButton\";\n\nimport Index from \"@/pages/Index\";\nimport About from \"@/pages/About\";\nimport Contact from \"@/pages/Contact\";\nimport Membership from \"@/pages/Membership\";\nimport SearchResults from \"@/pages/SearchResults\";\nimport DoctorSearch from \"@/pages/DoctorSearch\";\nimport DoctorPortal from \"@/pages/DoctorPortal\";\nimport Emergency from \"@/pages/Emergency\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport PaymentSuccess from \"@/pages/PaymentSuccess\";\nimport PaymentCancelled from \"@/pages/PaymentCancelled\";\nimport VerificationPending from \"@/pages/VerificationPending\";\nimport Terms from \"@/pages/Terms\";\nimport Privacy from \"@/pages/Privacy\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\nimport BookAppointment from \"@/pages/BookAppointment\";\nimport DoctorSignup from \"@/pages/DoctorSignup\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Index} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/membership\" component={Membership} />\n      <Route path=\"/search\" component={SearchResults} />\n      <Route path=\"/doctors\" component={DoctorSearch} />\n      <Route path=\"/doctor-portal\" component={DoctorPortal} />\n      <Route path=\"/doctor-signup\" component={DoctorSignup} />\n      <Route path=\"/book/:doctorId\" component={BookAppointment} />\n      <Route path=\"/emergency\" component={Emergency} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/verification-pending\" component={VerificationPending} />\n      <Route path=\"/payment/success\" component={PaymentSuccess} />\n      <Route path=\"/payment/cancelled\" component={PaymentCancelled} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <AuthProvider>\n            <Toaster />\n            <Router />\n            <EmergencyButton />\n          </AuthProvider>\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":2758},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/environment.ts":{"content":"import { z } from 'zod';\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n  PORT: z.string().transform(val => parseInt(val) || 5000),\n  DATABASE_URL: z.string().url('DATABASE_URL is required'),\n  \n  // PayFast Configuration\n  VITE_PAYFAST_MERCHANT_ID: z.string().min(1, 'PayFast Merchant ID is required'),\n  VITE_PAYFAST_MERCHANT_KEY: z.string().min(1, 'PayFast Merchant Key is required'),\n  VITE_PAYFAST_PASSPHRASE: z.string().min(1, 'PayFast Passphrase is required'),\n  \n  // Supabase Configuration (optional for direct DB access)\n  VITE_SUPABASE_URL: z.string().url().optional(),\n  SUPABASE_SERVICE_ROLE_KEY: z.string().optional(),\n  \n  // Security\n  JWT_SECRET: z.string().min(32).optional(),\n  ENCRYPTION_KEY: z.string().min(32).optional(),\n  \n  // External Services\n  SMTP_HOST: z.string().optional(),\n  SMTP_PORT: z.string().transform(val => parseInt(val) || 587).optional(),\n  SMTP_USER: z.string().optional(),\n  SMTP_PASS: z.string().optional(),\n  \n  // Feature Flags\n  MAINTENANCE_MODE: z.string().transform(val => val === 'true').default('false'),\n  ENABLE_ANALYTICS: z.string().transform(val => val === 'true').default('false'),\n  \n  // Rate Limiting\n  RATE_LIMIT_WINDOW_MS: z.string().transform(val => parseInt(val) || 15 * 60 * 1000).default('900000'),\n  RATE_LIMIT_MAX_REQUESTS: z.string().transform(val => parseInt(val) || 100).default('100'),\n});\n\ntype Environment = z.infer<typeof envSchema>;\n\nlet env: Environment;\n\ntry {\n  env = envSchema.parse(process.env);\n} catch (error) {\n  console.error('❌ Environment validation failed:');\n  if (error instanceof z.ZodError) {\n    error.errors.forEach(err => {\n      console.error(`  - ${err.path.join('.')}: ${err.message}`);\n    });\n  }\n  process.exit(1);\n}\n\nexport { env };\n\nexport const isDevelopment = env.NODE_ENV === 'development';\nexport const isProduction = env.NODE_ENV === 'production';\nexport const isTest = env.NODE_ENV === 'test';\n\n// Configuration objects\nexport const dbConfig = {\n  url: env.DATABASE_URL,\n  ssl: isProduction,\n};\n\nexport const payfastConfig = {\n  merchantId: env.VITE_PAYFAST_MERCHANT_ID,\n  merchantKey: env.VITE_PAYFAST_MERCHANT_KEY,\n  passphrase: env.VITE_PAYFAST_PASSPHRASE,\n  sandbox: isDevelopment,\n};\n\nexport const rateLimitConfig = {\n  windowMs: env.RATE_LIMIT_WINDOW_MS,\n  maxRequests: env.RATE_LIMIT_MAX_REQUESTS,\n};\n\nexport const corsConfig = {\n  origin: isProduction \n    ? ['https://ironledgermedmap.com', 'https://www.ironledgermedmap.com']\n    : ['http://localhost:3000', 'http://localhost:5000'],\n  credentials: true,\n};\n\nexport const securityConfig = {\n  jwtSecret: env.JWT_SECRET || 'fallback-secret-for-development',\n  encryptionKey: env.ENCRYPTION_KEY || 'fallback-encryption-key-dev',\n  bcryptRounds: isProduction ? 12 : 10,\n};","size_bytes":2805},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { AuthService } from '../services/authService';\nimport { db } from '../db';\nimport { users } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Extend Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        role: string;\n        isEmailVerified: boolean;\n        isTwoFactorEnabled: boolean;\n      };\n    }\n  }\n}\n\n// Authentication middleware\nexport async function authenticate(req: Request, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n    if (!token) {\n      return res.status(401).json({ error: 'Authentication token required' });\n    }\n\n    const decoded = await AuthService.verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: 'Invalid or expired token' });\n    }\n\n    // Get user from database\n    const [user] = await db.select({\n      id: users.id,\n      email: users.email,\n      role: users.role,\n      isEmailVerified: users.isEmailVerified,\n      isTwoFactorEnabled: users.isTwoFactorEnabled,\n    })\n    .from(users)\n    .where(eq(users.id, decoded.userId))\n    .limit(1);\n\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n}\n\n// Role-based authorization middleware\nexport function authorize(roles: string | string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const allowedRoles = Array.isArray(roles) ? roles : [roles];\n    \n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n\n    next();\n  };\n}\n\n// Email verification requirement middleware\nexport function requireEmailVerification(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (!req.user.isEmailVerified) {\n    return res.status(403).json({ \n      error: 'Email verification required',\n      code: 'EMAIL_NOT_VERIFIED'\n    });\n  }\n\n  next();\n}\n\n// Two-factor authentication requirement middleware\nexport function require2FA(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (req.user.isTwoFactorEnabled) {\n    const twoFactorToken = req.headers['x-2fa-token'] as string;\n    \n    if (!twoFactorToken) {\n      return res.status(403).json({ \n        error: 'Two-factor authentication required',\n        code: '2FA_REQUIRED'\n      });\n    }\n\n    // Verify 2FA token (this would be done in the route handler)\n    // We pass it through here and let the route handler verify\n  }\n\n  next();\n}\n\n// Doctor-specific authentication\nexport function authenticateDoctor(req: Request, res: Response, next: NextFunction) {\n  authenticate(req, res, (err) => {\n    if (err) return next(err);\n    \n    if (req.user?.role !== 'doctor') {\n      return res.status(403).json({ error: 'Doctor access required' });\n    }\n    \n    next();\n  });\n}\n\n// Admin-specific authentication\nexport function authenticateAdmin(req: Request, res: Response, next: NextFunction) {\n  authenticate(req, res, (err) => {\n    if (err) return next(err);\n    \n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ error: 'Admin access required' });\n    }\n    \n    next();\n  });\n}\n\n// Optional authentication (for routes that work with or without auth)\nexport async function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.slice(7) : null;\n\n    if (token) {\n      const decoded = await AuthService.verifyToken(token);\n      if (decoded) {\n        const [user] = await db.select({\n          id: users.id,\n          email: users.email,\n          role: users.role,\n          isEmailVerified: users.isEmailVerified,\n          isTwoFactorEnabled: users.isTwoFactorEnabled,\n        })\n        .from(users)\n        .where(eq(users.id, decoded.userId))\n        .limit(1);\n\n        if (user) {\n          req.user = user;\n        }\n      }\n    }\n\n    next();\n  } catch (error) {\n    // Silently continue without authentication for optional auth\n    next();\n  }\n}","size_bytes":4689},"server/middleware/errorHandler.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\nexport interface AppError extends Error {\n  statusCode: number;\n  isOperational: boolean;\n}\n\nexport class CustomError extends Error implements AppError {\n  public statusCode: number;\n  public isOperational: boolean;\n\n  constructor(message: string, statusCode: number = 500, isOperational: boolean = true) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = isOperational;\n    \n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport const errorHandler = (\n  error: AppError | Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  let statusCode = 500;\n  let message = 'Internal Server Error';\n  let details: any = undefined;\n\n  // Handle known error types\n  if ('statusCode' in error) {\n    statusCode = error.statusCode;\n    message = error.message;\n  } else if (error.name === 'ValidationError') {\n    statusCode = 400;\n    message = 'Validation Error';\n    details = error.message;\n  } else if (error.name === 'CastError') {\n    statusCode = 400;\n    message = 'Invalid ID format';\n  } else if (error.name === 'JsonWebTokenError') {\n    statusCode = 401;\n    message = 'Invalid token';\n  } else if (error.name === 'TokenExpiredError') {\n    statusCode = 401;\n    message = 'Token expired';\n  }\n\n  // Log error for debugging\n  console.error('Error:', {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip,\n    userAgent: req.get('User-Agent'),\n    userId: (req as any).user?.id\n  });\n\n  // Don't expose error details in production\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  \n  res.status(statusCode).json({\n    error: message,\n    ...(details && { details }),\n    ...(isDevelopment && { stack: error.stack }),\n    timestamp: new Date().toISOString(),\n    path: req.url\n  });\n};\n\nexport const notFoundHandler = (req: Request, res: Response) => {\n  res.status(404).json({\n    error: 'Route not found',\n    message: `Cannot ${req.method} ${req.path}`,\n    timestamp: new Date().toISOString()\n  });\n};\n\n// Async error wrapper\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};","size_bytes":2292},"server/middleware/logging.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\nexport interface LogEntry {\n  timestamp: string;\n  method: string;\n  url: string;\n  ip: string;\n  userAgent: string;\n  userId?: string;\n  duration: number;\n  statusCode: number;\n  error?: string;\n}\n\nconst logs: LogEntry[] = [];\n\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\n  const startTime = Date.now();\n  \n  // Capture original end function\n  const originalEnd = res.end;\n  \n  res.end = function(chunk?: any, encoding?: BufferEncoding) {\n    const duration = Date.now() - startTime;\n    \n    const logEntry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      method: req.method,\n      url: req.url,\n      ip: req.ip || req.connection.remoteAddress || 'unknown',\n      userAgent: req.get('User-Agent') || 'unknown',\n      userId: (req as any).user?.id,\n      duration,\n      statusCode: res.statusCode\n    };\n\n    // Add error if status indicates failure\n    if (res.statusCode >= 400) {\n      logEntry.error = `HTTP ${res.statusCode}`;\n    }\n\n    logs.push(logEntry);\n    \n    // Keep only last 1000 entries in memory\n    if (logs.length > 1000) {\n      logs.splice(0, logs.length - 1000);\n    }\n\n    console.log(`${req.method} ${req.url} ${res.statusCode} in ${duration}ms`);\n    \n    // Call original end function\n    originalEnd.call(this, chunk, encoding);\n  };\n\n  next();\n};\n\nexport const getLogs = (limit = 100) => {\n  return logs.slice(-limit).reverse();\n};\n\nexport const getLogStats = () => {\n  const now = Date.now();\n  const oneHourAgo = now - 60 * 60 * 1000;\n  const oneDayAgo = now - 24 * 60 * 60 * 1000;\n\n  const recentLogs = logs.filter(log => \n    new Date(log.timestamp).getTime() > oneHourAgo\n  );\n  \n  const dailyLogs = logs.filter(log => \n    new Date(log.timestamp).getTime() > oneDayAgo\n  );\n\n  return {\n    totalRequests: logs.length,\n    requestsLastHour: recentLogs.length,\n    requestsLast24Hours: dailyLogs.length,\n    averageResponseTime: logs.length > 0 \n      ? Math.round(logs.reduce((sum, log) => sum + log.duration, 0) / logs.length)\n      : 0,\n    errorRate: logs.length > 0 \n      ? Math.round((logs.filter(log => log.statusCode >= 400).length / logs.length) * 100)\n      : 0\n  };\n};","size_bytes":2230},"server/middleware/rateLimit.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\ninterface RateLimitStore {\n  [key: string]: {\n    count: number;\n    resetTime: number;\n  };\n}\n\nconst store: RateLimitStore = {};\n\nexport interface RateLimitOptions {\n  windowMs: number;\n  maxRequests: number;\n  message?: string;\n  keyGenerator?: (req: Request) => string;\n}\n\nexport const rateLimit = (options: RateLimitOptions) => {\n  const {\n    windowMs = 15 * 60 * 1000, // 15 minutes\n    maxRequests = 100,\n    message = 'Too many requests, please try again later',\n    keyGenerator = (req) => req.ip || 'anonymous'\n  } = options;\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = keyGenerator(req);\n    const now = Date.now();\n    \n    // Clean up expired entries\n    Object.keys(store).forEach(storeKey => {\n      if (store[storeKey].resetTime < now) {\n        delete store[storeKey];\n      }\n    });\n\n    if (!store[key]) {\n      store[key] = {\n        count: 1,\n        resetTime: now + windowMs\n      };\n      return next();\n    }\n\n    const record = store[key];\n    \n    if (record.resetTime < now) {\n      record.count = 1;\n      record.resetTime = now + windowMs;\n      return next();\n    }\n\n    record.count++;\n\n    // Set rate limit headers\n    res.set({\n      'X-RateLimit-Limit': maxRequests.toString(),\n      'X-RateLimit-Remaining': Math.max(0, maxRequests - record.count).toString(),\n      'X-RateLimit-Reset': Math.ceil(record.resetTime / 1000).toString()\n    });\n\n    if (record.count > maxRequests) {\n      return res.status(429).json({\n        error: 'Rate limit exceeded',\n        message,\n        retryAfter: Math.ceil((record.resetTime - now) / 1000)\n      });\n    }\n\n    next();\n  };\n};\n\n// Predefined rate limiters\nexport const authRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  maxRequests: 5, // 5 login attempts per 15 minutes\n  message: 'Too many authentication attempts, please try again later'\n});\n\nexport const apiRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  maxRequests: 100, // 100 requests per 15 minutes\n  message: 'Rate limit exceeded for API calls'\n});\n\nexport const bookingRateLimit = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  maxRequests: 10, // 10 bookings per hour\n  message: 'Booking rate limit exceeded',\n  keyGenerator: (req) => (req as any).user?.id || req.ip\n});","size_bytes":2358},"server/middleware/validation.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\n\nexport const validateRequest = (schema: {\n  body?: z.ZodSchema;\n  query?: z.ZodSchema;\n  params?: z.ZodSchema;\n}) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      if (schema.body) {\n        req.body = schema.body.parse(req.body);\n      }\n      \n      if (schema.query) {\n        req.query = schema.query.parse(req.query);\n      }\n      \n      if (schema.params) {\n        req.params = schema.params.parse(req.params);\n      }\n      \n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          details: error.errors.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        });\n      }\n      \n      next(error);\n    }\n  };\n};\n\nexport const rateLimitSchema = z.object({\n  windowMs: z.number().min(1000).default(15 * 60 * 1000), // 15 minutes\n  maxRequests: z.number().min(1).default(100)\n});\n\nexport const paginationSchema = z.object({\n  page: z.string().transform(val => Math.max(1, parseInt(val) || 1)),\n  limit: z.string().transform(val => Math.min(100, Math.max(1, parseInt(val) || 10)))\n});\n\nexport const searchSchema = z.object({\n  q: z.string().min(1).max(100).optional(),\n  specialty: z.string().max(50).optional(),\n  province: z.string().max(50).optional(),\n  city: z.string().max(50).optional(),\n  sortBy: z.enum(['name', 'rating', 'experience', 'price']).default('rating'),\n  sortOrder: z.enum(['asc', 'desc']).default('desc')\n});","size_bytes":1613},"server/migrations/migrate.ts":{"content":"import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { migrate } from 'drizzle-orm/neon-http/migrator';\nimport * as schema from '../../shared/schema';\n\nconst sql = neon(process.env.DATABASE_URL!);\nconst db = drizzle(sql, { schema });\n\nexport async function runMigrations() {\n  try {\n    console.log('🚀 Running database migrations...');\n    \n    await migrate(db, { migrationsFolder: './migrations' });\n    \n    console.log('✅ Migrations completed successfully');\n  } catch (error) {\n    console.error('❌ Migration failed:', error);\n    process.exit(1);\n  }\n}\n\nexport async function createInitialData() {\n  try {\n    console.log('🌱 Creating initial data...');\n\n    // Check if we already have data\n    const existingDoctors = await db.select().from(schema.doctors).limit(1);\n    if (existingDoctors.length > 0) {\n      console.log('📊 Initial data already exists, skipping...');\n      return;\n    }\n\n    // Create sample doctors for each province\n    const provinces = [\n      'Western Cape', 'Eastern Cape', 'Northern Cape', 'Free State',\n      'KwaZulu-Natal', 'North West', 'Gauteng', 'Mpumalanga', 'Limpopo'\n    ];\n\n    const specialties = [\n      'General Practice', 'Cardiology', 'Dermatology', 'Neurology',\n      'Orthopedics', 'Pediatrics', 'Psychiatry', 'Radiology'\n    ];\n\n    for (let i = 0; i < 25; i++) {\n      const doctorData = {\n        name: `Dr. ${['John', 'Jane', 'Mike', 'Sarah', 'David', 'Lisa'][i % 6]} ${['Smith', 'Johnson', 'Brown', 'Davis', 'Wilson'][i % 5]}`,\n        specialty: specialties[i % specialties.length],\n        qualifications: ['MBChB', 'MMed', 'FC', 'PhD'][Math.floor(i / 7) % 4],\n        experience: Math.floor(Math.random() * 20) + 5,\n        location: provinces[i % provinces.length],\n        rating: 4 + Math.random(),\n        consultationFee: 500 + Math.floor(Math.random() * 1000),\n        bio: `Experienced ${specialties[i % specialties.length].toLowerCase()} specialist with ${Math.floor(Math.random() * 20) + 5} years of practice.`,\n        availableSlots: [\n          '09:00', '10:00', '11:00', '14:00', '15:00', '16:00'\n        ],\n        isVerified: true\n      };\n\n      await db.insert(schema.doctors).values(doctorData);\n    }\n\n    console.log('✅ Initial data created successfully');\n  } catch (error) {\n    console.error('❌ Failed to create initial data:', error);\n  }\n}\n\n// Run migrations and initial data if this file is executed directly\nif (require.main === module) {\n  runMigrations()\n    .then(() => createInitialData())\n    .then(() => {\n      console.log('🎉 Database setup complete');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('💥 Setup failed:', error);\n      process.exit(1);\n    });\n}","size_bytes":2754},"client/src/components/BackButton.tsx":{"content":"import { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\n\ninterface BackButtonProps {\n  fallbackPath?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport default function BackButton({ \n  fallbackPath = '/', \n  className = '',\n  children = 'Back'\n}: BackButtonProps) {\n  const [, setLocation] = useLocation();\n\n  const handleBack = () => {\n    // Try to go back in browser history first\n    if (window.history.length > 1) {\n      window.history.back();\n    } else {\n      // Fallback to specified path or home\n      setLocation(fallbackPath);\n    }\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={handleBack}\n      className={`flex items-center gap-2 ${className}`}\n      data-testid=\"button-back\"\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      {children}\n    </Button>\n  );\n}","size_bytes":891},"client/src/components/DoctorCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Star, CheckCircle, Calendar, MapPin } from 'lucide-react';\n\ninterface Doctor {\n  id: string;\n  firstName: string;\n  lastName: string;\n  specialty: string;\n  province: string;\n  city: string;\n  rating: number;\n  reviewCount: number;\n  isVerified: boolean;\n  availableToday: boolean;\n  imageUrl?: string;\n}\n\ninterface DoctorCardProps {\n  doctor: Doctor;\n  onBookAppointment?: (doctorId: string) => void;\n}\n\nexport default function DoctorCard({ doctor, onBookAppointment }: DoctorCardProps) {\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />);\n    }\n    \n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-4 w-4 fill-yellow-500/50 text-yellow-500\" />);\n    }\n    \n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-gray-300\" />);\n    }\n    \n    return stars;\n  };\n\n  const initials = `${doctor.firstName.charAt(0)}${doctor.lastName.charAt(0)}`;\n\n  return (\n    <Card \n      className=\"hover:shadow-xl transition-shadow duration-300\"\n      data-testid={`card-doctor-${doctor.id}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"text-center space-y-4\">\n          {/* Doctor Avatar */}\n          <Avatar className=\"w-20 h-20 mx-auto\">\n            <AvatarImage \n              src={doctor.imageUrl} \n              alt={`Dr. ${doctor.firstName} ${doctor.lastName}`} \n            />\n            <AvatarFallback className=\"text-lg font-semibold\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          \n          {/* Doctor Info */}\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Dr. {doctor.firstName} {doctor.lastName}\n            </h3>\n            <p className=\"text-primary font-medium\">{doctor.specialty}</p>\n            <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              <span>{doctor.city}, {doctor.province}</span>\n            </div>\n          </div>\n          \n          {/* Rating */}\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"flex items-center space-x-1\">\n              {renderStars(doctor.rating)}\n            </div>\n            <span className=\"text-sm text-muted-foreground\">\n              ({doctor.reviewCount} reviews)\n            </span>\n          </div>\n          \n          {/* Status Badges */}\n          <div className=\"flex items-center justify-center space-x-4 text-sm\">\n            {doctor.isVerified && (\n              <div className=\"flex items-center space-x-1 text-green-600\">\n                <CheckCircle className=\"h-4 w-4\" />\n                <span>HPCSA Verified</span>\n              </div>\n            )}\n            <div className={`flex items-center space-x-1 ${\n              doctor.availableToday ? 'text-blue-600' : 'text-orange-600'\n            }`}>\n              <Calendar className=\"h-4 w-4\" />\n              <span>{doctor.availableToday ? 'Available Today' : 'Next: Tomorrow'}</span>\n            </div>\n          </div>\n          \n          {/* Book Appointment Button */}\n          <Button \n            className=\"w-full\"\n            onClick={() => onBookAppointment?.(doctor.id)}\n            data-testid={`button-book-appointment-${doctor.id}`}\n          >\n            Book Appointment\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3963},"client/src/components/EmergencyButton.tsx":{"content":"import { Heart, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport default function EmergencyButton() {\n  const [, setLocation] = useLocation();\n\n  const handleEmergencyClick = () => {\n    setLocation(\"/emergency\");\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Button\n        onClick={handleEmergencyClick}\n        size=\"lg\"\n        className=\"bg-red-600 hover:bg-red-700 text-white shadow-2xl animate-pulse rounded-full p-4 h-16 w-16 flex items-center justify-center\"\n        data-testid=\"button-emergency-floating\"\n      >\n        <div className=\"flex flex-col items-center\">\n          <Heart className=\"h-6 w-6 mb-1\" />\n          <span className=\"text-xs font-bold\">SOS</span>\n        </div>\n      </Button>\n      \n      {/* Ripple effect */}\n      <div className=\"absolute inset-0 rounded-full bg-red-600 animate-ping opacity-20\"></div>\n      <div className=\"absolute inset-0 rounded-full bg-red-600 animate-ping opacity-10 animation-delay-1000\"></div>\n    </div>\n  );\n}","size_bytes":1076},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { AlertTriangle, RefreshCw, Home } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    this.setState({\n      error,\n      errorInfo\n    });\n\n    // Log to external service in production\n    if (process.env.NODE_ENV === 'production') {\n      // Example: Sentry.captureException(error, { extra: errorInfo });\n    }\n  }\n\n  private handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  private handleGoHome = () => {\n    window.location.href = '/';\n  };\n\n  public render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n          <Card className=\"max-w-2xl w-full\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900\">\n                Something went wrong\n              </CardTitle>\n              <p className=\"text-gray-600 mt-2\">\n                We're sorry, but something unexpected happened. Our team has been notified.\n              </p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {process.env.NODE_ENV === 'development' && this.state.error && (\n                <div className=\"bg-gray-100 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-sm text-gray-800 mb-2\">Error Details:</h4>\n                  <pre className=\"text-xs text-gray-600 overflow-auto max-h-40\">\n                    {this.state.error.toString()}\n                    {this.state.errorInfo?.componentStack}\n                  </pre>\n                </div>\n              )}\n              \n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  onClick={this.handleRetry}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-retry\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                  <span>Try Again</span>\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  onClick={this.handleGoHome}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-home\"\n                >\n                  <Home className=\"w-4 h-4\" />\n                  <span>Go Home</span>\n                </Button>\n              </div>\n              \n              <div className=\"text-center text-sm text-gray-500\">\n                <p>If this problem persists, please contact our support team.</p>\n                <p className=\"mt-1\">\n                  <a \n                    href=\"mailto:support@ironledgermedmap.com\" \n                    className=\"text-teal-600 hover:text-teal-700 underline\"\n                  >\n                    support@ironledgermedmap.com\n                  </a>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":4007},"client/src/components/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Stethoscope, Facebook, Twitter, Linkedin, Phone, Mail, MapPin, Shield } from 'lucide-react';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border py-12\" data-testid=\"footer-main\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Stethoscope className=\"text-primary-foreground h-4 w-4\" />\n              </div>\n              <span className=\"text-lg font-bold text-primary\">IronLedger MedMap</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Connecting South Africans with trusted, verified medical professionals across all 9 provinces.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-social-facebook\"\n              >\n                <Facebook className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-social-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-primary transition-colors\"\n                data-testid=\"link-social-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n          \n          {/* Quick Links */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground\">Quick Links</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/search\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Find Doctors\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/emergency\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Emergency Care\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/membership\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Membership Plans\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/doctor-registration\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Doctor Registration\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Support */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground\">Support</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/help\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Help Center\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Contact Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/privacy\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                  Terms of Service\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Contact Info */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground\">Contact</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Phone className=\"h-4 w-4 text-primary\" />\n                <span>+27 11 123 4567</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Mail className=\"h-4 w-4 text-primary\" />\n                <span>support@ironledgermedmap.co.za</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <MapPin className=\"h-4 w-4 text-primary\" />\n                <span>Cape Town, South Africa</span>\n              </div>\n            </div>\n            \n            {/* Payment Security */}\n            <div className=\"pt-4\">\n              <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <Shield className=\"h-4 w-4 text-green-600\" />\n                <span>Payments secured by PayFast</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8 text-center text-sm text-muted-foreground\">\n          <p>&copy; 2024 IronLedger MedMap. All rights reserved. | HPCSA Registered Platform</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5489},"client/src/components/Header.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { \n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from '@/components/ui/navigation-menu';\nimport { Menu, X, Stethoscope } from 'lucide-react';\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: 'Find Doctors', href: '/search' },\n    { name: 'Emergency', href: '/emergency' },\n    { name: 'About', href: '/about' },\n    { name: 'Contact', href: '/contact' },\n    { name: 'Admin Panel', href: '/admin' },\n  ];\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50\" data-testid=\"header-main\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-logo\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Stethoscope className=\"text-primary-foreground h-4 w-4\" />\n            </div>\n            <span className=\"text-xl font-bold text-primary\">IronLedger MedMap</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <NavigationMenu className=\"hidden md:flex\">\n            <NavigationMenuList>\n              {navigation.map((item) => (\n                <NavigationMenuItem key={item.name}>\n                  <Link \n                    href={item.href}\n                    className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                      location === item.href\n                        ? 'text-primary bg-primary/10'\n                        : 'text-muted-foreground hover:text-primary'\n                    }`}\n                    data-testid={`link-nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {item.name}\n                  </Link>\n                </NavigationMenuItem>\n              ))}\n            </NavigationMenuList>\n          </NavigationMenu>\n          \n          {/* Auth Buttons */}\n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground hidden sm:inline\">\n                  {user.email}\n                </span>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => signOut()}\n                  data-testid=\"button-signout\"\n                >\n                  Sign Out\n                </Button>\n              </div>\n            ) : (\n              <>\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </Link>\n                <Link href=\"/signup\">\n                  <Button size=\"sm\" data-testid=\"button-signup\">\n                    Sign Up\n                  </Button>\n                </Link>\n              </>\n            )}\n            \n            {/* Mobile Menu Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-border\" data-testid=\"nav-mobile-menu\">\n            <div className=\"space-y-2\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                    location === item.href\n                      ? 'text-primary bg-primary/10'\n                      : 'text-muted-foreground hover:text-primary'\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid={`link-mobile-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":4745},"client/src/components/MembershipPlans.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, X } from 'lucide-react';\nimport { usePayFast } from '@/hooks/usePayFast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface MembershipPlansProps {\n  onSelectPlan?: (plan: 'basic' | 'premium') => void;\n}\n\nexport default function MembershipPlans({ onSelectPlan }: MembershipPlansProps) {\n  const { user } = useAuth();\n  const { processMembershipPayment, loading } = usePayFast();\n  const { toast } = useToast();\n\n  const handlePremiumUpgrade = async () => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to upgrade to Premium membership.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const result = await processMembershipPayment();\n      if (!result.success) {\n        toast({\n          title: \"Payment Failed\",\n          description: result.error || \"Unable to process payment. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const basicFeatures = [\n    { text: 'Access to doctor directory', included: true },\n    { text: 'Basic search filters', included: true },\n    { text: 'View doctor profiles', included: true },\n    { text: 'R10 convenience fee per booking', included: false, warning: true },\n  ];\n\n  const premiumFeatures = [\n    { text: 'Everything in Basic plan', included: true },\n    { text: '5 FREE bookings per quarter', included: true, highlight: true },\n    { text: 'Priority customer support', included: true },\n    { text: 'Advanced search filters', included: true },\n    { text: 'Appointment reminders', included: true },\n  ];\n\n  return (\n    <section className=\"py-20 bg-gradient-to-br from-secondary/30 to-accent/20\" data-testid=\"section-membership-plans\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">\n            Choose Your Membership Plan\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Affordable healthcare access with PayFast secure payment processing\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          {/* Basic Plan */}\n          <Card className=\"shadow-lg border border-border\" data-testid=\"card-plan-basic\">\n            <CardHeader>\n              <div className=\"text-center space-y-4\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\">Basic Plan</CardTitle>\n                <div className=\"space-y-2\">\n                  <span className=\"text-4xl font-bold text-primary\">FREE</span>\n                  <p className=\"text-muted-foreground\">Forever</p>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <ul className=\"space-y-4\">\n                {basicFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-center space-x-3\">\n                    {feature.included ? (\n                      <Check className=\"h-5 w-5 text-green-600 flex-shrink-0\" />\n                    ) : (\n                      <X className=\"h-5 w-5 text-red-500 flex-shrink-0\" />\n                    )}\n                    <span className={feature.warning ? 'text-muted-foreground' : ''}>\n                      {feature.text}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n              \n              <Button \n                variant=\"secondary\" \n                className=\"w-full\"\n                onClick={() => onSelectPlan?.('basic')}\n                data-testid=\"button-select-basic-plan\"\n              >\n                Get Started Free\n              </Button>\n            </CardContent>\n          </Card>\n          \n          {/* Premium Plan */}\n          <Card className=\"bg-gradient-to-br from-primary/5 to-primary/10 shadow-xl border-2 border-primary relative\" data-testid=\"card-plan-premium\">\n            <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n              <Badge className=\"bg-primary text-primary-foreground px-4 py-2\">\n                Most Popular\n              </Badge>\n            </div>\n            \n            <CardHeader>\n              <div className=\"text-center space-y-4\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\">Premium Plan</CardTitle>\n                <div className=\"space-y-2\">\n                  <span className=\"text-4xl font-bold text-primary\">R39</span>\n                  <p className=\"text-muted-foreground\">Per Quarter</p>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              <ul className=\"space-y-4\">\n                {premiumFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-center space-x-3\">\n                    <Check className=\"h-5 w-5 text-green-600 flex-shrink-0\" />\n                    <span className={feature.highlight ? 'font-semibold' : ''}>\n                      {feature.text}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n              \n              <Button \n                className=\"w-full\" \n                onClick={handlePremiumUpgrade}\n                disabled={loading}\n                data-testid=\"button-select-premium-plan\"\n              >\n                {loading ? (\n                  \"Processing...\"\n                ) : (\n                  <>\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 15l-4-4 1.41-1.41L11 14.17l6.59-6.59L19 9l-8 8z\"/>\n                    </svg>\n                    Pay with PayFast\n                  </>\n                )}\n              </Button>\n              \n              {/* PayFast Trust Badge */}\n              <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  <span>Secured by PayFast</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7065},"client/src/components/PayFastButton.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { usePayFast } from '@/hooks/usePayFast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, CreditCard } from 'lucide-react';\n\ninterface PayFastButtonProps {\n  amount: number;\n  itemName: string;\n  itemDescription: string;\n  type: 'membership' | 'booking';\n  className?: string;\n  children?: React.ReactNode;\n  onSuccess?: () => void;\n  onError?: (error: string) => void;\n}\n\nexport default function PayFastButton({\n  amount,\n  itemName,\n  itemDescription,\n  type,\n  className,\n  children,\n  onSuccess,\n  onError,\n}: PayFastButtonProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { processPayment, loading } = usePayFast();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handlePayment = async () => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to make a payment.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const result = await processPayment({\n        amount,\n        itemName,\n        itemDescription,\n        customStr1: type,\n      });\n\n      if (result.success) {\n        toast({\n          title: \"Redirecting to Payment\",\n          description: \"You will be redirected to PayFast to complete your payment.\",\n        });\n        onSuccess?.();\n      } else {\n        const errorMessage = result.error || \"Payment processing failed\";\n        toast({\n          title: \"Payment Failed\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n        onError?.(errorMessage);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"An unexpected error occurred\";\n      toast({\n        title: \"Payment Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      onError?.(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const isLoading = loading || isProcessing;\n\n  return (\n    <Button\n      onClick={handlePayment}\n      disabled={isLoading}\n      className={className}\n      data-testid={`button-payfast-${type}`}\n    >\n      {isLoading ? (\n        <>\n          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n          Processing...\n        </>\n      ) : (\n        <>\n          <CreditCard className=\"h-4 w-4 mr-2\" />\n          {children || `Pay R${amount.toFixed(2)} with PayFast`}\n        </>\n      )}\n    </Button>\n  );\n}\n","size_bytes":2587},"client/src/components/ProvinceMap.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, Clock } from 'lucide-react';\n\nconst provinces = [\n  {\n    name: 'Western Cape',\n    cities: 'Cape Town, Stellenbosch, George',\n    doctorCount: 48,\n    available: true,\n    color: 'from-blue-50 to-blue-100 border-blue-200',\n    textColor: 'text-blue-800',\n    badgeColor: 'bg-blue-600',\n  },\n  {\n    name: 'Gauteng',\n    cities: 'Johannesburg, Pretoria, Sandton',\n    doctorCount: 72,\n    available: true,\n    color: 'from-emerald-50 to-emerald-100 border-emerald-200',\n    textColor: 'text-emerald-800',\n    badgeColor: 'bg-emerald-600',\n  },\n  {\n    name: 'KwaZulu-Natal',\n    cities: 'Durban, Pietermaritzburg',\n    doctorCount: 35,\n    available: true,\n    color: 'from-purple-50 to-purple-100 border-purple-200',\n    textColor: 'text-purple-800',\n    badgeColor: 'bg-purple-600',\n  },\n  {\n    name: 'Eastern Cape',\n    cities: 'Port Elizabeth, East London',\n    doctorCount: 22,\n    available: false,\n    color: 'from-orange-50 to-orange-100 border-orange-200',\n    textColor: 'text-orange-800',\n    badgeColor: 'bg-orange-600',\n  },\n  {\n    name: 'Limpopo',\n    cities: 'Polokwane, Tzaneen',\n    doctorCount: 18,\n    available: true,\n    color: 'from-teal-50 to-teal-100 border-teal-200',\n    textColor: 'text-teal-800',\n    badgeColor: 'bg-teal-600',\n  },\n  {\n    name: 'Mpumalanga',\n    cities: 'Nelspruit, Witbank',\n    doctorCount: 15,\n    available: true,\n    color: 'from-indigo-50 to-indigo-100 border-indigo-200',\n    textColor: 'text-indigo-800',\n    badgeColor: 'bg-indigo-600',\n  },\n  {\n    name: 'North West',\n    cities: 'Potchefstroom, Klerksdorp',\n    doctorCount: 12,\n    available: true,\n    color: 'from-rose-50 to-rose-100 border-rose-200',\n    textColor: 'text-rose-800',\n    badgeColor: 'bg-rose-600',\n  },\n  {\n    name: 'Free State',\n    cities: 'Bloemfontein, Welkom',\n    doctorCount: 14,\n    available: true,\n    color: 'from-amber-50 to-amber-100 border-amber-200',\n    textColor: 'text-amber-800',\n    badgeColor: 'bg-amber-600',\n  },\n  {\n    name: 'Northern Cape',\n    cities: 'Kimberley, Upington',\n    doctorCount: 8,\n    available: false,\n    color: 'from-cyan-50 to-cyan-100 border-cyan-200',\n    textColor: 'text-cyan-800',\n    badgeColor: 'bg-cyan-600',\n  },\n];\n\ninterface ProvinceMapProps {\n  onProvinceSelect?: (province: string) => void;\n}\n\nexport default function ProvinceMap({ onProvinceSelect }: ProvinceMapProps) {\n  return (\n    <section className=\"py-20 bg-card\" data-testid=\"section-province-map\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">\n            Doctors Across All 9 Provinces\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Click on any province to discover verified medical professionals in your area\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {provinces.map((province) => (\n            <Card\n              key={province.name}\n              className={`bg-gradient-to-br ${province.color} cursor-pointer transition-transform hover:scale-105 border`}\n              onClick={() => onProvinceSelect?.(province.name)}\n              data-testid={`card-province-${province.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className={`text-lg font-semibold ${province.textColor}`}>\n                    {province.name}\n                  </h3>\n                  <Badge \n                    className={`${province.badgeColor} text-white`}\n                    data-testid={`badge-doctor-count-${province.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {province.doctorCount}\n                  </Badge>\n                </div>\n                <p className={`${province.textColor} opacity-80 text-sm mb-3`}>\n                  {province.cities}\n                </p>\n                <div className=\"flex items-center text-sm\">\n                  {province.available ? (\n                    <div className=\"flex items-center text-green-600\">\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      <span>Available Today</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center text-yellow-600\">\n                      <Clock className=\"h-4 w-4 mr-2\" />\n                      <span>Next Available Tomorrow</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n          \n          <div className=\"lg:col-span-3 mt-8 text-center\">\n            <button \n              className=\"bg-primary text-primary-foreground px-8 py-3 rounded-lg hover:bg-primary/90 transition-colors font-medium\"\n              onClick={() => onProvinceSelect?.('all')}\n              data-testid=\"button-view-all-provinces\"\n            >\n              View All Provinces\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5329},"client/src/components/SpecialtiesSection.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Link } from 'wouter';\nimport { \n  Heart, \n  Brain, \n  Eye, \n  Bone,\n  Baby,\n  Zap,\n  Stethoscope,\n  Scissors\n} from 'lucide-react';\n\nconst specialties = [\n  {\n    name: 'Cardiology',\n    description: 'Heart and cardiovascular specialists',\n    icon: Heart,\n    doctorCount: 45,\n    color: 'text-red-500',\n    bgColor: 'bg-red-50',\n  },\n  {\n    name: 'Neurology',\n    description: 'Brain and nervous system experts',\n    icon: Brain,\n    doctorCount: 32,\n    color: 'text-purple-500',\n    bgColor: 'bg-purple-50',\n  },\n  {\n    name: 'Ophthalmology',\n    description: 'Eye care and vision specialists',\n    icon: Eye,\n    doctorCount: 28,\n    color: 'text-blue-500',\n    bgColor: 'bg-blue-50',\n  },\n  {\n    name: 'Orthopedics',\n    description: 'Bone and joint specialists',\n    icon: Bone,\n    doctorCount: 41,\n    color: 'text-orange-500',\n    bgColor: 'bg-orange-50',\n  },\n  {\n    name: 'Pediatrics',\n    description: \"Children's health specialists\",\n    icon: Baby,\n    doctorCount: 38,\n    color: 'text-pink-500',\n    bgColor: 'bg-pink-50',\n  },\n  {\n    name: 'Emergency Medicine',\n    description: 'Urgent care specialists',\n    icon: Zap,\n    doctorCount: 52,\n    color: 'text-yellow-500',\n    bgColor: 'bg-yellow-50',\n  },\n  {\n    name: 'General Practice',\n    description: 'Family medicine doctors',\n    icon: Stethoscope,\n    doctorCount: 89,\n    color: 'text-teal-500',\n    bgColor: 'bg-teal-50',\n  },\n  {\n    name: 'Dermatology',\n    description: 'Skin and cosmetic specialists',\n    icon: Scissors,\n    doctorCount: 25,\n    color: 'text-green-500',\n    bgColor: 'bg-green-50',\n  },\n];\n\ninterface SpecialtiesSectionProps {\n  onSpecialtySelect?: (specialty: string) => void;\n}\n\nexport default function SpecialtiesSection({ onSpecialtySelect }: SpecialtiesSectionProps) {\n  return (\n    <section className=\"py-20 bg-white\" data-testid=\"section-specialties\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4 mb-16\">\n          <Badge className=\"bg-teal-100 text-teal-700 hover:bg-teal-100\">\n            Medical Specialties\n          </Badge>\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900\">\n            Find Specialists in <span className=\"text-teal-600\">Every Field</span>\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Browse our comprehensive network of medical specialists across South Africa. From \n            general practitioners to highly specialized consultants.\n          </p>\n        </div>\n        \n        {/* Specialties Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          {specialties.map((specialty, index) => (\n            <Card\n              key={index}\n              className=\"group cursor-pointer border border-gray-200 hover:border-teal-300 hover:shadow-lg transition-all duration-300\"\n              onClick={() => onSpecialtySelect?.(specialty.name)}\n              data-testid={`card-specialty-${specialty.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className={`w-16 h-16 ${specialty.bgColor} rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <specialty.icon className={`w-8 h-8 ${specialty.color}`} />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  {specialty.name}\n                </h3>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  {specialty.description}\n                </p>\n                <div className=\"flex items-center justify-center\">\n                  <span className=\"text-sm font-medium text-teal-600\">\n                    {specialty.doctorCount}+ doctors\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Can't Find Section */}\n        <div className=\"text-center space-y-6\">\n          <div className=\"space-y-2\">\n            <Badge className=\"bg-teal-100 text-teal-700 hover:bg-teal-100\">\n              50+ Medical Specialties\n            </Badge>\n            <h3 className=\"text-2xl font-bold text-gray-900\">\n              Can't Find Your Specialty?\n            </h3>\n            <p className=\"text-gray-600 max-w-2xl mx-auto\">\n              We have comprehensive coverage across all medical fields in South Africa\n            </p>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/doctors\">\n              <button className=\"bg-teal-600 hover:bg-teal-700 text-white px-6 py-3 rounded-lg font-medium transition-colors\">\n                View All Specialties →\n              </button>\n            </Link>\n            <Link href=\"/contact\">\n              <button className=\"border border-teal-600 text-teal-600 hover:bg-teal-50 px-6 py-3 rounded-lg font-medium transition-colors\">\n                Request New Specialty\n              </button>\n            </Link>\n          </div>\n          \n          {/* Bottom Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto mt-12\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-teal-600\">500+</div>\n              <div className=\"text-gray-600 mt-1\">Active Doctors</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-teal-600\">24/7</div>\n              <div className=\"text-gray-600 mt-1\">Booking Available</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-teal-600\">9</div>\n              <div className=\"text-gray-600 mt-1\">Provinces Covered</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6114},"client/src/components/StatsSection.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Stethoscope, Users, Clock, Star } from 'lucide-react';\n\ninterface PlatformStats {\n  totalDoctors: number;\n  totalPatients: number;\n  totalBookings: number;\n  averageRating: number;\n}\n\nexport default function StatsSection() {\n  const { data: stats, isLoading } = useQuery<PlatformStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-primary text-primary-foreground\" data-testid=\"section-stats-loading\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary-foreground/20 rounded-lg mx-auto mb-4 animate-pulse\" />\n                <div className=\"w-20 h-6 bg-primary-foreground/20 rounded mx-auto mb-2 animate-pulse\" />\n                <div className=\"w-24 h-4 bg-primary-foreground/20 rounded mx-auto animate-pulse\" />\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const statsData = [\n    {\n      icon: Stethoscope,\n      value: stats?.totalDoctors || 0,\n      label: 'Verified Doctors',\n      suffix: '+',\n    },\n    {\n      icon: Users,\n      value: stats?.totalPatients || 0,\n      label: 'Happy Patients',\n      suffix: '+',\n    },\n    {\n      icon: Clock,\n      value: stats?.totalBookings || 0,\n      label: 'Appointments Booked',\n      suffix: '+',\n    },\n    {\n      icon: Star,\n      value: stats?.averageRating || 0,\n      label: 'Average Rating',\n      suffix: '/5',\n      decimal: true,\n    },\n  ];\n\n  return (\n    <section className=\"py-16 bg-primary text-primary-foreground\" data-testid=\"section-stats\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center space-y-4 mb-12\">\n          <h2 className=\"text-3xl font-bold\">Trusted by Thousands Across South Africa</h2>\n          <p className=\"text-xl text-primary-foreground/80 max-w-2xl mx-auto\">\n            Join the growing community of patients who have found quality healthcare through IronLedger MedMap\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          {statsData.map((stat, index) => (\n            <div key={index} className=\"text-center\" data-testid={`stat-${index}`}>\n              <div className=\"w-16 h-16 bg-primary-foreground/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <stat.icon className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <div className=\"text-3xl md:text-4xl font-bold mb-2\">\n                {stat.decimal ? stat.value.toFixed(1) : stat.value}{stat.suffix}\n              </div>\n              <p className=\"text-primary-foreground/80 text-sm md:text-base\">{stat.label}</p>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <p className=\"text-primary-foreground/60 text-sm\">\n            Statistics updated in real-time from our platform\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3272},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useActivityLogger.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ActivityData {\n  action: string;\n  page: string;\n  details?: Record<string, any>;\n  resourceId?: string;\n}\n\nexport function useActivityLogger() {\n  const { user } = useAuth();\n\n  const logActivity = async (activityData: ActivityData) => {\n    try {\n      await fetch('/api/crm/activity', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user?.id || null,\n          userType: user?.role || 'guest',\n          action: activityData.action,\n          page: activityData.page,\n          details: activityData.details || {},\n          resourceId: activityData.resourceId || null,\n          timestamp: new Date().toISOString(),\n        }),\n      });\n    } catch (error) {\n      console.error('Failed to log activity:', error);\n    }\n  };\n\n  const logPageView = (pageName: string, details?: Record<string, any>) => {\n    logActivity({\n      action: 'page_view',\n      page: pageName,\n      details,\n    });\n  };\n\n  const logUserAction = (action: string, pageName: string, details?: Record<string, any>, resourceId?: string) => {\n    logActivity({\n      action,\n      page: pageName,\n      details,\n      resourceId,\n    });\n  };\n\n  return { logActivity, logPageView, logUserAction };\n}\n\n// Custom hook to automatically log page views\nexport function usePageTracking(pageName: string, dependencies: any[] = []) {\n  const { logPageView } = useActivityLogger();\n\n  useEffect(() => {\n    logPageView(pageName, {\n      timestamp: new Date().toISOString(),\n      referrer: document.referrer,\n    });\n  }, dependencies);\n}","size_bytes":1698},"client/src/hooks/useAuth.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport type { User } from '@supabase/supabase-js';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signUp: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (_event, session) => {\n        setUser(session?.user ?? null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\n    return { error };\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({ email, password });\n    return { error };\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1939},"client/src/hooks/usePayFast.tsx":{"content":"import { useState } from 'react';\nimport { payFastService, PayFastPayment } from '@/lib/payfast';\nimport { useAuth } from './useAuth';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function usePayFast() {\n  const [loading, setLoading] = useState(false);\n  const { user } = useAuth();\n\n  const processPayment = async (payment: PayFastPayment) => {\n    if (!user?.email) {\n      throw new Error('User must be logged in to make payments');\n    }\n\n    setLoading(true);\n    try {\n      // Save payment record to database first\n      const paymentRecord = await apiRequest('POST', '/api/payments', {\n        amount: payment.amount,\n        type: payment.customStr1 || 'general',\n        status: 'pending'\n      });\n\n      const result = await payFastService.processPayment(payment, user.email);\n      \n      if (result.success && result.url) {\n        // Redirect to PayFast\n        window.location.href = result.url;\n        return { success: true };\n      } else {\n        throw new Error(result.error || 'Payment failed');\n      }\n    } catch (error) {\n      console.error('Payment error:', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Payment failed' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const processMembershipPayment = async () => {\n    return processPayment({\n      amount: 39.00,\n      itemName: 'Premium Membership',\n      itemDescription: 'IronLedger MedMap Premium Membership - Quarterly',\n      customStr1: 'membership',\n    });\n  };\n\n  const processBookingPayment = async (doctorName: string, appointmentDate: string) => {\n    return processPayment({\n      amount: 10.00,\n      itemName: 'Appointment Booking Fee',\n      itemDescription: `Booking with ${doctorName} on ${appointmentDate}`,\n      customStr1: 'booking',\n    });\n  };\n\n  return {\n    processPayment,\n    processMembershipPayment,\n    processBookingPayment,\n    loading,\n  };\n}\n","size_bytes":1948},"client/src/lib/payfast.ts":{"content":"export interface PayFastConfig {\n  merchantId: string;\n  merchantKey: string;\n  passphrase: string;\n  returnUrl: string;\n  cancelUrl: string;\n  notifyUrl: string;\n  sandbox: boolean;\n}\n\nexport interface PayFastPayment {\n  amount: number;\n  itemName: string;\n  itemDescription: string;\n  customStr1?: string;\n  customStr2?: string;\n  customStr3?: string;\n}\n\nexport class PayFastService {\n  private config: PayFastConfig;\n\n  constructor(config: PayFastConfig) {\n    this.config = config;\n  }\n\n  private async generateSignature(params: Record<string, string>): Promise<string> {\n    // Sort parameters and create query string\n    const sortedParams = Object.keys(params)\n      .sort()\n      .map(key => `${key}=${encodeURIComponent(params[key])}`)\n      .join('&');\n    \n    // Add passphrase if provided\n    const stringToSign = this.config.passphrase \n      ? `${sortedParams}&passphrase=${encodeURIComponent(this.config.passphrase)}`\n      : sortedParams;\n\n    // Simple hash using built-in crypto for now - in production you'd use a proper MD5 library\n    const encoder = new TextEncoder();\n    const data = encoder.encode(stringToSign);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('').substring(0, 32);\n  }\n\n  async generatePaymentUrl(payment: PayFastPayment, userEmail: string): Promise<string> {\n    const baseUrl = this.config.sandbox \n      ? 'https://sandbox.payfast.co.za/eng/process'\n      : 'https://www.payfast.co.za/eng/process';\n\n    const paymentId = `ILM_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const params = {\n      merchant_id: this.config.merchantId,\n      merchant_key: this.config.merchantKey,\n      return_url: this.config.returnUrl,\n      cancel_url: this.config.cancelUrl,\n      notify_url: this.config.notifyUrl,\n      name_first: 'IronLedger',\n      name_last: 'Patient',\n      email_address: userEmail,\n      m_payment_id: paymentId,\n      amount: payment.amount.toFixed(2),\n      item_name: payment.itemName,\n      item_description: payment.itemDescription,\n      custom_str1: payment.customStr1 || '',\n      custom_str2: payment.customStr2 || '',\n      custom_str3: payment.customStr3 || '',\n    };\n\n    // Generate signature\n    const signature = await this.generateSignature(params);\n    \n    const urlParams = new URLSearchParams({\n      ...params,\n      signature,\n    });\n\n    return `${baseUrl}?${urlParams.toString()}`;\n  }\n\n  async processPayment(payment: PayFastPayment, userEmail: string): Promise<{ success: boolean; url?: string; error?: string; paymentId?: string }> {\n    try {\n      const paymentUrl = await this.generatePaymentUrl(payment, userEmail);\n      const paymentId = `ILM_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      return { success: true, url: paymentUrl, paymentId };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Payment processing failed' \n      };\n    }\n  }\n}\n\nexport const payFastService = new PayFastService({\n  merchantId: import.meta.env.VITE_PAYFAST_MERCHANT_ID || '10000100',\n  merchantKey: import.meta.env.VITE_PAYFAST_MERCHANT_KEY || '46f0cd694581a',\n  passphrase: import.meta.env.VITE_PAYFAST_PASSPHRASE || '',\n  returnUrl: `${window.location.origin}/payment/success`,\n  cancelUrl: `${window.location.origin}/payment/cancelled`,\n  notifyUrl: `${window.location.origin}/api/payfast/notify`,\n  sandbox: false, // Using live PayFast now that we have real credentials\n});\n","size_bytes":3620},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://wbikdrduhotwnklrbrlt.supabase.co';\nconst supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndiaWtkcmR1aG90d25rbHJicmx0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjQyNTAzNzksImV4cCI6MjAzOTgyNjM3OX0.kSNqLTBJNWsaJQBPB_Eh_Vb-xJYGF-qQofjOb8S8hzc';\n\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n","size_bytes":495},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Heart, Shield, Users, Star, MapPin, Clock, Award, Target } from 'lucide-react';\nimport founderImage from \"@assets/WhatsApp Image 2025-03-12 at 11.57.10_b6d3b63c_1756414367652.jpg\";\nimport BackButton from '@/components/BackButton';\nimport { usePageTracking } from '@/hooks/useActivityLogger';\n\nexport default function About() {\n  usePageTracking('About');\n  const stats = [\n    { icon: Users, label: \"Verified Doctors\", value: \"500+\" },\n    { icon: MapPin, label: \"Provinces Covered\", value: \"9\" },\n    { icon: Clock, label: \"Average Response\", value: \"15 mins\" },\n    { icon: Star, label: \"Patient Satisfaction\", value: \"4.8/5\" },\n  ];\n\n  const features = [\n    {\n      icon: Shield,\n      title: \"Verified Professionals\",\n      description: \"All doctors are HPCSA verified and background checked for your safety and peace of mind.\"\n    },\n    {\n      icon: Heart,\n      title: \"Quality Healthcare\",\n      description: \"Connect with top-rated medical professionals across all specialties and provinces.\"\n    },\n    {\n      icon: Users,\n      title: \"Personalized Care\",\n      description: \"Find doctors who understand your specific needs and cultural background.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\" data-testid=\"page-about\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <BackButton fallbackPath=\"/\" />\n        </div>\n        \n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            About IronLedger MedMap\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            A proudly South African healthcare platform connecting patients with trusted medical professionals \n            across all nine provinces. Your health is our priority, and quality care is our commitment.\n          </p>\n        </div>\n\n        {/* Founder Section */}\n        <div className=\"mb-16\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center text-foreground mb-8\">Our Leadership</h2>\n            <Card className=\"overflow-hidden\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex flex-col md:flex-row items-center gap-8\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"relative\">\n                      <img\n                        src={founderImage}\n                        alt=\"Ofentse Mashau - Founder & CEO\"\n                        className=\"w-48 h-48 rounded-full object-cover border-4 border-primary/20\"\n                        data-testid=\"img-founder\"\n                      />\n                      <div className=\"absolute -bottom-2 -right-2\">\n                        <Badge className=\"bg-primary text-primary-foreground\">\n                          <Award className=\"h-3 w-3 mr-1\" />\n                          Founder & CEO\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex-1 text-center md:text-left\">\n                    <h3 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-founder-name\">\n                      Ofentse Mashau\n                    </h3>\n                    <p className=\"text-lg text-primary font-semibold mb-4\">Founder & Chief Executive Officer</p>\n                    <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                      As the visionary founder and CEO of IronLedger MedMap, Ofentse Mashau is committed to \n                      transforming healthcare accessibility across South Africa. Under his leadership, our \n                      platform has become a trusted bridge connecting patients with verified medical professionals \n                      throughout all nine provinces.\n                    </p>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      Ofentse's passion for healthcare innovation and his deep understanding of South African \n                      healthcare challenges drives our mission to make quality medical care accessible to every \n                      South African, regardless of their location or circumstances.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-16\">\n          {stats.map((stat, index) => (\n            <Card key={index} className=\"text-center\">\n              <CardContent className=\"pt-6\">\n                <stat.icon className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-foreground\">{stat.value}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Mission & Vision Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-16\">\n          <Card className=\"bg-primary/5 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-primary\">\n                <Target className=\"h-6 w-6\" />\n                Our Mission\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                To revolutionize healthcare accessibility in South Africa by creating a seamless digital bridge \n                between patients and verified medical professionals. We believe every South African deserves \n                convenient access to quality healthcare, regardless of their location or background.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-secondary/5 border-secondary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-secondary-foreground\">\n                <Heart className=\"h-6 w-6\" />\n                Our Vision\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                To become South Africa's leading healthcare platform, where every citizen can easily find, \n                connect with, and receive care from trusted medical professionals. We envision a future where \n                geographic and economic barriers no longer limit access to quality healthcare.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* 100% South African Ownership */}\n        <div className=\"mb-16\">\n          <Card className=\"bg-gradient-to-r from-green-50 to-yellow-50 dark:from-green-950/20 dark:to-yellow-950/20 border-2 border-green-200 dark:border-green-800\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"bg-green-600 rounded-full p-3\">\n                  <Shield className=\"h-8 w-8 text-white\" />\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-ownership\">\n                100% South African Owned\n              </h3>\n              <p className=\"text-lg text-muted-foreground\">\n                Proudly built by South Africans, for South Africans. We understand the unique healthcare \n                challenges and cultural nuances of our diverse nation.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-center text-foreground mb-8\">Why Choose Us</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"text-center\">\n                <CardHeader>\n                  <feature.icon className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Values Section */}\n        <div className=\"bg-muted/50 rounded-lg p-8\">\n          <h2 className=\"text-3xl font-bold text-center text-foreground mb-8\">Our Values</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"mb-2\">Trust</Badge>\n              <p className=\"text-sm text-muted-foreground\">\n                Building confidence through verified professionals and transparent processes.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"mb-2\">Accessibility</Badge>\n              <p className=\"text-sm text-muted-foreground\">\n                Making healthcare available to all South Africans, everywhere.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"mb-2\">Quality</Badge>\n              <p className=\"text-sm text-muted-foreground\">\n                Ensuring the highest standards of medical care and service.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"mb-2\">Innovation</Badge>\n              <p className=\"text-sm text-muted-foreground\">\n                Using technology to improve healthcare delivery and experience.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10173},"client/src/pages/Contact.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport BackButton from '@/components/BackButton';\nimport { usePageTracking, useActivityLogger } from '@/hooks/useActivityLogger';\nimport { \n  Mail, \n  Phone, \n  MapPin, \n  Clock, \n  Send,\n  MessageSquare,\n  CheckCircle,\n  Facebook,\n  Twitter,\n  Instagram,\n  Linkedin\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ContactFormData {\n  name: string;\n  email: string;\n  phone: string;\n  subject: string;\n  message: string;\n}\n\nexport default function Contact() {\n  usePageTracking('Contact');\n  const { logUserAction } = useActivityLogger();\n  const [formData, setFormData] = useState<ContactFormData>({\n    name: '',\n    email: '',\n    phone: '',\n    subject: '',\n    message: '',\n  });\n\n  const { toast } = useToast();\n\n  const mutation = useMutation({\n    mutationFn: (data: ContactFormData) => \n      fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      }).then(res => {\n        if (!res.ok) throw new Error('Failed to send message');\n        return res.json();\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Message sent!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        subject: '',\n        message: '',\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    logUserAction('contact_form_submit', 'Contact', { subject: formData.subject });\n    mutation.mutate(formData);\n  };\n\n  const handleChange = (field: keyof ContactFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      title: 'Email Us',\n      value: 'ironledgermedmap@gmail.com',\n      description: 'We respond within 24 hours',\n      href: 'mailto:ironledgermedmap@gmail.com'\n    },\n    {\n      icon: Phone,\n      title: 'Call Us',\n      value: '+27 11 456 7890',\n      description: 'Mon-Fri, 8AM-6PM',\n      href: 'tel:+27114567890'\n    },\n    {\n      icon: MapPin,\n      title: 'Visit Us',\n      value: 'Sandton, Johannesburg, South Africa',\n      description: 'By appointment only',\n      href: '#'\n    },\n  ];\n\n  const socialLinks = [\n    { icon: Facebook, name: 'Facebook', href: 'https://facebook.com/ironledgermedmap' },\n    { icon: Twitter, name: 'Twitter', href: 'https://twitter.com/ironledgermedmap' },\n    { icon: Instagram, name: 'Instagram', href: 'https://instagram.com/ironledgermedmap' },\n    { icon: Linkedin, name: 'LinkedIn', href: 'https://linkedin.com/company/ironledgermedmap' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\" data-testid=\"page-contact\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <BackButton fallbackPath=\"/\" />\n        </div>\n        \n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Get in Touch\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            Have questions about our platform? Need help finding the right doctor? \n            We're here to help you navigate your healthcare journey.\n          </p>\n        </div>\n\n        {/* Contact Information Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {contactInfo.map((info, index) => (\n            <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n              <CardContent className=\"pt-8\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <info.icon className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">{info.title}</h3>\n                {info.href !== '#' ? (\n                  <a \n                    href={info.href} \n                    className=\"text-lg font-medium text-primary hover:underline mb-1 block\"\n                    data-testid={`link-${info.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {info.value}\n                  </a>\n                ) : (\n                  <p className=\"text-lg font-medium text-primary mb-1\">{info.value}</p>\n                )}\n                <p className=\"text-sm text-muted-foreground\">{info.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-8\">Send Us a Message</h2>\n            <Card>\n              <CardContent className=\"p-8\">\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"name\" className=\"text-sm font-medium text-foreground\">\n                        Full Name *\n                      </label>\n                      <Input\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"Enter your full name\"\n                        value={formData.name}\n                        onChange={(e) => handleChange('name', e.target.value)}\n                        required\n                        data-testid=\"input-contact-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">\n                        Email Address *\n                      </label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        value={formData.email}\n                        onChange={(e) => handleChange('email', e.target.value)}\n                        required\n                        data-testid=\"input-contact-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground\">\n                        Phone Number\n                      </label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"+27 XX XXX XXXX\"\n                        value={formData.phone}\n                        onChange={(e) => handleChange('phone', e.target.value)}\n                        data-testid=\"input-contact-phone\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"subject\" className=\"text-sm font-medium text-foreground\">\n                        Subject *\n                      </label>\n                      <Input\n                        id=\"subject\"\n                        type=\"text\"\n                        placeholder=\"What's this about?\"\n                        value={formData.subject}\n                        onChange={(e) => handleChange('subject', e.target.value)}\n                        required\n                        data-testid=\"input-contact-subject\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"message\" className=\"text-sm font-medium text-foreground\">\n                      Message *\n                    </label>\n                    <Textarea\n                      id=\"message\"\n                      placeholder=\"Tell us how we can help you...\"\n                      rows={6}\n                      value={formData.message}\n                      onChange={(e) => handleChange('message', e.target.value)}\n                      required\n                      data-testid=\"textarea-contact-message\"\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    size=\"lg\" \n                    className=\"w-full\" \n                    disabled={mutation.isPending}\n                    data-testid=\"button-submit-contact\"\n                  >\n                    {mutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Send Message\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Information */}\n          <div className=\"space-y-8\">\n            {/* Business Hours */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"h-5 w-5 text-primary\" />\n                  Business Hours\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Monday - Friday</span>\n                  <span className=\"font-medium\">8:00 AM - 6:00 PM</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Saturday</span>\n                  <span className=\"font-medium\">9:00 AM - 2:00 PM</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Sunday</span>\n                  <span className=\"font-medium\">Emergency Only</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Social Media */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Follow Us</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex space-x-4\">\n                  {socialLinks.map((social, index) => (\n                    <a\n                      key={index}\n                      href={social.href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center hover:bg-primary/20 transition-colors\"\n                      data-testid={`link-social-${social.name.toLowerCase()}`}\n                    >\n                      <social.icon className=\"h-5 w-5 text-primary\" />\n                    </a>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Emergency Contact */}\n            <Card className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n              <CardHeader>\n                <CardTitle className=\"text-red-800 dark:text-red-200\">\n                  Emergency Contact\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-red-700 dark:text-red-300 mb-2\">\n                  For medical emergencies, call:\n                </p>\n                <p className=\"text-xl font-bold text-red-600\">\n                  10177 (Emergency Services)\n                </p>\n                <p className=\"text-sm text-red-600 mt-2\">\n                  Available 24/7 for life-threatening emergencies\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"mt-20\">\n          <h2 className=\"text-3xl font-bold text-center text-foreground mb-12\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {[\n              {\n                question: \"How do I book an appointment?\",\n                answer: \"Search for doctors in your area, select your preferred doctor, and choose an available time slot. You'll receive confirmation within minutes.\"\n              },\n              {\n                question: \"Are all doctors verified?\",\n                answer: \"Yes! All doctors are HPCSA verified and undergo thorough background checks to ensure quality care.\"\n              },\n              {\n                question: \"What payment methods are accepted?\",\n                answer: \"We accept all major credit cards, debit cards, and bank transfers through our secure PayFast integration.\"\n              },\n              {\n                question: \"Can I cancel appointments?\",\n                answer: \"Yes, you can cancel or reschedule appointments up to 24 hours before your scheduled time.\"\n              }\n            ].map((faq, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2 flex items-start\">\n                    <MessageSquare className=\"h-5 w-5 text-primary mr-2 mt-0.5 flex-shrink-0\" />\n                    {faq.question}\n                  </h3>\n                  <p className=\"text-muted-foreground leading-relaxed pl-7\">{faq.answer}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14390},"client/src/pages/Emergency.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport BackButton from '@/components/BackButton';\nimport { usePageTracking, useActivityLogger } from '@/hooks/useActivityLogger';\nimport { \n  AlertTriangle, \n  Phone, \n  Clock, \n  MapPin, \n  Star, \n  Heart,\n  Ambulance,\n  Shield\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport DoctorCard from \"@/components/DoctorCard\";\n\nexport default function Emergency() {\n  usePageTracking('Emergency');\n  const { logUserAction } = useActivityLogger();\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every minute\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const { data: emergencyDoctors, isLoading, error } = useQuery({\n    queryKey: [\"/api/doctors/emergency\"],\n    queryFn: () => {\n      // Filter doctors available for emergency appointments\n      return fetch('/api/doctors').then(res => {\n        if (!res.ok) throw new Error('Failed to fetch emergency doctors');\n        return res.json();\n      }).then(doctors => \n        doctors.filter(doctor => doctor.isVerified) // Only verified doctors for emergencies\n      );\n    },\n  });\n\n  const emergencyContacts = [\n    { service: \"Emergency Medical Services\", number: \"10177\", icon: Ambulance },\n    { service: \"Police Emergency\", number: \"10111\", icon: Shield },\n    { service: \"Fire Department\", number: \"10177\", icon: AlertTriangle },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-red-50 dark:bg-red-950/20 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600\"></div>\n            <span className=\"text-red-800 dark:text-red-200\">Loading emergency doctors...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-red-50 dark:bg-red-950/20 py-12\" data-testid=\"page-emergency\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <BackButton fallbackPath=\"/\" className=\"border-red-200 text-red-700 hover:bg-red-100 dark:border-red-700 dark:text-red-300 dark:hover:bg-red-900/50\" />\n        </div>\n        \n        {/* Emergency Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"bg-red-600 rounded-full p-4 animate-pulse\">\n              <Heart className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-red-800 dark:text-red-200 mb-2\">\n            Emergency Medical Care\n          </h1>\n          <p className=\"text-lg text-red-700 dark:text-red-300 mb-4\">\n            Immediate medical assistance when you need it most\n          </p>\n          <div className=\"flex items-center justify-center text-sm text-red-600 dark:text-red-400\">\n            <Clock className=\"h-4 w-4 mr-1\" />\n            Current time: {currentTime.toLocaleTimeString()}\n          </div>\n        </div>\n\n        {/* Critical Emergency Alert */}\n        <Alert className=\"mb-8 border-red-200 bg-red-100 dark:bg-red-900/50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800 dark:text-red-200\">\n            <strong>Life-threatening emergency?</strong> Call emergency services immediately at the numbers below.\n            This service is for urgent but non-life-threatening medical consultations.\n          </AlertDescription>\n        </Alert>\n\n        {/* Emergency Contacts */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          {emergencyContacts.map((contact, index) => (\n            <Card key={index} className=\"border-red-200 bg-red-100 dark:bg-red-900/30\">\n              <CardContent className=\"flex items-center space-x-3 p-4\">\n                <contact.icon className=\"h-6 w-6 text-red-600\" />\n                <div>\n                  <p className=\"font-medium text-red-800 dark:text-red-200\">{contact.service}</p>\n                  <p className=\"text-lg font-bold text-red-600\">{contact.number}</p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Available Emergency Doctors */}\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-bold text-red-800 dark:text-red-200\">\n              Available Emergency Doctors\n            </h2>\n            <Badge variant=\"destructive\" className=\"animate-pulse\">\n              {emergencyDoctors?.length || 0} Available Now\n            </Badge>\n          </div>\n\n          {error ? (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Unable to load emergency doctors. Please try calling our emergency line or refresh the page.\n              </AlertDescription>\n            </Alert>\n          ) : emergencyDoctors && emergencyDoctors.length > 0 ? (\n            <>\n              <div className=\"bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-200 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5 text-yellow-600\" />\n                  <p className=\"text-yellow-800 dark:text-yellow-200 font-medium\">\n                    Emergency consultations are prioritized. Average response time: 5-15 minutes.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {emergencyDoctors.map((doctor) => (\n                  <div key={doctor.id} className=\"relative\">\n                    <DoctorCard doctor={doctor} />\n                    <div className=\"absolute -top-2 -right-2\">\n                      <Badge variant=\"destructive\" className=\"animate-pulse\">\n                        Emergency Available\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"mx-auto max-w-md\">\n                <AlertTriangle className=\"mx-auto h-12 w-12 text-red-400\" />\n                <h3 className=\"mt-2 text-lg font-medium text-red-800 dark:text-red-200\">\n                  No Emergency Doctors Available\n                </h3>\n                <p className=\"mt-1 text-sm text-red-600 dark:text-red-400 mb-4\">\n                  All emergency doctors are currently busy. Please call emergency services if this is life-threatening.\n                </p>\n                <div className=\"space-y-2\">\n                  <Button variant=\"destructive\" size=\"lg\" className=\"w-full\">\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Call Emergency Services: 10177\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    Check Regular Doctors\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Emergency Guidelines */}\n        <Card className=\"mt-8 border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"text-red-800 dark:text-red-200\">\n              When to Use Emergency Services\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-red-700 dark:text-red-300\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Call Emergency Services (10177) for:</h4>\n                <ul className=\"space-y-1 text-sm\">\n                  <li>• Chest pain or heart attack symptoms</li>\n                  <li>• Difficulty breathing</li>\n                  <li>• Severe injuries or bleeding</li>\n                  <li>• Loss of consciousness</li>\n                  <li>• Stroke symptoms</li>\n                </ul>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Use Emergency Doctors for:</h4>\n                <ul className=\"space-y-1 text-sm\">\n                  <li>• Urgent but non-life-threatening conditions</li>\n                  <li>• Sudden severe pain</li>\n                  <li>• High fever with concerning symptoms</li>\n                  <li>• Urgent medication needs</li>\n                  <li>• Immediate medical advice</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9183},"client/src/pages/Index.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport ProvinceMap from '@/components/ProvinceMap';\nimport MembershipPlans from '@/components/MembershipPlans';\nimport DoctorCard from '@/components/DoctorCard';\nimport SpecialtiesSection from '@/components/SpecialtiesSection';\n\nimport { \n  Search, \n  Shield, \n  Lock, \n  Star, \n  CheckCircle,\n  ArrowRight,\n  Stethoscope,\n  Users,\n  Clock\n} from 'lucide-react';\n\n// Mock featured doctors data\nconst featuredDoctors = [\n  {\n    id: '1',\n    firstName: 'Sarah',\n    lastName: 'Mthembu',\n    specialty: 'Cardiologist',\n    province: 'Gauteng',\n    city: 'Johannesburg',\n    rating: 5.0,\n    reviewCount: 127,\n    isVerified: true,\n    availableToday: true,\n    imageUrl: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n  {\n    id: '2',\n    firstName: 'Michael',\n    lastName: 'Van Der Merwe',\n    specialty: 'General Practitioner',\n    province: 'Western Cape',\n    city: 'Cape Town',\n    rating: 4.5,\n    reviewCount: 89,\n    isVerified: true,\n    availableToday: true,\n    imageUrl: 'https://images.unsplash.com/photo-1582750433449-648ed127bb54?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n  {\n    id: '3',\n    firstName: 'Nomsa',\n    lastName: 'Dlamini',\n    specialty: 'Pediatrician',\n    province: 'KwaZulu-Natal',\n    city: 'Durban',\n    rating: 5.0,\n    reviewCount: 156,\n    isVerified: true,\n    availableToday: false,\n    imageUrl: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n];\n\nconst testimonials = [\n  {\n    id: 1,\n    name: 'Thabo Molefi',\n    location: 'Johannesburg',\n    rating: 5,\n    comment: 'Finding a trusted cardiologist in Johannesburg was so easy with IronLedger MedMap. The PayFast payment was seamless, and Dr. Mthembu was amazing!',\n    avatar: 'https://images.unsplash.com/photo-1547425260-76bcadfb4f2c?ixlib=rb-4.0.3&w=100&h=100&fit=crop',\n  },\n  {\n    id: 2,\n    name: 'Sarah Johnson',\n    location: 'Cape Town',\n    rating: 5,\n    comment: 'As a Premium member, I love having 5 free bookings per quarter. The platform made finding a pediatrician in Cape Town effortless.',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b93011da?ixlib=rb-4.0.3&w=100&h=100&fit=crop',\n  },\n  {\n    id: 3,\n    name: 'Mandla Ndlovu',\n    location: 'Durban',\n    rating: 5,\n    comment: 'The emergency doctor feature saved me during a weekend emergency in Durban. Quick, reliable, and all HPCSA verified doctors.',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&w=100&h=100&fit=crop',\n  },\n];\n\nconst provinces = [\n  'Western Cape',\n  'Gauteng',\n  'KwaZulu-Natal',\n  'Eastern Cape',\n  'Limpopo',\n  'Mpumalanga',\n  'North West',\n  'Free State',\n  'Northern Cape',\n];\n\nconst specialties = [\n  'General Practice',\n  'Cardiology',\n  'Pediatrics',\n  'Gynecology',\n  'Emergency Medicine',\n  'Dermatology',\n  'Neurology',\n  'Psychiatry',\n];\n\ninterface PlatformStats {\n  totalDoctors: number;\n  totalPatients: number;\n  totalBookings: number;\n  averageRating: number;\n}\n\nexport default function Index() {\n  const [, setLocation] = useLocation();\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n\n  // Fetch platform statistics\n  const { data: stats } = useQuery<PlatformStats>({\n    queryKey: ['/api/stats'],\n  });\n\n  const handleQuickSearch = () => {\n    const searchParams = new URLSearchParams();\n    if (selectedProvince) searchParams.set('province', selectedProvince);\n    if (selectedSpecialty) searchParams.set('specialty', selectedSpecialty);\n    \n    setLocation(`/search${searchParams.toString() ? `?${searchParams.toString()}` : ''}`);\n  };\n\n  const handleProvinceSelect = (province: string) => {\n    setLocation(`/search?province=${encodeURIComponent(province)}`);\n  };\n\n  const handleSpecialtySelect = (specialty: string) => {\n    setLocation(`/search?specialty=${encodeURIComponent(specialty)}`);\n  };\n\n  const handleBookAppointment = (doctorId: string) => {\n    setLocation(`/book-appointment?doctor=${doctorId}`);\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < rating ? 'fill-yellow-500 text-yellow-500' : 'text-gray-300'\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-teal-400 to-emerald-600 py-20 text-white\" data-testid=\"section-hero\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Top badges */}\n          <div className=\"flex justify-center space-x-4 mb-8\">\n            <div className=\"bg-white/20 backdrop-blur-sm rounded-full px-4 py-2 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                <span>South Africa's Premier Medical Platform</span>\n              </div>\n            </div>\n            <div className=\"bg-white/20 backdrop-blur-sm rounded-full px-4 py-2 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4\" />\n                <span>24/7 Booking Available</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center space-y-8\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight\">\n                Find Your Perfect\n                <br />\n                Medical Specialist\n              </h1>\n              <p className=\"text-xl text-white/90 max-w-2xl mx-auto\">\n                Search by specialty, location, or medical aid. Book appointments instantly with top-rated doctors across South Africa.\n              </p>\n            </div>\n            \n            {/* Enhanced Search Box */}\n            <Card className=\"max-w-4xl mx-auto bg-white/10 backdrop-blur-sm border-white/20\" data-testid=\"card-search\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search for specialists...\"\n                      className=\"w-full pl-10 pr-4 py-3 rounded-lg border-0 bg-white text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-teal-500\"\n                    />\n                  </div>\n                  <div className=\"relative\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Enter your location...\"\n                      className=\"w-full px-4 py-3 rounded-lg border-0 bg-white text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-teal-500\"\n                    />\n                  </div>\n                  <div className=\"relative\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Medical aid provider...\"\n                      className=\"w-full px-4 py-3 rounded-lg border-0 bg-white text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-teal-500\"\n                    />\n                  </div>\n                  <Button \n                    className=\"bg-teal-600 hover:bg-teal-700 text-white py-3 px-6 rounded-lg font-medium\"\n                    onClick={handleQuickSearch}\n                    data-testid=\"button-search-doctors\"\n                  >\n                    Search Doctors\n                  </Button>\n                </div>\n                \n                {/* Quick filters */}\n                <div className=\"flex flex-wrap gap-2 mt-4\">\n                  <span className=\"bg-teal-500/20 text-white px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-teal-500/30\">\n                    Cardiology\n                  </span>\n                  <span className=\"bg-teal-500/20 text-white px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-teal-500/30\">\n                    General Practice\n                  </span>\n                  <span className=\"bg-teal-500/20 text-white px-3 py-1 rounded-full text-sm cursor-pointer hover:bg-teal-500/30\">\n                    Cape Town\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Trust badges */}\n            <div className=\"flex flex-wrap justify-center gap-6 text-sm\">\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-full px-4 py-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  <span>24/7 Booking</span>\n                </div>\n              </div>\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-full px-4 py-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-4 h-4\" />\n                  <span>Instant Confirmation</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Live Stats */}\n            {stats && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-4xl mx-auto mt-12\">\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-center\">\n                  <div className=\"text-3xl font-bold\">{stats.totalDoctors}+</div>\n                  <div className=\"text-white/80 mt-1\">Verified Doctors</div>\n                </div>\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-center\">\n                  <div className=\"text-3xl font-bold\">50+</div>\n                  <div className=\"text-white/80 mt-1\">Specialties</div>\n                </div>\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-center\">\n                  <div className=\"text-3xl font-bold\">9</div>\n                  <div className=\"text-white/80 mt-1\">Provinces</div>\n                </div>\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 text-center\">\n                  <div className=\"text-3xl font-bold\">24/7</div>\n                  <div className=\"text-white/80 mt-1\">Support</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Specialties Section */}\n      <SpecialtiesSection onSpecialtySelect={handleSpecialtySelect} />\n\n      {/* Membership Section */}\n      <section className=\"py-20 bg-gray-50\" data-testid=\"section-membership-preview\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-6 mb-12\">\n            <Badge className=\"bg-teal-100 text-teal-700 hover:bg-teal-100\">\n              Exclusive Membership\n            </Badge>\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900\">\n              Save More with <span className=\"text-teal-600\">MedMap Membership</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Join thousands of South Africans who save on medical appointments with our \n              premium membership program.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-teal-600 mb-2\">R39</div>\n              <div className=\"text-gray-600\">Quarterly membership</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-teal-600 mb-2\">5</div>\n              <div className=\"text-gray-600\">Free bookings included</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-teal-600 mb-2\">24/7</div>\n              <div className=\"text-gray-600\">Priority support</div>\n            </div>\n          </div>\n          \n          <div className=\"text-center mt-8\">\n            <Link href=\"/membership\">\n              <Button className=\"bg-teal-600 hover:bg-teal-700 text-white px-8 py-3 rounded-lg font-medium\">\n                Learn More About Membership\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Doctors Section */}\n      <section className=\"py-20 bg-card\" data-testid=\"section-featured-doctors\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">\n              Featured Medical Professionals\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Meet some of our top-rated, HPCSA-verified doctors across South Africa\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {featuredDoctors.map((doctor) => (\n              <DoctorCard\n                key={doctor.id}\n                doctor={doctor}\n                onBookAppointment={handleBookAppointment}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\" data-testid=\"section-testimonials\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-4 mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground\">\n              What Our Patients Say\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Real stories from South Africans who found trusted medical care through IronLedger MedMap\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial) => (\n              <Card key={testimonial.id} className=\"shadow-lg border border-border\" data-testid={`card-testimonial-${testimonial.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-1 mb-4\">\n                    {renderStars(testimonial.rating)}\n                  </div>\n                  <p className=\"text-muted-foreground mb-6 italic\">\n                    \"{testimonial.comment}\"\n                  </p>\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={testimonial.avatar} alt={testimonial.name} />\n                      <AvatarFallback>\n                        {testimonial.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h4 className=\"font-semibold text-foreground\">{testimonial.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{testimonial.location}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action Section */}\n      <section className=\"py-20 bg-primary text-primary-foreground\" data-testid=\"section-cta\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold\">Ready to Find Your Doctor?</h2>\n              <p className=\"text-xl text-primary-foreground/80 max-w-2xl mx-auto\">\n                Join thousands of South Africans who trust IronLedger MedMap for their healthcare needs. \n                Start with our free plan or get Premium for just R39 per quarter.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/signup\">\n                <Button \n                  variant=\"secondary\" \n                  size=\"lg\"\n                  className=\"bg-white text-primary hover:bg-gray-100\"\n                  data-testid=\"button-start-free-account\"\n                >\n                  Start Free Account\n                </Button>\n              </Link>\n              <Link href=\"/membership\">\n                <Button \n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"border-2 border-primary-foreground text-primary-foreground hover:bg-primary-foreground hover:text-primary\"\n                  data-testid=\"button-get-premium\"\n                >\n                  <ArrowRight className=\"h-4 w-4 mr-2\" />\n                  Get Premium - R39\n                </Button>\n              </Link>\n            </div>\n            \n            {/* Trust indicators */}\n            <div className=\"flex flex-wrap items-center justify-center gap-8 text-sm text-primary-foreground/70 pt-8\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5\" />\n                <span>HPCSA Verified</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Lock className=\"h-5 w-5\" />\n                <span>PayFast Secure</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-5 w-5\" />\n                <span>10,000+ Happy Patients</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18457},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport BackButton from '@/components/BackButton';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\nimport { Stethoscope, User, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\nexport default function Login() {\n  useActivityLogger('login_page');\n  \n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState('doctor');\n  const [formData, setFormData] = useState<LoginForm>({\n    email: '',\n    password: ''\n  });\n\n  const doctorLoginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      try {\n        const response = await fetch('/api/doctors/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || errorData.message || 'Login failed');\n        }\n\n        return await response.json();\n      } catch (error: any) {\n        console.error('Login error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (response) => {\n      console.log('Login success:', response);\n      toast({\n        title: \"Login Successful!\",\n        description: `Welcome back, Dr. ${response.doctor.firstName}!`,\n      });\n      // Store login info in localStorage (in real app, use proper authentication)\n      localStorage.setItem('doctor_session', JSON.stringify(response));\n      setLocation('/doctor-portal');\n    },\n    onError: (error: any) => {\n      console.error('Login mutation error:', error);\n      if (error.message.includes('pending approval')) {\n        toast({\n          title: \"Account Pending Approval\",\n          description: \"Your doctor account is still under review by our admin team. You'll be notified once approved.\",\n          variant: \"default\",\n          duration: 8000,\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: error.message || \"Invalid credentials. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const patientLoginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      // For now, redirect to main site as patient login isn't implemented\n      return Promise.resolve({ success: true });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Patient Login\",\n        description: \"Patient authentication coming soon! Redirecting to main site.\",\n      });\n      setLocation('/');\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both email and password.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (activeTab === 'doctor') {\n      doctorLoginMutation.mutate(formData);\n    } else {\n      patientLoginMutation.mutate(formData);\n    }\n  };\n\n  const handleInputChange = (field: keyof LoginForm, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-md\">\n        <div className=\"mb-6\">\n          <BackButton />\n          <h1 className=\"text-3xl font-bold text-gray-900 mt-4 mb-2 text-center\">Sign In</h1>\n          <p className=\"text-gray-600 text-center\">Access your IronLedger MedMap account</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Login to Your Account</CardTitle>\n            <CardDescription>Choose your account type to continue</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"doctor\" className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"h-4 w-4\" />\n                  Doctor\n                </TabsTrigger>\n                <TabsTrigger value=\"patient\" className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Patient\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"doctor\" className=\"space-y-4 mt-6\">\n                <div className=\"bg-teal-50 border border-teal-200 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-teal-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-teal-800 mb-1\">Doctor Portal Access</h4>\n                      <p className=\"text-sm text-teal-700\">\n                        Sign in to manage your practice, appointments, and patient bookings.\n                      </p>\n                      <div className=\"mt-2\">\n                        <Badge variant=\"secondary\" className=\"mr-2\">Demo Credentials</Badge>\n                        <span className=\"text-xs text-teal-600\">\n                          Use password: <code className=\"bg-teal-100 px-1 rounded\">TempPass123!</code>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"doctor-email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Email Address\n                    </label>\n                    <Input\n                      id=\"doctor-email\"\n                      type=\"email\"\n                      required\n                      placeholder=\"doctor@example.com\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      data-testid=\"input-doctor-email\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"doctor-password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Password\n                    </label>\n                    <Input\n                      id=\"doctor-password\"\n                      type=\"password\"\n                      required\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={(e) => handleInputChange('password', e.target.value)}\n                      data-testid=\"input-doctor-password\"\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={doctorLoginMutation.isPending}\n                    className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                    data-testid=\"button-doctor-login\"\n                  >\n                    {doctorLoginMutation.isPending ? 'Signing In...' : 'Sign In as Doctor'}\n                  </Button>\n                </form>\n\n                <div className=\"text-center mt-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    Don't have a doctor account?{' '}\n                    <a href=\"/doctor-signup\" className=\"text-teal-600 hover:text-teal-700 font-medium\">\n                      Register here\n                    </a>\n                  </p>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"patient\" className=\"space-y-4 mt-6\">\n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <AlertCircle className=\"h-5 w-5 text-orange-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-orange-800 mb-1\">Patient Access</h4>\n                      <p className=\"text-sm text-orange-700\">\n                        Patient authentication is coming soon. For now, you can browse doctors and book appointments directly.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"patient-email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Email Address\n                    </label>\n                    <Input\n                      id=\"patient-email\"\n                      type=\"email\"\n                      required\n                      placeholder=\"patient@example.com\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      data-testid=\"input-patient-email\"\n                      disabled\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"patient-password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Password\n                    </label>\n                    <Input\n                      id=\"patient-password\"\n                      type=\"password\"\n                      required\n                      placeholder=\"Enter your password\"\n                      value={formData.password}\n                      onChange={(e) => handleInputChange('password', e.target.value)}\n                      data-testid=\"input-patient-password\"\n                      disabled\n                    />\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={true}\n                    className=\"w-full bg-gray-400 cursor-not-allowed\"\n                    data-testid=\"button-patient-login\"\n                  >\n                    Patient Login Coming Soon\n                  </Button>\n                </form>\n\n                <div className=\"text-center mt-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    For now, visit the{' '}\n                    <a href=\"/\" className=\"text-teal-600 hover:text-teal-700 font-medium\">\n                      main site\n                    </a>\n                    {' '}to book appointments\n                  </p>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11023},"client/src/pages/Membership.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport MembershipPlans from '@/components/MembershipPlans';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/useAuth';\nimport { usePayFast } from '@/hooks/usePayFast';\nimport { useToast } from '@/hooks/use-toast';\nimport { Check, X, Star, Shield, CreditCard, Users } from 'lucide-react';\n\nexport default function Membership() {\n  const { user } = useAuth();\n  const { generatePaymentURL } = usePayFast();\n  const { toast } = useToast();\n  \n  // Mock user membership data - in real app, this would come from the API\n  const { data: membershipData } = useQuery({\n    queryKey: ['/api/membership', user?.id],\n    enabled: !!user,\n    // Mock data for now\n    queryFn: () => Promise.resolve({\n      type: 'basic',\n      freeBookingsRemaining: 0,\n      membershipExpiresAt: null,\n    }),\n  });\n\n  const benefits = [\n    {\n      category: 'Access & Search',\n      items: [\n        { feature: 'Doctor directory access', basic: true, premium: true },\n        { feature: 'Basic search filters', basic: true, premium: true },\n        { feature: 'Advanced search filters', basic: false, premium: true },\n        { feature: 'Province-wide search', basic: true, premium: true },\n        { feature: 'Specialty filtering', basic: true, premium: true },\n      ]\n    },\n    {\n      category: 'Bookings & Payments',\n      items: [\n        { feature: 'Unlimited doctor browsing', basic: true, premium: true },\n        { feature: 'Appointment booking', basic: true, premium: true },\n        { feature: 'Convenience fee per booking', basic: 'R10', premium: 'R0 (first 5/quarter)' },\n        { feature: 'PayFast secure payments', basic: true, premium: true },\n        { feature: 'Booking history', basic: true, premium: true },\n      ]\n    },\n    {\n      category: 'Support & Features',\n      items: [\n        { feature: 'Email support', basic: true, premium: true },\n        { feature: 'Priority support', basic: false, premium: true },\n        { feature: 'Appointment reminders', basic: false, premium: true },\n        { feature: 'Doctor reviews access', basic: true, premium: true },\n        { feature: 'Emergency doctor finder', basic: true, premium: true },\n      ]\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: 'Dr. Sarah Mitchell',\n      role: 'Family Physician, Cape Town',\n      content: 'IronLedger MedMap has significantly improved my patient reach across the Western Cape.',\n      rating: 5,\n    },\n    {\n      name: 'Thabo Mthembu',\n      role: 'Premium Member, Johannesburg',\n      content: 'The 5 free bookings per quarter have saved me money and the platform is incredibly reliable.',\n      rating: 5,\n    },\n    {\n      name: 'Dr. Nomsa Dlamini',\n      role: 'Pediatrician, Durban',\n      content: 'Professional platform that connects me with patients who really need quality care.',\n      rating: 5,\n    },\n  ];\n\n  const renderFeatureValue = (value: string | boolean) => {\n    if (typeof value === 'boolean') {\n      return value ? (\n        <Check className=\"h-5 w-5 text-green-600\" />\n      ) : (\n        <X className=\"h-5 w-5 text-red-500\" />\n      );\n    }\n    return <span className=\"text-sm text-muted-foreground\">{value}</span>;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/5 to-accent/5\" data-testid=\"section-membership-hero\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-8\">\n            <h1 className=\"text-4xl lg:text-6xl font-bold text-foreground\">\n              Choose Your <span className=\"text-primary\">Membership</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              Get access to South Africa's most comprehensive medical professional network. \n              Start free or save with our Premium quarterly plan.\n            </p>\n            \n            {/* Current Membership Status */}\n            {user && membershipData && (\n              <Card className=\"max-w-md mx-auto bg-card/50 backdrop-blur\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Current Plan</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {membershipData.type === 'premium' ? 'Premium' : 'Basic (Free)'}\n                      </p>\n                    </div>\n                    <Badge variant={membershipData.type === 'premium' ? 'default' : 'secondary'}>\n                      {membershipData.type === 'premium' ? 'Premium' : 'Basic'}\n                    </Badge>\n                  </div>\n                  {membershipData.type === 'premium' && (\n                    <div className=\"mt-4 pt-4 border-t border-border\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Free bookings remaining: <span className=\"font-semibold text-primary\">\n                          {membershipData.freeBookingsRemaining}\n                        </span>\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Membership Plans Section */}\n      <MembershipPlans />\n\n      {/* Detailed Comparison Table */}\n      <section className=\"py-20 bg-card\" data-testid=\"section-comparison-table\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Detailed Feature Comparison</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              See exactly what's included in each plan\n            </p>\n          </div>\n\n          <div className=\"space-y-12\">\n            {benefits.map((category, categoryIndex) => (\n              <div key={categoryIndex}>\n                <h3 className=\"text-xl font-semibold text-foreground mb-6 border-b border-border pb-3\">\n                  {category.category}\n                </h3>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <div className=\"lg:col-span-1\">\n                    <h4 className=\"font-medium text-muted-foreground mb-4\">Features</h4>\n                  </div>\n                  <div className=\"text-center\">\n                    <h4 className=\"font-medium text-muted-foreground mb-4\">Basic Plan</h4>\n                  </div>\n                  <div className=\"text-center\">\n                    <h4 className=\"font-medium text-muted-foreground mb-4\">Premium Plan</h4>\n                  </div>\n                </div>\n                \n                {category.items.map((item, itemIndex) => (\n                  <div \n                    key={itemIndex} \n                    className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 py-4 border-b border-border/50 last:border-b-0\"\n                    data-testid={`comparison-row-${categoryIndex}-${itemIndex}`}\n                  >\n                    <div className=\"lg:col-span-1\">\n                      <p className=\"text-foreground\">{item.feature}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      {renderFeatureValue(item.basic)}\n                    </div>\n                    <div className=\"text-center\">\n                      {renderFeatureValue(item.premium)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Premium Section */}\n      <section className=\"py-20 bg-gradient-to-br from-secondary/30 to-accent/20\" data-testid=\"section-why-premium\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">Why Choose Premium?</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Premium membership pays for itself with just 4 bookings per quarter\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"text-center shadow-lg\">\n              <CardContent className=\"p-8\">\n                <CreditCard className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Save Money</h3>\n                <p className=\"text-muted-foreground text-sm\">\n                  R39 quarterly vs R50+ in booking fees\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center shadow-lg\">\n              <CardContent className=\"p-8\">\n                <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Priority Support</h3>\n                <p className=\"text-muted-foreground text-sm\">\n                  Get help faster when you need it most\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center shadow-lg\">\n              <CardContent className=\"p-8\">\n                <Star className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Advanced Features</h3>\n                <p className=\"text-muted-foreground text-sm\">\n                  Better search and appointment reminders\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center shadow-lg\">\n              <CardContent className=\"p-8\">\n                <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Community</h3>\n                <p className=\"text-muted-foreground text-sm\">\n                  Join thousands of satisfied Premium members\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-card\" data-testid=\"section-membership-testimonials\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">What Our Community Says</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Hear from doctors and patients who trust IronLedger MedMap\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"shadow-lg\" data-testid={`testimonial-card-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-1 mb-4\">\n                    {Array.from({ length: testimonial.rating }, (_, i) => (\n                      <Star key={i} className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mb-4 italic\">\n                    \"{testimonial.content}\"\n                  </p>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">{testimonial.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12100},"client/src/pages/PaymentCancelled.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { XCircle, ArrowLeft, CreditCard } from 'lucide-react';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\n\nexport default function PaymentCancelled() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <section className=\"py-20 bg-gradient-to-br from-red-50 to-pink-50\" data-testid=\"section-payment-cancelled\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-8\">\n            <div className=\"flex justify-center\">\n              <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center\">\n                <XCircle className=\"w-12 h-12 text-red-600\" />\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl font-bold text-foreground\">Payment Cancelled</h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Your payment was cancelled. No charges have been made to your account.\n              </p>\n            </div>\n            \n            <Card className=\"max-w-2xl mx-auto shadow-lg\" data-testid=\"card-payment-cancelled\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-center space-x-2\">\n                  <CreditCard className=\"w-6 h-6 text-muted-foreground\" />\n                  <span>Payment Status</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center space-y-4\">\n                  <p className=\"text-red-600 font-semibold\">Transaction Cancelled</p>\n                  <p className=\"text-muted-foreground\">\n                    You cancelled the payment process or there was an issue processing your payment.\n                  </p>\n                </div>\n                \n                <div className=\"border-t border-border pt-6\">\n                  <h3 className=\"font-semibold text-foreground mb-4\">What can you do now?</h3>\n                  <ul className=\"space-y-2 text-muted-foreground text-left\">\n                    <li>• Try the payment process again</li>\n                    <li>• Check your payment method details</li>\n                    <li>• Contact support if you continue to experience issues</li>\n                    <li>• Use the free Basic plan to explore the platform</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"lg\" data-testid=\"button-back-home\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Home\n                </Button>\n              </Link>\n              <Link href=\"/membership\">\n                <Button size=\"lg\" data-testid=\"button-try-again\">\n                  Try Payment Again\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":3352},"client/src/pages/PaymentSuccess.tsx":{"content":"import { useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, ArrowRight, CreditCard } from 'lucide-react';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\n\nexport default function PaymentSuccess() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Log successful payment\n    console.log('Payment successful!');\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <section className=\"py-20 bg-gradient-to-br from-green-50 to-emerald-50\" data-testid=\"section-payment-success\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center space-y-8\">\n            <div className=\"flex justify-center\">\n              <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-12 h-12 text-green-600\" />\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl font-bold text-foreground\">Payment Successful!</h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Thank you for your payment. Your transaction has been processed successfully.\n              </p>\n            </div>\n            \n            <Card className=\"max-w-2xl mx-auto shadow-lg\" data-testid=\"card-payment-confirmation\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-center space-x-2\">\n                  <CreditCard className=\"w-6 h-6 text-primary\" />\n                  <span>Payment Confirmation</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-left\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Status</p>\n                    <p className=\"font-semibold text-green-600\">Successful</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Payment Method</p>\n                    <p className=\"font-semibold\">PayFast</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Date</p>\n                    <p className=\"font-semibold\">{new Date().toLocaleDateString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Time</p>\n                    <p className=\"font-semibold\">{new Date().toLocaleTimeString()}</p>\n                  </div>\n                </div>\n                \n                <div className=\"border-t border-border pt-6\">\n                  <h3 className=\"font-semibold text-foreground mb-4\">What happens next?</h3>\n                  <ul className=\"space-y-2 text-muted-foreground\">\n                    <li>• Your membership has been activated immediately</li>\n                    <li>• You can now book appointments with reduced fees</li>\n                    <li>• A confirmation email has been sent to your registered address</li>\n                    <li>• Premium features are now available in your account</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"lg\" data-testid=\"button-back-home\">\n                  Back to Home\n                </Button>\n              </Link>\n              <Link href=\"/search\">\n                <Button size=\"lg\" data-testid=\"button-find-doctors\">\n                  <ArrowRight className=\"w-4 h-4 mr-2\" />\n                  Find Doctors Now\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":4174},"client/src/pages/SearchResults.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport DoctorCard from '@/components/DoctorCard';\nimport BackButton from '@/components/BackButton';\nimport { usePageTracking, useActivityLogger } from '@/hooks/useActivityLogger';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Search, MapPin, Filter, Users } from 'lucide-react';\n\nconst provinces = [\n  'Western Cape',\n  'Gauteng',\n  'KwaZulu-Natal',\n  'Eastern Cape',\n  'Limpopo',\n  'Mpumalanga',\n  'North West',\n  'Free State',\n  'Northern Cape',\n];\n\nconst specialties = [\n  'General Practice',\n  'Cardiology',\n  'Pediatrics',\n  'Gynecology',\n  'Emergency Medicine',\n  'Dermatology',\n  'Neurology',\n  'Psychiatry',\n  'Orthopedics',\n  'Ophthalmology',\n];\n\n// Mock doctors data - in real app, this would come from API\nconst mockDoctors = [\n  {\n    id: '1',\n    firstName: 'Sarah',\n    lastName: 'Mthembu',\n    specialty: 'Cardiology',\n    province: 'Gauteng',\n    city: 'Johannesburg',\n    rating: 5.0,\n    reviewCount: 127,\n    isVerified: true,\n    availableToday: true,\n    imageUrl: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n  {\n    id: '2',\n    firstName: 'Michael',\n    lastName: 'Van Der Merwe',\n    specialty: 'General Practice',\n    province: 'Western Cape',\n    city: 'Cape Town',\n    rating: 4.5,\n    reviewCount: 89,\n    isVerified: true,\n    availableToday: true,\n    imageUrl: 'https://images.unsplash.com/photo-1582750433449-648ed127bb54?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n  {\n    id: '3',\n    firstName: 'Nomsa',\n    lastName: 'Dlamini',\n    specialty: 'Pediatrics',\n    province: 'KwaZulu-Natal',\n    city: 'Durban',\n    rating: 5.0,\n    reviewCount: 156,\n    isVerified: true,\n    availableToday: false,\n    imageUrl: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&w=300&h=300&fit=crop',\n  },\n  {\n    id: '4',\n    firstName: 'David',\n    lastName: 'Coetzee',\n    specialty: 'Dermatology',\n    province: 'Western Cape',\n    city: 'Stellenbosch',\n    rating: 4.8,\n    reviewCount: 73,\n    isVerified: true,\n    availableToday: true,\n  },\n  {\n    id: '5',\n    firstName: 'Thandiwe',\n    lastName: 'Mbeki',\n    specialty: 'Gynecology',\n    province: 'Gauteng',\n    city: 'Pretoria',\n    rating: 4.9,\n    reviewCount: 92,\n    isVerified: true,\n    availableToday: true,\n  },\n  {\n    id: '6',\n    firstName: 'Johan',\n    lastName: 'Steyn',\n    specialty: 'Orthopedics',\n    province: 'Free State',\n    city: 'Bloemfontein',\n    rating: 4.7,\n    reviewCount: 64,\n    isVerified: true,\n    availableToday: false,\n  },\n];\n\nexport default function SearchResults() {\n  usePageTracking('Search Results');\n  const { logUserAction } = useActivityLogger();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedSpecialty, setSelectedSpecialty] = useState('');\n  const [filteredDoctors, setFilteredDoctors] = useState(mockDoctors);\n\n  // Get search params from URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const province = urlParams.get('province');\n    const specialty = urlParams.get('specialty');\n    \n    if (province) setSelectedProvince(province);\n    if (specialty) setSelectedSpecialty(specialty);\n  }, []);\n\n  // Filter doctors based on search criteria\n  useEffect(() => {\n    let filtered = mockDoctors;\n\n    if (searchQuery) {\n      filtered = filtered.filter(doctor => \n        `${doctor.firstName} ${doctor.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        doctor.specialty.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        doctor.city.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    if (selectedProvince && selectedProvince !== 'all') {\n      filtered = filtered.filter(doctor => doctor.province === selectedProvince);\n    }\n\n    if (selectedSpecialty && selectedSpecialty !== 'all') {\n      filtered = filtered.filter(doctor => doctor.specialty === selectedSpecialty);\n    }\n\n    setFilteredDoctors(filtered);\n  }, [searchQuery, selectedProvince, selectedSpecialty]);\n\n  const handleBookAppointment = (doctorId: string) => {\n    logUserAction('book_appointment_click', 'Search Results', { doctorId });\n    setLocation(`/book-appointment?doctor=${doctorId}`);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setSelectedProvince('all');\n    setSelectedSpecialty('all');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Search Header */}\n      <section className=\"py-12 bg-gradient-to-br from-primary/5 to-accent/5 border-b border-border\" data-testid=\"section-search-header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Back Button */}\n          <div className=\"mb-6\">\n            <BackButton fallbackPath=\"/\" />\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <h1 className=\"text-3xl lg:text-4xl font-bold text-foreground\">\n                Find Your Doctor\n              </h1>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                Search through our network of verified medical professionals across South Africa\n              </p>\n            </div>\n\n            {/* Search Filters */}\n            <Card className=\"shadow-lg border border-border\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search doctors, specialties, cities...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-doctors\"\n                    />\n                  </div>\n                  \n                  <Select value={selectedProvince} onValueChange={setSelectedProvince}>\n                    <SelectTrigger data-testid=\"select-filter-province\">\n                      <SelectValue placeholder=\"All Provinces\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Provinces</SelectItem>\n                      {provinces.map((province) => (\n                        <SelectItem key={province} value={province}>\n                          {province}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  <Select value={selectedSpecialty} onValueChange={setSelectedSpecialty}>\n                    <SelectTrigger data-testid=\"select-filter-specialty\">\n                      <SelectValue placeholder=\"All Specialties\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Specialties</SelectItem>\n                      {specialties.map((specialty) => (\n                        <SelectItem key={specialty} value={specialty}>\n                          {specialty}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  <Button \n                    variant=\"outline\" \n                    onClick={clearFilters}\n                    className=\"w-full\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Clear Filters\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Active Filters */}\n            {(selectedProvince && selectedProvince !== 'all') || (selectedSpecialty && selectedSpecialty !== 'all') ? (\n              <div className=\"flex flex-wrap gap-2\" data-testid=\"active-filters\">\n                {selectedProvince && selectedProvince !== 'all' && (\n                  <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                    <MapPin className=\"h-3 w-3 mr-1\" />\n                    {selectedProvince}\n                  </Badge>\n                )}\n                {selectedSpecialty && selectedSpecialty !== 'all' && (\n                  <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                    {selectedSpecialty}\n                  </Badge>\n                )}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </section>\n\n      {/* Search Results */}\n      <section className=\"py-12 bg-card\" data-testid=\"section-search-results\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Results Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center space-x-3\">\n              <Users className=\"h-5 w-5 text-primary\" />\n              <span className=\"text-lg font-medium text-foreground\">\n                {filteredDoctors.length} doctors found\n              </span>\n            </div>\n          </div>\n\n          {/* Results Grid */}\n          {filteredDoctors.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredDoctors.map((doctor) => (\n                <DoctorCard\n                  key={doctor.id}\n                  doctor={doctor}\n                  onBookAppointment={handleBookAppointment}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\" data-testid=\"no-results\">\n              <div className=\"space-y-4\">\n                <div className=\"mx-auto w-24 h-24 bg-muted rounded-full flex items-center justify-center\">\n                  <Search className=\"h-12 w-12 text-muted-foreground\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground\">No doctors found</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\">\n                  Try adjusting your search criteria or clear the filters to see all available doctors.\n                </p>\n                <Button onClick={clearFilters} data-testid=\"button-clear-filters-no-results\">\n                  Clear All Filters\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Load More Button (for pagination in real app) */}\n          {filteredDoctors.length > 0 && filteredDoctors.length >= 6 && (\n            <div className=\"text-center mt-12\">\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                data-testid=\"button-load-more\"\n              >\n                Load More Doctors\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11530},"client/src/pages/Signup.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { \n  Mail, \n  Lock, \n  User, \n  Stethoscope, \n  Eye, \n  EyeOff,\n  ArrowRight,\n  Shield,\n  Phone,\n  MapPin,\n  FileText,\n  AlertCircle,\n  CheckCircle\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\n\nconst provinces = [\n  \"Eastern Cape\", \"Free State\", \"Gauteng\", \"KwaZulu-Natal\", \n  \"Limpopo\", \"Mpumalanga\", \"Northern Cape\", \"North West\", \"Western Cape\"\n];\n\nconst specialties = [\n  \"General Practice\", \"Cardiology\", \"Dermatology\", \"Neurology\", \n  \"Orthopedics\", \"Pediatrics\", \"Psychiatry\", \"Radiology\", \"Emergency Medicine\", \n  \"Gynecology\", \"Ophthalmology\", \"Anesthesiology\"\n];\n\ninterface SignupFormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  password: string;\n  confirmPassword: string;\n  province: string;\n  city: string;\n  specialty?: string;\n  hpcsaNumber?: string;\n  practiceAddress?: string;\n  bio?: string;\n  agreeToTerms: boolean;\n}\n\nexport default function Signup() {\n  const [userType, setUserType] = useState<'patient' | 'doctor'>('patient');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState<SignupFormData>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    province: '',\n    city: '',\n    specialty: '',\n    hpcsaNumber: '',\n    practiceAddress: '',\n    bio: '',\n    agreeToTerms: false,\n  });\n  \n  const [, setLocation] = useLocation();\n  const { signUp } = useAuth();\n  const { toast } = useToast();\n\n  const handleChange = (field: keyof SignupFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.agreeToTerms) {\n      toast({\n        title: \"Terms required\",\n        description: \"Please agree to the terms and conditions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await signUp(formData.email, formData.password);\n      \n      // Create user profile in database\n      const profileData = {\n        ...formData,\n        userType,\n        isVerified: userType === 'patient', // Patients auto-verified, doctors need manual verification\n      };\n\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(profileData),\n      });\n\n      if (!response.ok) throw new Error('Failed to create profile');\n\n      toast({\n        title: userType === 'doctor' ? \"Registration submitted!\" : \"Welcome aboard!\",\n        description: userType === 'doctor' \n          ? \"Your doctor account is pending verification. You'll receive an email once approved.\"\n          : \"Your account has been created successfully. Welcome to IronLedger MedMap!\",\n      });\n      \n      setLocation(userType === 'doctor' ? '/verification-pending' : '/');\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: \"Unable to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-secondary/5 py-12 px-4\" data-testid=\"page-signup\">\n      <div className=\"max-w-2xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            Join IronLedger MedMap\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Create your account to access quality healthcare across South Africa\n          </p>\n        </div>\n\n        {/* User Type Selection */}\n        <div className=\"flex gap-2\">\n          <Button\n            type=\"button\"\n            variant={userType === 'patient' ? 'default' : 'outline'}\n            className=\"flex-1\"\n            onClick={() => setUserType('patient')}\n            data-testid=\"button-select-patient\"\n          >\n            <User className=\"h-4 w-4 mr-2\" />\n            I'm a Patient\n          </Button>\n          <Button\n            type=\"button\"\n            variant={userType === 'doctor' ? 'default' : 'outline'}\n            className=\"flex-1\"\n            onClick={() => setUserType('doctor')}\n            data-testid=\"button-select-doctor\"\n          >\n            <Stethoscope className=\"h-4 w-4 mr-2\" />\n            I'm a Doctor\n          </Button>\n        </div>\n\n        {/* Signup Form */}\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              {userType === 'doctor' ? (\n                <Stethoscope className=\"h-5 w-5 text-primary\" />\n              ) : (\n                <User className=\"h-5 w-5 text-primary\" />\n              )}\n              {userType === 'doctor' ? 'Doctor Registration' : 'Patient Registration'}\n            </CardTitle>\n            {userType === 'doctor' && (\n              <div className=\"flex items-center justify-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-orange-600 border-orange-200\">\n                  <AlertCircle className=\"h-3 w-3 mr-1\" />\n                  Verification Required\n                </Badge>\n                <Badge variant=\"secondary\">\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  HPCSA Verified\n                </Badge>\n              </div>\n            )}\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"firstName\" className=\"text-sm font-medium text-foreground\">\n                      First Name *\n                    </label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"Enter your first name\"\n                      value={formData.firstName}\n                      onChange={(e) => handleChange('firstName', e.target.value)}\n                      required\n                      data-testid=\"input-signup-firstname\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"lastName\" className=\"text-sm font-medium text-foreground\">\n                      Last Name *\n                    </label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Enter your last name\"\n                      value={formData.lastName}\n                      onChange={(e) => handleChange('lastName', e.target.value)}\n                      required\n                      data-testid=\"input-signup-lastname\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">\n                    Email Address *\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={formData.email}\n                      onChange={(e) => handleChange('email', e.target.value)}\n                      className=\"pl-10\"\n                      required\n                      data-testid=\"input-signup-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground\">\n                    Phone Number *\n                  </label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"+27 XX XXX XXXX\"\n                      value={formData.phone}\n                      onChange={(e) => handleChange('phone', e.target.value)}\n                      className=\"pl-10\"\n                      required\n                      data-testid=\"input-signup-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"password\" className=\"text-sm font-medium text-foreground\">\n                      Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Create a password\"\n                        value={formData.password}\n                        onChange={(e) => handleChange('password', e.target.value)}\n                        className=\"pl-10 pr-10\"\n                        required\n                        data-testid=\"input-signup-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-foreground\">\n                      Confirm Password *\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? 'text' : 'password'}\n                        placeholder=\"Confirm your password\"\n                        value={formData.confirmPassword}\n                        onChange={(e) => handleChange('confirmPassword', e.target.value)}\n                        className=\"pl-10 pr-10\"\n                        required\n                        data-testid=\"input-signup-confirm-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Location Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5 text-primary\" />\n                  Location Information\n                </h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"province\" className=\"text-sm font-medium text-foreground\">\n                      Province *\n                    </label>\n                    <Select\n                      value={formData.province}\n                      onValueChange={(value) => handleChange('province', value)}\n                    >\n                      <SelectTrigger data-testid=\"select-signup-province\">\n                        <SelectValue placeholder=\"Select your province\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {provinces.map((province) => (\n                          <SelectItem key={province} value={province}>\n                            {province}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"city\" className=\"text-sm font-medium text-foreground\">\n                      City *\n                    </label>\n                    <Input\n                      id=\"city\"\n                      type=\"text\"\n                      placeholder=\"Enter your city\"\n                      value={formData.city}\n                      onChange={(e) => handleChange('city', e.target.value)}\n                      required\n                      data-testid=\"input-signup-city\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Doctor-specific fields */}\n              {userType === 'doctor' && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                    <Stethoscope className=\"h-5 w-5 text-primary\" />\n                    Professional Information\n                  </h3>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"specialty\" className=\"text-sm font-medium text-foreground\">\n                        Medical Specialty *\n                      </label>\n                      <Select\n                        value={formData.specialty}\n                        onValueChange={(value) => handleChange('specialty', value)}\n                      >\n                        <SelectTrigger data-testid=\"select-signup-specialty\">\n                          <SelectValue placeholder=\"Select your specialty\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {specialties.map((specialty) => (\n                            <SelectItem key={specialty} value={specialty}>\n                              {specialty}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <label htmlFor=\"hpcsaNumber\" className=\"text-sm font-medium text-foreground\">\n                        HPCSA Number *\n                      </label>\n                      <Input\n                        id=\"hpcsaNumber\"\n                        type=\"text\"\n                        placeholder=\"Enter your HPCSA number\"\n                        value={formData.hpcsaNumber}\n                        onChange={(e) => handleChange('hpcsaNumber', e.target.value)}\n                        required\n                        data-testid=\"input-signup-hpcsa\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"practiceAddress\" className=\"text-sm font-medium text-foreground\">\n                      Practice Address\n                    </label>\n                    <Textarea\n                      id=\"practiceAddress\"\n                      placeholder=\"Enter your practice address\"\n                      value={formData.practiceAddress}\n                      onChange={(e) => handleChange('practiceAddress', e.target.value)}\n                      rows={3}\n                      data-testid=\"textarea-signup-practice-address\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"bio\" className=\"text-sm font-medium text-foreground\">\n                      Professional Bio\n                    </label>\n                    <Textarea\n                      id=\"bio\"\n                      placeholder=\"Tell patients about your experience and qualifications...\"\n                      value={formData.bio}\n                      onChange={(e) => handleChange('bio', e.target.value)}\n                      rows={4}\n                      data-testid=\"textarea-signup-bio\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Terms and Conditions */}\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"agreeToTerms\"\n                  checked={formData.agreeToTerms}\n                  onCheckedChange={(checked) => handleChange('agreeToTerms', !!checked)}\n                  data-testid=\"checkbox-terms\"\n                />\n                <label htmlFor=\"agreeToTerms\" className=\"text-sm text-muted-foreground leading-tight\">\n                  I agree to the{' '}\n                  <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                    Terms and Conditions\n                  </Link>\n                  {' '}and{' '}\n                  <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                    Privacy Policy\n                  </Link>\n                </label>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                size=\"lg\"\n                disabled={isLoading}\n                data-testid=\"button-signup-submit\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Creating Account...\n                  </>\n                ) : (\n                  <>\n                    Create Account\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Login Link */}\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground\">\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"text-primary hover:underline font-medium\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n\n        {/* Doctor Verification Notice */}\n        {userType === 'doctor' && (\n          <Card className=\"border-orange-200 bg-orange-50 dark:bg-orange-950/20\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertCircle className=\"h-5 w-5 text-orange-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm\">\n                  <p className=\"font-medium text-orange-800 dark:text-orange-200 mb-2\">\n                    Doctor Account Verification Process\n                  </p>\n                  <ul className=\"space-y-1 text-orange-700 dark:text-orange-300\">\n                    <li>• Your HPCSA number will be verified with the Health Professions Council</li>\n                    <li>• Background checks will be conducted for patient safety</li>\n                    <li>• You'll receive an email once verification is complete (3-5 business days)</li>\n                    <li>• Your profile will be visible to patients only after approval</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":20952},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"CRM_ENDPOINTS.md":{"content":"# CRM Integration Endpoints Documentation\n\n## Overview\nThe IronLedger MedMap platform provides comprehensive CRM endpoints for administrative oversight and doctor approval workflows. All endpoints are accessible from the admin CRM at `https://admin-crm-ironledgermedma.replit.app/`.\n\n## Base URL\nAll endpoints are accessible at: `https://2b766c92-3e5e-4b98-9f27-08cd4ac2e584-00-n4xo83p18h5y.riker.replit.dev`\n\n## CRM Endpoints\n\n### 1. Platform Statistics\n```\nGET /api/crm/stats\n```\nReturns live platform statistics including total doctors, patients, bookings, and real-time metrics.\n\n**Response Example:**\n```json\n{\n  \"totalDoctors\": 6,\n  \"totalPatients\": 0,\n  \"totalBookings\": 0,\n  \"averageRating\": 0,\n  \"totalUsers\": 6,\n  \"totalVerifiedDoctors\": 6,\n  \"timestamp\": \"2025-08-28T21:28:35.123Z\"\n}\n```\n\n### 2. Activity Monitoring\n```\nGET /api/crm/activity?limit=50\n```\nRetrieves recent activity logs for monitoring user actions and system events.\n\n**Response Example:**\n```json\n[\n  {\n    \"userId\": \"user123\",\n    \"userType\": \"doctor\",\n    \"action\": \"doctor_registration\",\n    \"page\": \"signup\",\n    \"details\": {...},\n    \"source\": \"main_site\",\n    \"timestamp\": \"2025-08-28T21:28:34.659Z\",\n    \"id\": \"log-id\"\n  }\n]\n```\n\n### 3. System Notifications\n```\nGET /api/crm/notifications\nPOST /api/crm/notifications\n```\nManages cross-system notifications for important events like doctor registrations.\n\n**GET Response Example:**\n```json\n[\n  {\n    \"type\": \"doctor_registration\",\n    \"title\": \"New Doctor Registration\",\n    \"message\": \"Dr. Testing CRMDoctor has registered and requires verification\",\n    \"targetSystem\": \"admin_crm\",\n    \"metadata\": \"{\\\"doctorId\\\":\\\"...\\\",\\\"priority\\\":\\\"high\\\"}\",\n    \"isRead\": false,\n    \"createdAt\": \"2025-08-28T21:28:34.659Z\"\n  }\n]\n```\n\n### 4. Doctor Management\n\n#### Get All Doctors\n```\nGET /api/crm/doctors\n```\nReturns all doctors in the system (verified and unverified).\n\n#### Get Pending Doctors (Key for Approvals)\n```\nGET /api/crm/doctors/pending\n```\n**This is the primary endpoint for admin CRM to see doctors awaiting approval.**\n\n**Response Example:**\n```json\n[\n  {\n    \"userId\": \"ef2c1b0a-f64a-438b-930b-86e765de66c4\",\n    \"firstName\": \"Testing\",\n    \"lastName\": \"CRMDoctor\",\n    \"email\": \"crmtest@test.com\",\n    \"phone\": \"+27123456789\",\n    \"specialty\": \"Emergency Medicine\",\n    \"province\": \"Gauteng\",\n    \"city\": \"Johannesburg\",\n    \"hpcsaNumber\": \"MP999888\",\n    \"practiceAddress\": \"999 Test Medical Centre\",\n    \"bio\": \"Testing CRM integration\",\n    \"isVerified\": false,\n    \"id\": \"74806198-bfc3-4a2e-a12d-908eb007442d\",\n    \"rating\": \"0.00\",\n    \"reviewCount\": 0,\n    \"consultationFee\": \"650.00\"\n  }\n]\n```\n\n#### Approve/Reject Doctor\n```\nPATCH /api/crm/doctors/{doctorId}/verify\n```\n\n**Request Body:**\n```json\n{\n  \"isVerified\": true,\n  \"notes\": \"HPCSA verification completed successfully\"\n}\n```\n\n**Response Example:**\n```json\n{\n  \"success\": true,\n  \"message\": \"Doctor approved successfully\",\n  \"doctorId\": \"74806198-bfc3-4a2e-a12d-908eb007442d\",\n  \"doctor\": {...}\n}\n```\n\n## Integration Notes\n\n### For Admin CRM Development:\n1. **Primary Workflow**: Use `/api/crm/doctors/pending` to fetch doctors awaiting approval\n2. **Approval Action**: Use `/api/crm/doctors/{id}/verify` to approve/reject doctors\n3. **Real-time Updates**: Poll `/api/crm/notifications` for new registrations\n4. **Activity Monitoring**: Use `/api/crm/activity` to track all platform actions\n\n### Data Flow:\n1. Doctor registers via main site → Creates user and doctor profile with `isVerified: false`\n2. System creates high-priority notification in `/api/crm/notifications`\n3. Activity logged in `/api/crm/activity` \n4. Admin CRM fetches pending doctors via `/api/crm/doctors/pending`\n5. Admin approves/rejects via `/api/crm/doctors/{id}/verify`\n6. System logs approval action and notifies doctor\n\n### Security:\n- All endpoints are accessible without authentication for development\n- In production, implement proper authentication and authorization\n- All actions are logged for audit trails\n\n## Testing Commands\n\nTest doctor registration:\n```bash\ncurl -X POST http://localhost:5000/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"userType\":\"doctor\",\"firstName\":\"Test\",\"lastName\":\"Doctor\",\"email\":\"test@example.com\",\"specialty\":\"General Practice\",\"hpcsaNumber\":\"MP123456\"}'\n```\n\nCheck pending approvals:\n```bash\ncurl http://localhost:5000/api/crm/doctors/pending\n```\n\nApprove doctor:\n```bash\ncurl -X PATCH http://localhost:5000/api/crm/doctors/{doctorId}/verify \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"isVerified\":true,\"notes\":\"Approved after verification\"}'\n```","size_bytes":4591},"client/src/pages/Admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BackButton from \"@/components/BackButton\";\nimport { useActivityLogger } from \"@/hooks/useActivityLogger\";\nimport { CheckCircle, XCircle, Clock, User, MapPin, Phone, Mail, Users, CreditCard, Plus, TrendingUp, Activity } from \"lucide-react\";\n// Remove unused import\n\ninterface Doctor {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  specialty: string;\n  province: string;\n  city: string;\n  hpcsaNumber: string;\n  practiceAddress: string;\n  bio: string;\n  isVerified: boolean;\n  rating: string;\n  reviewCount: number;\n  consultationFee: string;\n}\n\ninterface Notification {\n  id: string;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  metadata: string;\n}\n\ninterface Stats {\n  totalDoctors: number;\n  totalPatients: number;\n  totalBookings: number;\n  averageRating: number;\n  totalUsers: number;\n  premiumMembers: number;\n  activeUsers: number;\n}\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: string;\n  createdAt: string;\n}\n\ninterface Payment {\n  id: string;\n  userId: string;\n  amount: string;\n  status: string;\n  type: string;\n  createdAt: string;\n  user?: User;\n}\n\nexport default function Admin() {\n  useActivityLogger('admin');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState<'pending' | 'users' | 'payments' | 'stats' | 'enroll'>('pending');\n\n  // Fetch pending doctors with real-time polling\n  const { data: pendingDoctors = [], isLoading: loadingPending } = useQuery<Doctor[]>({\n    queryKey: ['/api/crm/doctors/pending'],\n    enabled: activeTab === 'pending',\n    refetchInterval: 3000, // Poll every 3 seconds for real-time updates\n  });\n\n  // Fetch notifications with real-time polling\n  const { data: notifications = [], isLoading: loadingNotifications } = useQuery<Notification[]>({\n    queryKey: ['/api/crm/notifications'],\n    enabled: activeTab === 'notifications',\n    refetchInterval: 5000, // Poll every 5 seconds for new notifications\n  });\n\n  // Fetch stats with periodic updates\n  const { data: stats, isLoading: loadingStats } = useQuery<Stats>({\n    queryKey: ['/api/crm/stats'],\n    enabled: activeTab === 'stats',\n    refetchInterval: 10000, // Poll every 10 seconds for updated stats\n  });\n\n  // Fetch all users with real-time polling\n  const { data: users = [], isLoading: loadingUsers } = useQuery<User[]>({\n    queryKey: ['/api/crm/users'],\n    enabled: activeTab === 'users',\n    refetchInterval: 5000, // Poll every 5 seconds for user updates\n  });\n\n  // Fetch payment analytics\n  const { data: payments = [], isLoading: loadingPayments } = useQuery<Payment[]>({\n    queryKey: ['/api/crm/payments'],\n    enabled: activeTab === 'payments',\n    refetchInterval: 15000, // Poll every 15 seconds for payment updates\n  });\n\n  // Doctor approval mutation\n  const approveDoctor = useMutation({\n    mutationFn: async ({ doctorId, isVerified, notes }: { doctorId: string; isVerified: boolean; notes?: string }) => {\n      const response = await fetch(`/api/crm/doctors/${doctorId}/verify`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isVerified, notes }),\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/doctors/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/users'] });\n      toast({\n        title: variables.isVerified ? \"Doctor Approved\" : \"Doctor Rejected\",\n        description: `Dr. ${data.doctor?.firstName || 'Unknown'} ${data.doctor?.lastName || 'Doctor'} has been ${variables.isVerified ? 'approved and enlisted' : 'rejected'}.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update doctor status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // User removal mutation\n  const removeUser = useMutation({\n    mutationFn: async ({ userId, reason }: { userId: string; reason: string }) => {\n      const response = await fetch(`/api/crm/users/${userId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reason }),\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/doctors/pending'] });\n      toast({\n        title: \"Account Removed\",\n        description: `User account has been successfully removed.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove user account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRemoveUser = (userId: string, userEmail: string) => {\n    if (!confirm(`Are you sure you want to remove the account for ${userEmail}? This action cannot be undone.`)) {\n      return;\n    }\n\n    const reason = prompt('Please provide a reason for account removal:') || 'Policy violation';\n    removeUser.mutate({ userId, reason });\n  };\n\n  const handleDoctorAction = (doctorId: string, isVerified: boolean) => {\n    const notes = isVerified \n      ? \"HPCSA verification completed successfully. Account approved for platform use.\"\n      : \"Additional verification required. Please contact support for more information.\";\n    \n    approveDoctor.mutate({ doctorId, isVerified, notes });\n  };\n\n  const renderPendingDoctors = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          Pending Doctor Approvals\n        </h2>\n        <Badge variant=\"secondary\">\n          {pendingDoctors.length} pending\n        </Badge>\n      </div>\n\n      {loadingPending ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Loading pending doctors...</p>\n        </div>\n      ) : pendingDoctors.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-800 dark:text-gray-200 mb-2\">\n              All caught up!\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              No doctors pending approval at this time.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {pendingDoctors.map((doctor) => (\n            <Card key={doctor.id} className=\"border-l-4 border-l-yellow-500\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300\">\n                        {doctor.firstName[0]}{doctor.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <CardTitle className=\"text-lg\">\n                        Dr. {doctor.firstName} {doctor.lastName}\n                      </CardTitle>\n                      <CardDescription className=\"flex items-center space-x-2\">\n                        <Badge variant=\"outline\">{doctor.specialty}</Badge>\n                        <Badge variant=\"secondary\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          Pending Verification\n                        </Badge>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <User className=\"h-4 w-4 text-gray-500\" />\n                      <span>HPCSA: {doctor.hpcsaNumber}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <Mail className=\"h-4 w-4 text-gray-500\" />\n                      <span>{doctor.email}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <Phone className=\"h-4 w-4 text-gray-500\" />\n                      <span>{doctor.phone}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <MapPin className=\"h-4 w-4 text-gray-500\" />\n                      <span>{doctor.city}, {doctor.province}</span>\n                    </div>\n                    <div className=\"text-sm\">\n                      <strong>Practice:</strong> {doctor.practiceAddress}\n                    </div>\n                    <div className=\"text-sm\">\n                      <strong>Fee:</strong> R{doctor.consultationFee}\n                    </div>\n                  </div>\n                </div>\n                \n                {doctor.bio && (\n                  <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-md\">\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      <strong>Bio:</strong> {doctor.bio}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={() => handleDoctorAction(doctor.id, true)}\n                    disabled={approveDoctor.isPending}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    data-testid={`button-approve-${doctor.id}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Approve Doctor\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => handleDoctorAction(doctor.id, false)}\n                    disabled={approveDoctor.isPending}\n                    data-testid={`button-reject-${doctor.id}`}\n                  >\n                    <XCircle className=\"h-4 w-4 mr-2\" />\n                    Reject Application\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderNotifications = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n        System Notifications\n      </h2>\n\n      {loadingNotifications ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Loading notifications...</p>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {notifications.map((notification) => {\n            let metadata;\n            try {\n              metadata = JSON.parse(notification.metadata);\n            } catch {\n              metadata = {};\n            }\n            \n            return (\n              <Card key={notification.id} className={`${!notification.isRead ? 'border-blue-200 bg-blue-50 dark:bg-blue-900/20' : ''}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      {notification.title}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      {metadata.priority === 'high' && (\n                        <Badge variant=\"destructive\" className=\"text-xs\">High Priority</Badge>\n                      )}\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {notification.type}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                    {notification.message}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {new Date(notification.createdAt).toLocaleString()}\n                  </p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderStats = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n        Platform Statistics\n      </h2>\n\n      {loadingStats ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Loading statistics...</p>\n        </div>\n      ) : stats ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total Doctors</CardDescription>\n              <CardTitle className=\"text-3xl text-blue-600\">{stats.totalDoctors}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total Patients</CardDescription>\n              <CardTitle className=\"text-3xl text-green-600\">{stats.totalPatients}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total Bookings</CardDescription>\n              <CardTitle className=\"text-3xl text-purple-600\">{stats.totalBookings}</CardTitle>\n            </CardHeader>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Average Rating</CardDescription>\n              <CardTitle className=\"text-3xl text-orange-600\">\n                {stats.averageRating.toFixed(1)}★\n              </CardTitle>\n            </CardHeader>\n          </Card>\n        </div>\n      ) : (\n        <div>No stats available</div>\n      )}\n    </div>\n  );\n\n  const renderUsers = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          All Users\n        </h2>\n        <Badge variant=\"secondary\">\n          {users.length} total users\n        </Badge>\n      </div>\n\n      {loadingUsers ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Loading users...</p>\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {users.map((user) => (\n            <Card key={user.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback className=\"bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300\">\n                        {user.firstName?.[0] || 'U'}{user.lastName?.[0] || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                        {user.firstName || 'Unknown'} {user.lastName || 'User'}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {user.email || 'No email'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={user.role === 'doctor' ? 'default' : 'secondary'}>\n                      {user.role}\n                    </Badge>\n                    {user.role === 'doctor' && (\n                      <Badge variant={user.isVerified ? 'default' : 'destructive'}>\n                        {user.isVerified ? 'Verified' : 'Pending'}\n                      </Badge>\n                    )}\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveUser(user.id, user.email)}\n                      className=\"ml-2\"\n                    >\n                      Remove Account\n                    </Button>\n                    <p className=\"text-sm text-gray-500\">\n                      Joined {new Date(user.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const renderPayments = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n          Payment Analytics\n        </h2>\n        <Badge variant=\"secondary\">\n          {payments.length} total payments\n        </Badge>\n      </div>\n\n      {loadingPayments ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Loading payments...</p>\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {payments.map((payment) => (\n            <Card key={payment.id}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                      R{payment.amount} - {payment.type}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {payment.user ? `${payment.user.firstName} ${payment.user.lastName}` : 'Unknown User'}\n                    </p>\n                    {payment.payFastPaymentId && (\n                      <p className=\"text-xs text-gray-500\">\n                        PayFast ID: {payment.payFastPaymentId}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={payment.status === 'COMPLETE' ? 'default' : 'destructive'}>\n                      {payment.status}\n                    </Badge>\n                    <p className=\"text-sm text-gray-500\">\n                      {new Date(payment.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n\n  const doctorEnrollSchema = z.object({\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    email: z.string().email(\"Valid email is required\"),\n    phone: z.string().min(1, \"Phone number is required\"),\n    specialty: z.string().min(1, \"Specialty is required\"),\n    province: z.string().min(1, \"Province is required\"),\n    city: z.string().min(1, \"City is required\"),\n    hpcsaNumber: z.string().min(1, \"HPCSA number is required\"),\n    practiceAddress: z.string().min(1, \"Practice address is required\"),\n    bio: z.string().min(1, \"Bio is required\"),\n  });\n\n  const doctorEnrollForm = useForm<z.infer<typeof doctorEnrollSchema>>({\n    resolver: zodResolver(doctorEnrollSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      specialty: \"\",\n      province: \"\",\n      city: \"\",\n      hpcsaNumber: \"\",\n      practiceAddress: \"\",\n      bio: \"\",\n    },\n  });\n\n  const enrollDoctorMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof doctorEnrollSchema>) => {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userType: 'doctor',\n          ...data,\n        }),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/doctors/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/crm/stats'] });\n      toast({\n        title: \"Doctor Enrolled\",\n        description: \"Doctor has been successfully enrolled and is pending approval.\",\n      });\n      doctorEnrollForm.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to enroll doctor. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const renderEnrollDoctor = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n        Manually Enroll Doctor\n      </h2>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Doctor Registration Form</CardTitle>\n          <CardDescription>\n            Manually add a new doctor to the platform. They will still require approval.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...doctorEnrollForm}>\n            <form onSubmit={doctorEnrollForm.handleSubmit((data) => enrollDoctorMutation.mutate(data))} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"specialty\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Specialty</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select specialty\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"General Practice\">General Practice</SelectItem>\n                          <SelectItem value=\"Cardiology\">Cardiology</SelectItem>\n                          <SelectItem value=\"Dermatology\">Dermatology</SelectItem>\n                          <SelectItem value=\"Pediatrics\">Pediatrics</SelectItem>\n                          <SelectItem value=\"Orthopedics\">Orthopedics</SelectItem>\n                          <SelectItem value=\"Neurology\">Neurology</SelectItem>\n                          <SelectItem value=\"Psychiatry\">Psychiatry</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"province\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Province</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select province\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Gauteng\">Gauteng</SelectItem>\n                          <SelectItem value=\"Western Cape\">Western Cape</SelectItem>\n                          <SelectItem value=\"KwaZulu-Natal\">KwaZulu-Natal</SelectItem>\n                          <SelectItem value=\"Eastern Cape\">Eastern Cape</SelectItem>\n                          <SelectItem value=\"Mpumalanga\">Mpumalanga</SelectItem>\n                          <SelectItem value=\"Limpopo\">Limpopo</SelectItem>\n                          <SelectItem value=\"North West\">North West</SelectItem>\n                          <SelectItem value=\"Free State\">Free State</SelectItem>\n                          <SelectItem value=\"Northern Cape\">Northern Cape</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={doctorEnrollForm.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>City</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={doctorEnrollForm.control}\n                name=\"hpcsaNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>HPCSA Number</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={doctorEnrollForm.control}\n                name=\"practiceAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Practice Address</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={doctorEnrollForm.control}\n                name=\"bio\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bio</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                disabled={enrollDoctorMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-enroll-doctor\"\n              >\n                {enrollDoctorMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Enrolling Doctor...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Enroll Doctor\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <BackButton />\n          \n          <div className=\"mb-8 mt-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2\">\n              Admin Dashboard\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Manage doctor approvals and monitor platform activity\n            </p>\n          </div>\n\n          {/* Tab Navigation */}\n          <div className=\"flex space-x-1 mb-8\">\n            <Button\n              variant={activeTab === 'pending' ? 'default' : 'ghost'}\n              onClick={() => setActiveTab('pending')}\n              data-testid=\"tab-pending\"\n              className=\"flex items-center gap-2\"\n            >\n              <Clock className=\"h-4 w-4\" />\n              Pending Doctors\n            </Button>\n            <Button\n              variant={activeTab === 'users' ? 'default' : 'ghost'}\n              onClick={() => setActiveTab('users')}\n              data-testid=\"tab-users\"\n              className=\"flex items-center gap-2\"\n            >\n              <Users className=\"h-4 w-4\" />\n              All Users\n            </Button>\n            <Button\n              variant={activeTab === 'payments' ? 'default' : 'ghost'}\n              onClick={() => setActiveTab('payments')}\n              data-testid=\"tab-payments\"\n              className=\"flex items-center gap-2\"\n            >\n              <CreditCard className=\"h-4 w-4\" />\n              Payments\n            </Button>\n            <Button\n              variant={activeTab === 'stats' ? 'default' : 'ghost'}\n              onClick={() => setActiveTab('stats')}\n              data-testid=\"tab-stats\"\n              className=\"flex items-center gap-2\"\n            >\n              <TrendingUp className=\"h-4 w-4\" />\n              Analytics\n            </Button>\n            <Button\n              variant={activeTab === 'enroll' ? 'default' : 'ghost'}\n              onClick={() => setActiveTab('enroll')}\n              data-testid=\"tab-enroll\"\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add Doctor\n            </Button>\n          </div>\n\n          {/* Tab Content */}\n          {activeTab === 'pending' && renderPendingDoctors()}\n          {activeTab === 'users' && renderUsers()}\n          {activeTab === 'payments' && renderPayments()}\n          {activeTab === 'stats' && renderStats()}\n          {activeTab === 'enroll' && renderEnrollDoctor()}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":33317},"client/src/pages/Privacy.tsx":{"content":"import BackButton from \"@/components/BackButton\";\nimport { useActivityLogger } from \"@/hooks/useActivityLogger\";\n\nexport default function Privacy() {\n  useActivityLogger('privacy');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <BackButton />\n          \n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 mt-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-400 mb-6\">\n              Privacy Policy\n            </h1>\n            \n            <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                Last updated: {new Date().toLocaleDateString()}\n              </p>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  1. Introduction\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  IronLedger MedMap (\"we,\" \"our,\" or \"us\") is committed to protecting your privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our healthcare platform. We comply with the Protection of Personal Information Act (POPIA) and other applicable South African privacy laws.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  2. Information We Collect\n                </h2>\n                \n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Personal Information\n                </h3>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Name, email address, and phone number</li>\n                  <li>Date of birth and gender</li>\n                  <li>Physical address and location data</li>\n                  <li>Medical aid information and membership numbers</li>\n                  <li>Emergency contact information</li>\n                </ul>\n\n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Healthcare Information\n                </h3>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Medical history and current conditions</li>\n                  <li>Medication information and allergies</li>\n                  <li>Appointment details and consultation notes</li>\n                  <li>Treatment preferences and medical needs</li>\n                </ul>\n\n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Technical Information\n                </h3>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>IP address and device information</li>\n                  <li>Browser type and operating system</li>\n                  <li>Usage patterns and platform interactions</li>\n                  <li>Cookies and similar tracking technologies</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  3. How We Use Your Information\n                </h2>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li><strong>Healthcare Services:</strong> Facilitate appointments and consultations</li>\n                  <li><strong>Platform Improvement:</strong> Enhance user experience and functionality</li>\n                  <li><strong>Communication:</strong> Send appointment reminders and important updates</li>\n                  <li><strong>Payment Processing:</strong> Handle membership fees and consultation payments</li>\n                  <li><strong>Compliance:</strong> Meet regulatory and legal requirements</li>\n                  <li><strong>Emergency Situations:</strong> Contact emergency services when necessary</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  4. Information Sharing and Disclosure\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We may share your information with:\n                </p>\n                \n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Healthcare Providers\n                </h3>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We share relevant medical information with healthcare professionals you choose to consult for treatment purposes.\n                </p>\n\n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Service Providers\n                </h3>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Payment processors (PayFast) for secure transactions</li>\n                  <li>Cloud service providers for data storage</li>\n                  <li>Communication services for appointment reminders</li>\n                  <li>Analytics providers for platform improvement</li>\n                </ul>\n\n                <h3 className=\"text-lg font-medium text-gray-800 dark:text-gray-200 mb-3\">\n                  Legal Requirements\n                </h3>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We may disclose information when required by law, court order, or to protect rights, property, or safety.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  5. Data Security\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We implement comprehensive security measures to protect your information:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>End-to-end encryption for sensitive data transmission</li>\n                  <li>Secure cloud storage with regular backups</li>\n                  <li>Multi-factor authentication for healthcare providers</li>\n                  <li>Regular security audits and updates</li>\n                  <li>Access controls and employee training</li>\n                  <li>HIPAA-compliant data handling procedures</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  6. Your Rights Under POPIA\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Under the Protection of Personal Information Act, you have the right to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li><strong>Access:</strong> Request a copy of your personal information</li>\n                  <li><strong>Correction:</strong> Update inaccurate or incomplete information</li>\n                  <li><strong>Deletion:</strong> Request removal of your personal data</li>\n                  <li><strong>Objection:</strong> Object to certain processing activities</li>\n                  <li><strong>Portability:</strong> Receive your data in a portable format</li>\n                  <li><strong>Restriction:</strong> Limit how we process your information</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  7. Data Retention\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We retain your information for as long as necessary to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Provide healthcare services and maintain medical records</li>\n                  <li>Comply with legal and regulatory requirements</li>\n                  <li>Resolve disputes and enforce agreements</li>\n                  <li>Improve our services and platform functionality</li>\n                </ul>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Medical records are typically retained for 7 years as per South African healthcare regulations.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  8. Cookies and Tracking\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We use cookies and similar technologies to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Remember your preferences and login status</li>\n                  <li>Analyze platform usage and performance</li>\n                  <li>Provide personalized content and features</li>\n                  <li>Ensure platform security and prevent fraud</li>\n                </ul>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  You can control cookies through your browser settings, but this may affect platform functionality.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  9. Children's Privacy\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Our platform is designed for users 18 years and older. For minors, we require parental or guardian consent and involvement in all healthcare decisions and data processing activities.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  10. International Data Transfers\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Your data is primarily stored and processed in South Africa. If we transfer data internationally, we ensure adequate protection through appropriate safeguards and compliance with POPIA requirements.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  11. Contact Us\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  For privacy-related questions or to exercise your rights, contact our Data Protection Officer:\n                </p>\n                <p className=\"text-gray-700 dark:text-gray-300\">\n                  Email: privacy@ironledgermedmap.co.za<br />\n                  Phone: +27 11 123 4567<br />\n                  Address: 123 Medical Plaza, Johannesburg, South Africa<br />\n                  <br />\n                  For complaints about our handling of personal information, you may also contact the Information Regulator of South Africa.\n                </p>\n              </section>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12073},"client/src/pages/Terms.tsx":{"content":"import BackButton from \"@/components/BackButton\";\nimport { useActivityLogger } from \"@/hooks/useActivityLogger\";\n\nexport default function Terms() {\n  useActivityLogger('terms');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <BackButton />\n          \n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 mt-6\">\n            <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-400 mb-6\">\n              Terms and Conditions\n            </h1>\n            \n            <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                Last updated: {new Date().toLocaleDateString()}\n              </p>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  1. Acceptance of Terms\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  By accessing and using IronLedger MedMap (\"the Platform\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  2. Medical Disclaimer\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  IronLedger MedMap is a platform that connects patients with medical professionals in South Africa. We do not provide medical advice, diagnosis, or treatment. All medical consultations and treatments are provided by independent healthcare professionals registered with the Health Professions Council of South Africa (HPCSA).\n                </p>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  <strong>Important:</strong> In case of medical emergencies, contact emergency services immediately (10177) or visit your nearest emergency room.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  3. User Accounts and Registration\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  To use certain features of the Platform, you must register for an account. You agree to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Provide accurate, current, and complete information</li>\n                  <li>Maintain the security of your password and account</li>\n                  <li>Notify us immediately of any unauthorized access</li>\n                  <li>Accept responsibility for all activities under your account</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  4. Healthcare Professional Verification\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  All healthcare professionals on our platform must be registered with the HPCSA and undergo verification. We verify:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Valid HPCSA registration and practice numbers</li>\n                  <li>Current professional qualifications</li>\n                  <li>Good standing with regulatory bodies</li>\n                  <li>Professional indemnity insurance</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  5. Payment Terms\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Our platform offers two membership tiers:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li><strong>Basic (Free):</strong> R10 booking fee per appointment</li>\n                  <li><strong>Premium (R39/quarter):</strong> Unlimited free bookings</li>\n                </ul>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  Payments are processed securely through PayFast. Consultation fees are paid directly to healthcare providers.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  6. Privacy and Data Protection\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  We are committed to protecting your privacy and comply with the Protection of Personal Information Act (POPIA). Please review our Privacy Policy for detailed information about how we collect, use, and protect your personal information.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  7. Prohibited Uses\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  You may not use our Platform to:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Violate any laws or regulations</li>\n                  <li>Impersonate others or provide false information</li>\n                  <li>Harass, abuse, or harm other users</li>\n                  <li>Share inappropriate or offensive content</li>\n                  <li>Attempt to gain unauthorized access to our systems</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  8. Limitation of Liability\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  IronLedger MedMap acts as a platform connecting patients with healthcare providers. We are not liable for:\n                </p>\n                <ul className=\"list-disc pl-6 text-gray-700 dark:text-gray-300 mb-4\">\n                  <li>Medical advice, diagnosis, or treatment provided by healthcare professionals</li>\n                  <li>Outcomes of medical consultations or procedures</li>\n                  <li>Disputes between patients and healthcare providers</li>\n                  <li>Technical issues or service interruptions</li>\n                </ul>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  9. Governing Law\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  These terms are governed by the laws of South Africa. Any disputes will be resolved in South African courts.\n                </p>\n              </section>\n\n              <section className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-200 mb-4\">\n                  10. Contact Information\n                </h2>\n                <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                  For questions about these terms, please contact us at:\n                </p>\n                <p className=\"text-gray-700 dark:text-gray-300\">\n                  Email: legal@ironledgermedmap.co.za<br />\n                  Phone: +27 11 123 4567<br />\n                  Address: 123 Medical Plaza, Johannesburg, South Africa\n                </p>\n              </section>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8361},"client/src/pages/VerificationPending.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { CheckCircle, Clock, Mail, Shield, ArrowLeft } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { usePageTracking } from '@/hooks/useActivityLogger';\n\nexport default function VerificationPending() {\n  usePageTracking('Verification Pending');\n\n  const verificationSteps = [\n    {\n      step: 1,\n      title: \"Application Submitted\",\n      description: \"Your doctor registration has been received\",\n      status: \"completed\",\n      icon: CheckCircle,\n    },\n    {\n      step: 2,\n      title: \"Document Review\",\n      description: \"Our team is reviewing your HPCSA credentials\",\n      status: \"in_progress\",\n      icon: Shield,\n    },\n    {\n      step: 3,\n      title: \"Profile Verification\",\n      description: \"Final verification and profile activation\",\n      status: \"pending\",\n      icon: Clock,\n    },\n    {\n      step: 4,\n      title: \"Account Activated\",\n      description: \"You'll receive an email confirmation when approved\",\n      status: \"pending\",\n      icon: Mail,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\" data-testid=\"page-verification-pending\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back to Home */}\n        <div className=\"mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" className=\"flex items-center gap-2\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n            <Clock className=\"h-8 w-8 text-amber-600\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Verification in Progress\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Thank you for registering as a healthcare professional. Your account is currently under review for verification.\n          </p>\n        </div>\n\n        {/* Status Alert */}\n        <Alert className=\"mb-8 border-amber-200 bg-amber-50 dark:bg-amber-900/20\">\n          <Clock className=\"h-4 w-4 text-amber-600\" />\n          <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n            <strong>Verification typically takes 1-3 business days.</strong> You'll receive an email notification once your account is approved and ready for use.\n          </AlertDescription>\n        </Alert>\n\n        {/* Verification Steps */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Verification Process\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {verificationSteps.map((step) => {\n                const StatusIcon = step.icon;\n                return (\n                  <div key={step.step} className=\"flex items-start gap-4 p-4 rounded-lg border\">\n                    <div className={`rounded-full p-2 ${\n                      step.status === 'completed' \n                        ? 'bg-green-100 dark:bg-green-900/20' \n                        : step.status === 'in_progress'\n                        ? 'bg-amber-100 dark:bg-amber-900/20'\n                        : 'bg-gray-100 dark:bg-gray-800'\n                    }`}>\n                      <StatusIcon className={`h-5 w-5 ${\n                        step.status === 'completed' \n                          ? 'text-green-600' \n                          : step.status === 'in_progress'\n                          ? 'text-amber-600'\n                          : 'text-gray-400'\n                      }`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"font-medium\">Step {step.step}: {step.title}</span>\n                        <Badge variant={\n                          step.status === 'completed' \n                            ? 'default' \n                            : step.status === 'in_progress'\n                            ? 'secondary'\n                            : 'outline'\n                        }>\n                          {step.status === 'completed' ? 'Complete' : \n                           step.status === 'in_progress' ? 'In Progress' : 'Pending'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* What's Next */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>What happens next?</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <Mail className=\"h-5 w-5 text-blue-500 mt-1\" />\n              <div>\n                <h3 className=\"font-medium\">Email Notification</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  You'll receive an email at your registered address once verification is complete.\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Shield className=\"h-5 w-5 text-green-500 mt-1\" />\n              <div>\n                <h3 className=\"font-medium\">Account Activation</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Upon approval, you can log in and start accepting patient appointments.\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <CheckCircle className=\"h-5 w-5 text-purple-500 mt-1\" />\n              <div>\n                <h3 className=\"font-medium\">Profile Setup</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete your profile with consultation fees, availability, and additional details.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Support */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Need Help?</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              If you have questions about the verification process or need to update your information, \n              please don't hesitate to contact our support team.\n            </p>\n            <div className=\"flex gap-4\">\n              <Link href=\"/contact\">\n                <Button variant=\"outline\" data-testid=\"button-contact-support\">\n                  Contact Support\n                </Button>\n              </Link>\n              <Button variant=\"outline\" asChild>\n                <a href=\"mailto:support@ironledgermedmap.co.za\" data-testid=\"button-email-support\">\n                  Email Us\n                </a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7560},"client/src/pages/DoctorPortal.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Calendar, Users, Clock, CheckCircle, XCircle, BarChart3, Star, Phone, MapPin, Settings } from 'lucide-react';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface DoctorProfile {\n  id: string;\n  firstName: string;\n  lastName: string;\n  specialty: string;\n  province: string;\n  city: string;\n  phone: string;\n  rating: string;\n  reviewCount: number;\n  consultationFee: string;\n  totalPatients: number;\n  totalAppointments: number;\n  pendingAppointments: number;\n}\n\ninterface Appointment {\n  id: string;\n  patientName: string;\n  patientEmail: string;\n  appointmentDate: string;\n  status: 'pending' | 'confirmed' | 'cancelled';\n  reason: string;\n  consultationType: 'in-person' | 'virtual';\n}\n\ninterface Analytics {\n  monthlyRevenue: number;\n  totalPatients: number;\n  appointmentsThisMonth: number;\n  averageRating: number;\n  popularTimeSlots: Array<{ time: string; count: number }>;\n  revenueByMonth: Array<{ month: string; revenue: number }>;\n}\n\nexport default function DoctorPortal() {\n  useActivityLogger('doctor_portal');\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [schedule, setSchedule] = useState({\n    monday: { start: \"09:00\", end: \"17:00\", available: true },\n    tuesday: { start: \"09:00\", end: \"17:00\", available: true },\n    wednesday: { start: \"09:00\", end: \"17:00\", available: true },\n    thursday: { start: \"09:00\", end: \"17:00\", available: true },\n    friday: { start: \"09:00\", end: \"17:00\", available: true },\n    saturday: { start: \"09:00\", end: \"13:00\", available: false },\n    sunday: { start: \"09:00\", end: \"13:00\", available: false }\n  });\n\n  // Fetch doctor profile\n  const { data: profile, isLoading: loadingProfile } = useQuery<DoctorProfile>({\n    queryKey: ['/api/doctor/profile'],\n    refetchInterval: 30000, // Update every 30 seconds\n  });\n\n  // Fetch pending appointments\n  const { data: appointments = [], isLoading: loadingAppointments, refetch: refetchAppointments } = useQuery<Appointment[]>({\n    queryKey: ['/api/doctor/appointments'],\n    enabled: activeTab === 'appointments',\n    refetchInterval: 10000, // Update every 10 seconds for real-time appointment management\n  });\n\n  // Fetch analytics\n  const { data: analytics, isLoading: loadingAnalytics } = useQuery<Analytics>({\n    queryKey: ['/api/doctor/analytics'],\n    enabled: activeTab === 'analytics',\n    refetchInterval: 60000, // Update every minute\n  });\n\n  const handleAppointmentAction = async (appointmentId: string, action: 'confirm' | 'cancel') => {\n    try {\n      const response = await fetch(`/api/doctor/appointments/${appointmentId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status: action === 'confirm' ? 'confirmed' : 'cancelled' }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: `Appointment ${action === 'confirm' ? 'Confirmed' : 'Cancelled'}`,\n          description: `The appointment has been ${action === 'confirm' ? 'confirmed' : 'cancelled'} successfully.`,\n        });\n        await refetchAppointments();\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${action} appointment. Please try again.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Schedule management functions\n  const handleScheduleChange = (day: string, field: string, value: any) => {\n    setSchedule(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        [field]: value\n      }\n    }));\n  };\n\n  const saveSchedule = async () => {\n    try {\n      const response = await fetch('/api/doctor/schedule', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ schedule }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Schedule Updated\",\n          description: \"Your availability schedule has been saved successfully.\",\n        });\n        setShowScheduleModal(false);\n      } else {\n        throw new Error('Failed to save schedule');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save schedule. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const days = [\n    { key: 'monday', label: 'Monday' },\n    { key: 'tuesday', label: 'Tuesday' },\n    { key: 'wednesday', label: 'Wednesday' },\n    { key: 'thursday', label: 'Thursday' },\n    { key: 'friday', label: 'Friday' },\n    { key: 'saturday', label: 'Saturday' },\n    { key: 'sunday', label: 'Sunday' }\n  ];\n\n  if (loadingProfile) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Dr. {profile?.firstName} {profile?.lastName}\n              </h1>\n              <div className=\"flex items-center gap-4 mt-2\">\n                <Badge variant=\"secondary\">{profile?.specialty}</Badge>\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"text-sm\">{profile?.rating} ({profile?.reviewCount} reviews)</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-gray-500\">Consultation Fee</div>\n              <div className=\"text-lg font-semibold\">R{profile?.consultationFee}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"appointments\" data-testid=\"tab-appointments\">Appointments</TabsTrigger>\n            <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule\">Schedule</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"dashboard\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Patients</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{profile?.totalPatients || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">Lifetime patients</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Appointments</CardTitle>\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{profile?.totalAppointments || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">All time appointments</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Pending Requests</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{profile?.pendingAppointments || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">Awaiting your response</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Rating</CardTitle>\n                  <Star className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{profile?.rating || 'N/A'}</div>\n                  <p className=\"text-xs text-muted-foreground\">{profile?.reviewCount || 0} reviews</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Practice Information</CardTitle>\n                <CardDescription>Your profile and contact details</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4 text-gray-500\" />\n                    <span>{profile?.city}, {profile?.province}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-gray-500\" />\n                    <span>{profile?.phone}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"appointments\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Appointment Requests</CardTitle>\n                <CardDescription>Manage incoming appointment requests from patients</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {loadingAppointments ? (\n                  <div className=\"flex justify-center py-8\">\n                    <div className=\"animate-spin w-6 h-6 border-4 border-blue-600 border-t-transparent rounded-full\" />\n                  </div>\n                ) : appointments.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {appointments.map((appointment) => (\n                      <div key={appointment.id} className=\"border rounded-lg p-4\" data-testid={`appointment-${appointment.id}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <h4 className=\"font-medium\">{appointment.patientName}</h4>\n                            <p className=\"text-sm text-gray-600\">{appointment.patientEmail}</p>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              {new Date(appointment.appointmentDate).toLocaleDateString()} at {new Date(appointment.appointmentDate).toLocaleTimeString()}\n                            </p>\n                            <p className=\"text-sm mt-2\">{appointment.reason}</p>\n                            <Badge variant={appointment.consultationType === 'virtual' ? 'secondary' : 'outline'} className=\"mt-2\">\n                              {appointment.consultationType === 'virtual' ? 'Virtual' : 'In-Person'}\n                            </Badge>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            {appointment.status === 'pending' && (\n                              <>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleAppointmentAction(appointment.id, 'confirm')}\n                                  data-testid={`button-confirm-${appointment.id}`}\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                  Confirm\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleAppointmentAction(appointment.id, 'cancel')}\n                                  data-testid={`button-cancel-${appointment.id}`}\n                                >\n                                  <XCircle className=\"h-4 w-4 mr-1\" />\n                                  Decline\n                                </Button>\n                              </>\n                            )}\n                            {appointment.status !== 'pending' && (\n                              <Badge variant={appointment.status === 'confirmed' ? 'default' : 'destructive'}>\n                                {appointment.status}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No appointment requests</h3>\n                    <p className=\"text-gray-600\">You'll see patient appointment requests here when they book with you.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"schedule\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Schedule Management</CardTitle>\n                <CardDescription>Set your availability and manage your calendar</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Clock className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Schedule Management</h3>\n                  <p className=\"text-gray-600 mb-4\">Set your available hours and manage your appointment calendar.</p>\n                  <Button onClick={() => setShowScheduleModal(true)} data-testid=\"button-configure-schedule\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Configure Schedule\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Performance</CardTitle>\n                  <CardDescription>Your practice statistics for this month</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {loadingAnalytics ? (\n                    <div className=\"flex justify-center py-8\">\n                      <div className=\"animate-spin w-6 h-6 border-4 border-blue-600 border-t-transparent rounded-full\" />\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>Monthly Revenue</span>\n                        <span className=\"font-semibold\">R{analytics?.monthlyRevenue || 0}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Appointments This Month</span>\n                        <span className=\"font-semibold\">{analytics?.appointmentsThisMonth || 0}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Average Rating</span>\n                        <span className=\"font-semibold\">{analytics?.averageRating || 'N/A'}</span>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Practice Insights</CardTitle>\n                  <CardDescription>Trends and performance metrics</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Analytics Dashboard</h3>\n                    <p className=\"text-gray-600\">Detailed practice analytics and performance metrics coming soon.</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Schedule Configuration Modal */}\n      <Dialog open={showScheduleModal} onOpenChange={setShowScheduleModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Configure Your Schedule</DialogTitle>\n            <DialogDescription>\n              Set your available hours for each day of the week. Patients will only be able to book appointments during these hours.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            {days.map(({ key, label }) => (\n              <div key={key} className=\"flex items-center space-x-4 p-4 border rounded-lg\">\n                <div className=\"w-20\">\n                  <Label className=\"font-medium\">{label}</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    checked={schedule[key].available}\n                    onCheckedChange={(checked) => \n                      handleScheduleChange(key, 'available', checked)\n                    }\n                    data-testid={`checkbox-${key}-available`}\n                  />\n                  <Label className=\"text-sm\">Available</Label>\n                </div>\n                {schedule[key].available && (\n                  <>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-sm\">From:</Label>\n                      <Input\n                        type=\"time\"\n                        value={schedule[key].start}\n                        onChange={(e) => \n                          handleScheduleChange(key, 'start', e.target.value)\n                        }\n                        className=\"w-24\"\n                        data-testid={`input-${key}-start`}\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"text-sm\">To:</Label>\n                      <Input\n                        type=\"time\"\n                        value={schedule[key].end}\n                        onChange={(e) => \n                          handleScheduleChange(key, 'end', e.target.value)\n                        }\n                        className=\"w-24\"\n                        data-testid={`input-${key}-end`}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            ))}\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowScheduleModal(false)}\n              data-testid=\"button-cancel-schedule\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={saveSchedule}\n              data-testid=\"button-save-schedule\"\n            >\n              Save Schedule\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20695},"client/src/pages/DoctorSearch.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, Phone, Star, DollarSign, Calendar } from 'lucide-react';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\n\ninterface Doctor {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  specialty: string;\n  province: string;\n  city: string;\n  zipCode?: string;\n  practiceAddress: string;\n  phone: string;\n  rating: string;\n  reviewCount: number;\n  consultationFee: string;\n  isVerified: boolean;\n}\n\nconst provinces = [\n  'Eastern Cape',\n  'Free State', \n  'Gauteng',\n  'KwaZulu-Natal',\n  'Limpopo',\n  'Mpumalanga',\n  'North West',\n  'Northern Cape',\n  'Western Cape'\n];\n\nconst specialties = [\n  'General Practice',\n  'Cardiology',\n  'Dermatology',\n  'Endocrinology',\n  'Gastroenterology',\n  'Neurology',\n  'Oncology',\n  'Orthopedics',\n  'Pediatrics',\n  'Psychiatry',\n  'Radiology',\n  'Surgery'\n];\n\nexport default function DoctorSearch() {\n  useActivityLogger('doctor_search');\n  \n  const [searchFilters, setSearchFilters] = useState({\n    name: '',\n    specialty: '',\n    province: '',\n    city: '',\n    zipCode: ''\n  });\n\n  const { data: doctors = [], isLoading } = useQuery<Doctor[]>({\n    queryKey: ['/api/doctors', searchFilters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchFilters.name) params.set('name', searchFilters.name);\n      if (searchFilters.specialty) params.set('specialty', searchFilters.specialty);\n      if (searchFilters.province) params.set('province', searchFilters.province);\n      if (searchFilters.city) params.set('city', searchFilters.city);\n      if (searchFilters.zipCode) params.set('zipCode', searchFilters.zipCode);\n      \n      const response = await fetch(`/api/doctors?${params.toString()}`);\n      return response.json();\n    }\n  });\n\n  const handleBookAppointment = (doctorId: string) => {\n    // Navigate to booking page with doctor ID\n    window.location.href = `/book/${doctorId}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Find a Doctor</h1>\n          <p className=\"text-gray-600\">Search and book appointments with verified medical professionals across South Africa</p>\n        </div>\n\n        {/* Search Filters */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Search Filters</CardTitle>\n            <CardDescription>Find doctors by name, specialty, province, city, or zip code</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-4\">\n              <Input\n                placeholder=\"Doctor name...\"\n                value={searchFilters.name}\n                onChange={(e) => setSearchFilters(prev => ({ ...prev, name: e.target.value }))}\n                data-testid=\"input-doctor-name\"\n              />\n              \n              <Select value={searchFilters.specialty} onValueChange={(value) => setSearchFilters(prev => ({ ...prev, specialty: value }))}>\n                <SelectTrigger data-testid=\"select-specialty\">\n                  <SelectValue placeholder=\"Select specialty\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Specialties</SelectItem>\n                  {specialties.map(specialty => (\n                    <SelectItem key={specialty} value={specialty}>{specialty}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={searchFilters.province} onValueChange={(value) => setSearchFilters(prev => ({ ...prev, province: value }))}>\n                <SelectTrigger data-testid=\"select-province\">\n                  <SelectValue placeholder=\"Select province\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Provinces</SelectItem>\n                  {provinces.map(province => (\n                    <SelectItem key={province} value={province}>{province}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Input\n                placeholder=\"City...\"\n                value={searchFilters.city}\n                onChange={(e) => setSearchFilters(prev => ({ ...prev, city: e.target.value }))}\n                data-testid=\"input-city\"\n              />\n\n              <Input\n                placeholder=\"Zip/Postal code...\"\n                value={searchFilters.zipCode}\n                onChange={(e) => setSearchFilters(prev => ({ ...prev, zipCode: e.target.value }))}\n                data-testid=\"input-zip-code\"\n                className=\"border-blue-200 focus:border-blue-500\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Search Results */}\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full\" />\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {doctors.length > 0 ? (\n              doctors.map((doctor) => (\n                <Card key={doctor.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-doctor-${doctor.id}`}>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          Dr. {doctor.firstName} {doctor.lastName}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center gap-1\">\n                          <Badge variant=\"secondary\">{doctor.specialty}</Badge>\n                          {doctor.isVerified && (\n                            <Badge variant=\"default\">Verified</Badge>\n                          )}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        <span className=\"text-sm font-medium\">{doctor.rating}</span>\n                        <span className=\"text-sm text-gray-500\">({doctor.reviewCount})</span>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span>{doctor.city}, {doctor.province} {doctor.zipCode && `(${doctor.zipCode})`}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                        <Phone className=\"h-4 w-4\" />\n                        <span>{doctor.phone}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        <span>R{doctor.consultationFee} consultation fee</span>\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                        {doctor.practiceAddress}\n                      </p>\n                      \n                      <Button \n                        className=\"w-full\" \n                        onClick={() => handleBookAppointment(doctor.id)}\n                        data-testid={`button-book-${doctor.id}`}\n                      >\n                        <Calendar className=\"h-4 w-4 mr-2\" />\n                        Book Appointment\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <div className=\"text-gray-500\">\n                  <MapPin className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No doctors found</h3>\n                  <p>Try adjusting your search filters to find available doctors in your area.</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8967},"client/src/pages/BookAppointment.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { usePayFast } from '@/hooks/usePayFast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Calendar, Clock, MapPin, Star, Phone, DollarSign } from 'lucide-react';\nimport BackButton from '@/components/BackButton';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\n\ninterface Doctor {\n  id: string;\n  firstName: string;\n  lastName: string;\n  specialty: string;\n  province: string;\n  city: string;\n  zipCode?: string;\n  practiceAddress: string;\n  phone: string;\n  rating: string;\n  reviewCount: number;\n  consultationFee: string;\n  isVerified: boolean;\n}\n\ninterface BookingForm {\n  patientName: string;\n  patientEmail: string;\n  patientPhone: string;\n  appointmentDate: string;\n  appointmentTime: string;\n  reason: string;\n  consultationType: 'in-person' | 'virtual';\n  membershipType?: string;\n}\n\nexport default function BookAppointment() {\n  useActivityLogger('book_appointment');\n  \n  const params = useParams<{ doctorId: string }>();\n  const doctorId = params.doctorId;\n  \n  console.log('BookAppointment - doctorId from params:', doctorId);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { generatePaymentURL } = usePayFast();\n\n  const [bookingForm, setBookingForm] = useState<BookingForm>({\n    patientName: '',\n    patientEmail: user?.email || '',\n    patientPhone: '',\n    appointmentDate: '',\n    appointmentTime: '',\n    reason: '',\n    consultationType: 'in-person'\n  });\n\n  // Fetch doctor details\n  const { data: doctor, isLoading: doctorLoading, error: doctorError } = useQuery<Doctor>({\n    queryKey: [`/api/doctor/${doctorId}`],\n    enabled: !!doctorId,\n    retry: 1,\n    staleTime: 0,\n  });\n  \n  console.log('BookAppointment - doctor data:', doctor);\n\n  // Fetch user membership info\n  const { data: membership } = useQuery({\n    queryKey: ['/api/user/membership'],\n    enabled: !!user,\n  });\n\n  // Fetch available time slots when date is selected\n  const { data: availableSlots, isLoading: slotsLoading } = useQuery({\n    queryKey: [`/api/doctors/${doctorId}/available-slots`, bookingForm.appointmentDate],\n    enabled: !!doctorId && !!bookingForm.appointmentDate,\n    retry: 1,\n    staleTime: 0,\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await apiRequest('POST', '/api/bookings', bookingData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Booking Request Submitted\",\n        description: \"Your appointment request has been sent to the doctor for approval.\",\n      });\n      \n      // Redirect to booking confirmation page\n      window.location.href = `/booking-confirmation/${data.bookingId}`;\n    },\n    onError: () => {\n      toast({\n        title: \"Booking Failed\",\n        description: \"There was an error processing your booking request. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleBookingSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to book an appointment.\",\n        variant: \"destructive\",\n      });\n      window.location.href = '/login';\n      return;\n    }\n\n    if (!doctor) return;\n\n    // Check if payment is needed (R10 booking fee for basic users)\n    const isBasicUser = !membership || membership.type === 'basic';\n    const bookingFee = isBasicUser ? 10.00 : 0;\n\n    const bookingData = {\n      ...bookingForm,\n      doctorId,\n      patientId: user.id,\n      appointmentDateTime: `${bookingForm.appointmentDate} ${bookingForm.appointmentTime}`,\n      bookingFee,\n    };\n\n    if (bookingFee > 0) {\n      // Generate PayFast payment for booking fee\n      try {\n        const paymentURL = generatePaymentURL({\n          amount: bookingFee,\n          itemName: `Appointment Booking Fee - Dr. ${doctor.firstName} ${doctor.lastName}`,\n          itemDescription: `Booking fee for ${bookingForm.appointmentDate} ${bookingForm.appointmentTime}`,\n          returnUrl: `${window.location.origin}/payment/success`,\n          cancelUrl: `${window.location.origin}/payment/cancelled`,\n          customStr1: JSON.stringify(bookingData), // Pass booking data for processing after payment\n        });\n        \n        window.location.href = paymentURL;\n      } catch (error) {\n        toast({\n          title: \"Payment Error\",\n          description: \"Failed to generate payment URL. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      // Free booking for premium users\n      bookingMutation.mutate(bookingData);\n    }\n  };\n\n  // Get available time slots from API response\n  const availableTimeSlots = availableSlots?.availableSlots || [];\n\n  if (doctorLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-teal-600 border-t-transparent rounded-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!doctor) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"container mx-auto px-4\">\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Doctor Not Found</h2>\n              <p className=\"text-gray-600\">The requested doctor could not be found.</p>\n              <BackButton className=\"mt-4\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-6\">\n          <BackButton />\n          <h1 className=\"text-3xl font-bold text-gray-900 mt-4 mb-2\">Book Appointment</h1>\n          <p className=\"text-gray-600\">Schedule your appointment with Dr. {doctor.firstName} {doctor.lastName}</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Doctor Information */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-8\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-xl\">\n                      Dr. {doctor.firstName} {doctor.lastName}\n                    </CardTitle>\n                    <CardDescription className=\"flex items-center gap-2 mt-2\">\n                      <Badge variant=\"secondary\">{doctor.specialty}</Badge>\n                      {doctor.isVerified && (\n                        <Badge variant=\"default\">Verified</Badge>\n                      )}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                    <span className=\"text-sm font-medium\">{doctor.rating}</span>\n                    <span className=\"text-sm text-gray-500\">({doctor.reviewCount})</span>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{doctor.city}, {doctor.province} {doctor.zipCode && `(${doctor.zipCode})`}</span>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Phone className=\"h-4 w-4\" />\n                  <span>{doctor.phone}</span>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  <span>Consultation: R{doctor.consultationFee}</span>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Practice Address</h4>\n                  <p className=\"text-sm text-gray-600\">{doctor.practiceAddress}</p>\n                </div>\n\n                {/* Booking Fee Notice */}\n                <div className=\"border-t pt-4\">\n                  <div className=\"bg-teal-50 border border-teal-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-teal-800 mb-1\">Booking Fee</h4>\n                    {membership?.type === 'premium' ? (\n                      <p className=\"text-sm text-teal-700\">\n                        ✅ Premium Member - No booking fees!\n                      </p>\n                    ) : (\n                      <p className=\"text-sm text-teal-700\">\n                        R10 booking fee applies for Basic members\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Appointment Details</CardTitle>\n                <CardDescription>Please provide your information and preferred appointment time</CardDescription>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={handleBookingSubmit} className=\"space-y-6\">\n                  {/* Patient Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Full Name *\n                      </label>\n                      <Input\n                        required\n                        placeholder=\"Your full name\"\n                        value={bookingForm.patientName}\n                        onChange={(e) => setBookingForm(prev => ({ ...prev, patientName: e.target.value }))}\n                        data-testid=\"input-patient-name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Email Address *\n                      </label>\n                      <Input\n                        required\n                        type=\"email\"\n                        placeholder=\"your.email@example.com\"\n                        value={bookingForm.patientEmail}\n                        onChange={(e) => setBookingForm(prev => ({ ...prev, patientEmail: e.target.value }))}\n                        data-testid=\"input-patient-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Phone Number *\n                    </label>\n                    <Input\n                      required\n                      type=\"tel\"\n                      placeholder=\"+27 XX XXX XXXX\"\n                      value={bookingForm.patientPhone}\n                      onChange={(e) => setBookingForm(prev => ({ ...prev, patientPhone: e.target.value }))}\n                      data-testid=\"input-patient-phone\"\n                    />\n                  </div>\n\n                  {/* Appointment Date & Time */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        Preferred Date *\n                      </label>\n                      <Input\n                        required\n                        type=\"date\"\n                        min={new Date().toISOString().split('T')[0]}\n                        value={bookingForm.appointmentDate}\n                        onChange={(e) => setBookingForm(prev => ({ ...prev, appointmentDate: e.target.value }))}\n                        data-testid=\"input-appointment-date\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        Preferred Time *\n                      </label>\n                      <Select \n                        value={bookingForm.appointmentTime} \n                        onValueChange={(value) => setBookingForm(prev => ({ ...prev, appointmentTime: value }))}\n                        disabled={!bookingForm.appointmentDate || slotsLoading}\n                      >\n                        <SelectTrigger data-testid=\"select-appointment-time\">\n                          <SelectValue placeholder=\"Select time slot\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {bookingForm.appointmentDate ? (\n                            slotsLoading ? (\n                              <SelectItem value=\"loading\" disabled>Loading available times...</SelectItem>\n                            ) : availableTimeSlots.length > 0 ? (\n                              availableTimeSlots.map(slot => (\n                                <SelectItem key={slot.time} value={slot.time}>\n                                  {slot.time}\n                                </SelectItem>\n                              ))\n                            ) : (\n                              <SelectItem value=\"no-slots\" disabled>No available slots for this date</SelectItem>\n                            )\n                          ) : (\n                            <SelectItem value=\"select-date\" disabled>Please select a date first</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  {/* Consultation Type */}\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Consultation Type *\n                    </label>\n                    <Select \n                      value={bookingForm.consultationType} \n                      onValueChange={(value: 'in-person' | 'virtual') => setBookingForm(prev => ({ ...prev, consultationType: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-consultation-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"in-person\">In-Person Consultation</SelectItem>\n                        <SelectItem value=\"virtual\">Virtual Consultation</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Reason for Visit */}\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Reason for Visit *\n                    </label>\n                    <Textarea\n                      required\n                      placeholder=\"Please describe the reason for your appointment (symptoms, concerns, etc.)\"\n                      rows={4}\n                      value={bookingForm.reason}\n                      onChange={(e) => setBookingForm(prev => ({ ...prev, reason: e.target.value }))}\n                      data-testid=\"textarea-appointment-reason\"\n                    />\n                  </div>\n\n                  {/* Available Slots Preview */}\n                  {bookingForm.appointmentDate && availableTimeSlots.length > 0 && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-800 mb-2\">Available Times for {new Date(bookingForm.appointmentDate).toLocaleDateString()}</h4>\n                      <div className=\"grid grid-cols-4 gap-2\">\n                        {availableTimeSlots.slice(0, 8).map(slot => (\n                          <button\n                            key={slot.time}\n                            type=\"button\"\n                            onClick={() => setBookingForm(prev => ({ ...prev, appointmentTime: slot.time }))}\n                            className={`text-xs px-2 py-1 rounded border ${\n                              bookingForm.appointmentTime === slot.time \n                                ? 'bg-blue-600 text-white border-blue-600' \n                                : 'bg-white text-blue-600 border-blue-200 hover:bg-blue-100'\n                            }`}\n                          >\n                            {slot.time}\n                          </button>\n                        ))}\n                      </div>\n                      {availableTimeSlots.length > 8 && (\n                        <p className=\"text-xs text-blue-600 mt-2\">+{availableTimeSlots.length - 8} more times available</p>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Booking Summary */}\n                  {bookingForm.appointmentDate && bookingForm.appointmentTime && doctor && (\n                    <div className=\"bg-teal-50 border border-teal-200 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-teal-800 mb-2\">Booking Summary</h4>\n                      <div className=\"space-y-1 text-sm text-teal-700\">\n                        <p><strong>Doctor:</strong> Dr. {doctor.firstName} {doctor.lastName}</p>\n                        <p><strong>Date:</strong> {new Date(bookingForm.appointmentDate).toLocaleDateString()}</p>\n                        <p><strong>Time:</strong> {bookingForm.appointmentTime}</p>\n                        <p><strong>Type:</strong> {bookingForm.consultationType === 'in-person' ? 'In-Person' : 'Virtual'}</p>\n                        <p><strong>Fee:</strong> {membership?.type === 'premium' ? 'FREE (Premium Member)' : 'R10 Booking Fee'}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Submit Button */}\n                  <div className=\"flex gap-4 pt-6 border-t\">\n                    <BackButton />\n                    <Button\n                      type=\"submit\"\n                      disabled={bookingMutation.isPending || !bookingForm.appointmentDate || !bookingForm.appointmentTime || slotsLoading}\n                      className=\"bg-teal-600 hover:bg-teal-700 flex-1\"\n                      data-testid=\"button-submit-booking\"\n                    >\n                      {bookingMutation.isPending ? 'Processing...' : \n                       !bookingForm.appointmentDate || !bookingForm.appointmentTime ? 'Select Date & Time' :\n                       membership?.type === 'premium' ? 'Book Appointment (Free)' : 'Proceed to Payment (R10)'}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19985},"client/src/pages/DoctorSignup.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport BackButton from '@/components/BackButton';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\nimport { Stethoscope, Shield, Clock } from 'lucide-react';\n\nconst provinces = [\n  'Eastern Cape', 'Free State', 'Gauteng', 'KwaZulu-Natal', 'Limpopo',\n  'Mpumalanga', 'Northern Cape', 'North West', 'Western Cape'\n];\n\nconst specialties = [\n  'General Practice', 'Cardiology', 'Dermatology', 'Emergency Medicine',\n  'Family Medicine', 'Internal Medicine', 'Neurology', 'Obstetrics & Gynecology',\n  'Orthopedics', 'Pediatrics', 'Psychiatry', 'Radiology', 'Surgery', 'Urology'\n];\n\ninterface DoctorSignupForm {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  phone: string;\n  specialty: string;\n  hpcsaNumber: string;\n  province: string;\n  city: string;\n  zipCode: string;\n  practiceAddress: string;\n  consultationFee: string;\n  qualifications: string;\n  experience: string;\n}\n\nexport default function DoctorSignup() {\n  useActivityLogger('doctor_signup');\n  \n  const { toast } = useToast();\n  const [formData, setFormData] = useState<DoctorSignupForm>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phone: '',\n    specialty: '',\n    hpcsaNumber: '',\n    province: '',\n    city: '',\n    zipCode: '',\n    practiceAddress: '',\n    consultationFee: '',\n    qualifications: '',\n    experience: ''\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: DoctorSignupForm) => {\n      return apiRequest('POST', '/api/doctors/signup', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Submitted Successfully!\",\n        description: \"Your doctor profile has been submitted for admin approval. You'll receive an email once approved.\",\n        duration: 10000,\n      });\n      // Reset form\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phone: '',\n        specialty: '',\n        hpcsaNumber: '',\n        province: '',\n        city: '',\n        zipCode: '',\n        practiceAddress: '',\n        consultationFee: '',\n        qualifications: '',\n        experience: ''\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"There was an error processing your application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 8) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    signupMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof DoctorSignupForm, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-6\">\n          <BackButton />\n          <h1 className=\"text-3xl font-bold text-gray-900 mt-4 mb-2\">Doctor Registration</h1>\n          <p className=\"text-gray-600\">Join IronLedger MedMap as a verified medical professional</p>\n        </div>\n\n        {/* Process Overview */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Stethoscope className=\"h-5 w-5 text-teal-600\" />\n              Registration Process\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"bg-teal-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <span className=\"text-teal-600 font-bold\">1</span>\n                </div>\n                <h3 className=\"font-medium mb-2\">Submit Application</h3>\n                <p className=\"text-sm text-gray-600\">Complete your registration with medical credentials</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-orange-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <Shield className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <h3 className=\"font-medium mb-2\">Admin Verification</h3>\n                <p className=\"text-sm text-gray-600\">Our team verifies your credentials and HPCSA registration</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"bg-green-100 rounded-full p-3 w-12 h-12 mx-auto mb-3 flex items-center justify-center\">\n                  <Clock className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h3 className=\"font-medium mb-2\">Start Practicing</h3>\n                <p className=\"text-sm text-gray-600\">Access your portal and begin accepting appointments</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Personal Information</CardTitle>\n                <CardDescription>Your basic contact details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      First Name *\n                    </label>\n                    <Input\n                      id=\"firstName\"\n                      required\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Last Name *\n                    </label>\n                    <Input\n                      id=\"lastName\"\n                      required\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email Address *\n                  </label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    required\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Phone Number *\n                  </label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    required\n                    placeholder=\"+27 11 123 4567\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Password *\n                    </label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      required\n                      minLength={8}\n                      value={formData.password}\n                      onChange={(e) => handleInputChange('password', e.target.value)}\n                      data-testid=\"input-password\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Confirm Password *\n                    </label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      required\n                      minLength={8}\n                      value={formData.confirmPassword}\n                      onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                      data-testid=\"input-confirm-password\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Medical Credentials */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Medical Credentials</CardTitle>\n                <CardDescription>Your professional qualifications</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Medical Specialty *\n                  </label>\n                  <Select\n                    value={formData.specialty}\n                    onValueChange={(value) => handleInputChange('specialty', value)}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-specialty\">\n                      <SelectValue placeholder=\"Select your specialty\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {specialties.map(specialty => (\n                        <SelectItem key={specialty} value={specialty}>{specialty}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label htmlFor=\"hpcsaNumber\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    HPCSA Registration Number *\n                  </label>\n                  <Input\n                    id=\"hpcsaNumber\"\n                    required\n                    placeholder=\"MP123456\"\n                    value={formData.hpcsaNumber}\n                    onChange={(e) => handleInputChange('hpcsaNumber', e.target.value)}\n                    data-testid=\"input-hpcsa-number\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"consultationFee\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Consultation Fee (ZAR) *\n                  </label>\n                  <Input\n                    id=\"consultationFee\"\n                    type=\"number\"\n                    required\n                    placeholder=\"650.00\"\n                    value={formData.consultationFee}\n                    onChange={(e) => handleInputChange('consultationFee', e.target.value)}\n                    data-testid=\"input-consultation-fee\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"qualifications\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Qualifications *\n                  </label>\n                  <Textarea\n                    id=\"qualifications\"\n                    required\n                    placeholder=\"MBChB, MMed (Cardiology), etc.\"\n                    rows={3}\n                    value={formData.qualifications}\n                    onChange={(e) => handleInputChange('qualifications', e.target.value)}\n                    data-testid=\"textarea-qualifications\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"experience\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Experience (Years) *\n                  </label>\n                  <Input\n                    id=\"experience\"\n                    type=\"number\"\n                    required\n                    placeholder=\"5\"\n                    value={formData.experience}\n                    onChange={(e) => handleInputChange('experience', e.target.value)}\n                    data-testid=\"input-experience\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Practice Information */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle>Practice Information</CardTitle>\n                <CardDescription>Where you practice medicine</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label htmlFor=\"province\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Province *\n                    </label>\n                    <Select\n                      value={formData.province}\n                      onValueChange={(value) => handleInputChange('province', value)}\n                      required\n                    >\n                      <SelectTrigger data-testid=\"select-province\">\n                        <SelectValue placeholder=\"Select province\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {provinces.map(province => (\n                          <SelectItem key={province} value={province}>{province}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      City *\n                    </label>\n                    <Input\n                      id=\"city\"\n                      required\n                      value={formData.city}\n                      onChange={(e) => handleInputChange('city', e.target.value)}\n                      data-testid=\"input-city\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"zipCode\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      ZIP Code\n                    </label>\n                    <Input\n                      id=\"zipCode\"\n                      value={formData.zipCode}\n                      onChange={(e) => handleInputChange('zipCode', e.target.value)}\n                      data-testid=\"input-zip-code\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"practiceAddress\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Practice Address *\n                  </label>\n                  <Textarea\n                    id=\"practiceAddress\"\n                    required\n                    placeholder=\"123 Medical Centre, Sandton\"\n                    rows={3}\n                    value={formData.practiceAddress}\n                    onChange={(e) => handleInputChange('practiceAddress', e.target.value)}\n                    data-testid=\"textarea-practice-address\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"mt-8 flex gap-4\">\n            <BackButton />\n            <Button\n              type=\"submit\"\n              disabled={signupMutation.isPending}\n              className=\"bg-teal-600 hover:bg-teal-700 flex-1\"\n              data-testid=\"button-submit-registration\"\n            >\n              {signupMutation.isPending ? 'Submitting Application...' : 'Submit Doctor Registration'}\n            </Button>\n          </div>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Already have an account?{' '}\n            <a href=\"/login\" className=\"text-teal-600 hover:text-teal-700 font-medium\">\n              Sign in here\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17426},"client/src/components/TwoFactorSetup.tsx":{"content":"import { useState } from 'react';\nimport { useAuthNew } from '@/hooks/useAuthNew';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Smartphone, Shield, QrCode, CheckCircle, AlertTriangle } from 'lucide-react';\n\ninterface TwoFactorSetupProps {\n  user: {\n    isTwoFactorEnabled: boolean;\n  };\n  onComplete?: () => void;\n}\n\nexport default function TwoFactorSetup({ user, onComplete }: TwoFactorSetupProps) {\n  const { generate2FA, enable2FA, disable2FA } = useAuthNew();\n  const [qrCode, setQrCode] = useState<string | null>(null);\n  const [secret, setSecret] = useState<string | null>(null);\n  const [token, setToken] = useState('');\n  const [step, setStep] = useState<'setup' | 'verify' | 'disable'>('setup');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleGenerate2FA = async () => {\n    setIsLoading(true);\n    try {\n      const result = await generate2FA();\n      setQrCode(result.qrCode);\n      setSecret(result.secret);\n      setStep('verify');\n    } catch (error) {\n      // Error handled by the hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEnable2FA = async () => {\n    if (!token) return;\n    \n    setIsLoading(true);\n    try {\n      await enable2FA(token);\n      setStep('setup');\n      setQrCode(null);\n      setSecret(null);\n      setToken('');\n      onComplete?.();\n    } catch (error) {\n      // Error handled by the hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDisable2FA = async () => {\n    if (!token) return;\n    \n    setIsLoading(true);\n    try {\n      await disable2FA(token);\n      setStep('setup');\n      setToken('');\n      onComplete?.();\n    } catch (error) {\n      // Error handled by the hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (user.isTwoFactorEnabled) {\n    return (\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-green-600\" />\n              <CardTitle className=\"text-lg\">Two-Factor Authentication</CardTitle>\n              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                Enabled\n              </Badge>\n            </div>\n          </div>\n          <CardDescription>\n            Your account is protected with two-factor authentication. You'll need to enter a code from your authenticator app when logging in.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {step === 'disable' ? (\n            <div className=\"space-y-4\">\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertDescription className=\"text-red-800\">\n                  <strong>Warning:</strong> Disabling 2FA will make your account less secure. Enter your current 2FA code to confirm.\n                </AlertDescription>\n              </Alert>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Current 2FA Code\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter 6-digit code\"\n                  value={token}\n                  onChange={(e) => setToken(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                  maxLength={6}\n                  className=\"text-center text-lg font-mono\"\n                  data-testid=\"input-2fa-disable-token\"\n                />\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={handleDisable2FA}\n                  disabled={isLoading || token.length !== 6}\n                  variant=\"destructive\"\n                  className=\"flex-1\"\n                  data-testid=\"button-confirm-disable-2fa\"\n                >\n                  {isLoading ? 'Disabling...' : 'Disable 2FA'}\n                </Button>\n                <Button\n                  onClick={() => {\n                    setStep('setup');\n                    setToken('');\n                  }}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-disable-2fa\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={() => setStep('disable')}\n                variant=\"destructive\"\n                className=\"flex-1\"\n                data-testid=\"button-disable-2fa\"\n              >\n                Disable 2FA\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center space-x-2\">\n          <Smartphone className=\"h-5 w-5 text-blue-600\" />\n          <CardTitle className=\"text-lg\">Two-Factor Authentication</CardTitle>\n          <Badge variant=\"outline\" className=\"text-gray-600\">\n            Disabled\n          </Badge>\n        </div>\n        <CardDescription>\n          Add an extra layer of security to your account with two-factor authentication.\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {step === 'setup' && (\n          <div className=\"space-y-4\">\n            <Alert className=\"border-blue-200 bg-blue-50\">\n              <Shield className=\"h-4 w-4 text-blue-600\" />\n              <AlertDescription className=\"text-blue-800\">\n                Two-factor authentication adds an extra layer of security by requiring a code from your phone in addition to your password.\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-gray-900\">What you'll need:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• An authenticator app (Google Authenticator, Authy, etc.)</li>\n                <li>• Your smartphone or tablet</li>\n                <li>• A few minutes to set up</li>\n              </ul>\n            </div>\n            \n            <Button\n              onClick={handleGenerate2FA}\n              disabled={isLoading}\n              className=\"w-full bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-setup-2fa\"\n            >\n              {isLoading ? 'Generating...' : 'Set Up 2FA'}\n            </Button>\n          </div>\n        )}\n        \n        {step === 'verify' && qrCode && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Scan QR Code</h4>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Open your authenticator app and scan this QR code to add your account.\n              </p>\n              \n              <div className=\"bg-white p-4 rounded-lg border-2 border-gray-200 inline-block\">\n                <img src={qrCode} alt=\"2FA QR Code\" className=\"w-48 h-48\" />\n              </div>\n            </div>\n            \n            {secret && (\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h5 className=\"font-medium text-gray-900 mb-2\">Manual Entry Code:</h5>\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  If you can't scan the QR code, enter this code manually:\n                </p>\n                <code className=\"text-xs bg-white px-2 py-1 rounded border font-mono break-all\">\n                  {secret}\n                </code>\n              </div>\n            )}\n            \n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Verification Code\n              </label>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Enter the 6-digit code from your authenticator app:\n              </p>\n              <Input\n                type=\"text\"\n                placeholder=\"000000\"\n                value={token}\n                onChange={(e) => setToken(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                maxLength={6}\n                className=\"text-center text-lg font-mono\"\n                data-testid=\"input-2fa-verification-code\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={handleEnable2FA}\n                disabled={isLoading || token.length !== 6}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-verify-2fa\"\n              >\n                {isLoading ? 'Verifying...' : 'Verify & Enable'}\n              </Button>\n              <Button\n                onClick={() => {\n                  setStep('setup');\n                  setQrCode(null);\n                  setSecret(null);\n                  setToken('');\n                }}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"button-cancel-2fa-setup\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9609},"client/src/hooks/useAuthNew.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  isEmailVerified: boolean;\n  isTwoFactorEnabled: boolean;\n  createdAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string, twoFactorToken?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  verifyEmail: (token: string) => Promise<void>;\n  resendVerification: (email: string) => Promise<void>;\n  forgotPassword: (email: string) => Promise<void>;\n  resetPassword: (token: string, password: string) => Promise<void>;\n  generate2FA: () => Promise<{ secret: string; qrCode: string }>;\n  enable2FA: (token: string) => Promise<void>;\n  disable2FA: (token: string) => Promise<void>;\n  token: string | null;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  role: 'patient' | 'doctor';\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  province?: string;\n  city?: string;\n  specialty?: string;\n  hpcsaNumber?: string;\n  practiceAddress?: string;\n  qualifications?: string;\n  experience?: string;\n  consultationFee?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [token, setToken] = useState<string | null>(\n    localStorage.getItem('accessToken')\n  );\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Set up API request interceptor for authentication\n  useEffect(() => {\n    const originalApiRequest = apiRequest;\n    \n    // Override apiRequest to include auth header\n    global.apiRequest = async (method: string, url: string, data?: any) => {\n      const headers: any = {\n        'Content-Type': 'application/json',\n      };\n\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      const response = await fetch(url, {\n        method,\n        headers,\n        body: data ? JSON.stringify(data) : undefined,\n        credentials: 'include', // Include cookies for refresh tokens\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP ${response.status}`);\n      }\n\n      return response;\n    };\n\n    return () => {\n      global.apiRequest = originalApiRequest;\n    };\n  }, [token]);\n\n  // Get current user\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['/api/auth/me'],\n    enabled: !!token,\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password, twoFactorToken }: { \n      email: string; \n      password: string; \n      twoFactorToken?: string;\n    }) => {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        email,\n        password,\n        twoFactorToken,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setToken(data.accessToken);\n      localStorage.setItem('accessToken', data.accessToken);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back${data.user.role === 'doctor' ? ', Dr.' : ''}!`,\n      });\n    },\n    onError: (error: any) => {\n      if (error.message.includes('EMAIL_NOT_VERIFIED')) {\n        toast({\n          title: \"Email Verification Required\",\n          description: \"Please check your email and verify your account before logging in.\",\n          variant: \"destructive\",\n        });\n      } else if (error.message.includes('2FA_REQUIRED')) {\n        toast({\n          title: \"Two-Factor Authentication Required\",\n          description: \"Please enter your 2FA code to complete login.\",\n          variant: \"default\",\n        });\n      } else if (error.message.includes('locked')) {\n        toast({\n          title: \"Account Locked\",\n          description: \"Your account has been temporarily locked due to too many failed attempts.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: error.message || \"Invalid credentials. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (userData: RegisterData) => {\n      const response = await apiRequest('POST', '/api/auth/register', userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration Successful\",\n        description: \"Please check your email to verify your account.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Registration failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      setToken(null);\n      localStorage.removeItem('accessToken');\n      queryClient.clear();\n      toast({\n        title: \"Logged Out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: () => {\n      // Clear local state even if API call fails\n      setToken(null);\n      localStorage.removeItem('accessToken');\n      queryClient.clear();\n    },\n  });\n\n  // Email verification mutation\n  const verifyEmailMutation = useMutation({\n    mutationFn: async (token: string) => {\n      const response = await apiRequest('POST', '/api/auth/verify-email', { token });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Verified\",\n        description: \"Your email has been successfully verified. You can now log in.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Email verification failed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Resend verification mutation\n  const resendVerificationMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest('POST', '/api/auth/resend-verification', { email });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Verification Email Sent\",\n        description: \"A new verification email has been sent to your inbox.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Email\",\n        description: error.message || \"Failed to send verification email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Forgot password mutation\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest('POST', '/api/auth/forgot-password', { email });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Reset Email Sent\",\n        description: \"If an account with that email exists, a password reset link has been sent.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Request Failed\",\n        description: error.message || \"Password reset request failed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ token, password }: { token: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/reset-password', { token, password });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password Reset Successful\",\n        description: \"Your password has been reset. You can now log in with your new password.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Password Reset Failed\",\n        description: error.message || \"Password reset failed.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // 2FA mutations\n  const generate2FAMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/2fa/generate');\n      return response.json();\n    },\n  });\n\n  const enable2FAMutation = useMutation({\n    mutationFn: async (token: string) => {\n      const response = await apiRequest('POST', '/api/auth/2fa/enable', { token });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: \"2FA Enabled\",\n        description: \"Two-factor authentication has been successfully enabled.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"2FA Setup Failed\",\n        description: error.message || \"Failed to enable two-factor authentication.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const disable2FAMutation = useMutation({\n    mutationFn: async (token: string) => {\n      const response = await apiRequest('POST', '/api/auth/2fa/disable', { token });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      toast({\n        title: \"2FA Disabled\",\n        description: \"Two-factor authentication has been disabled.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"2FA Disable Failed\",\n        description: error.message || \"Failed to disable two-factor authentication.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const value: AuthContextType = {\n    user: user?.user || null,\n    isLoading,\n    isAuthenticated: !!user?.user && !!token,\n    token,\n    login: async (email: string, password: string, twoFactorToken?: string) => {\n      await loginMutation.mutateAsync({ email, password, twoFactorToken });\n    },\n    logout: async () => {\n      await logoutMutation.mutateAsync();\n    },\n    register: async (userData: RegisterData) => {\n      await registerMutation.mutateAsync(userData);\n    },\n    verifyEmail: async (token: string) => {\n      await verifyEmailMutation.mutateAsync(token);\n    },\n    resendVerification: async (email: string) => {\n      await resendVerificationMutation.mutateAsync(email);\n    },\n    forgotPassword: async (email: string) => {\n      await forgotPasswordMutation.mutateAsync(email);\n    },\n    resetPassword: async (token: string, password: string) => {\n      await resetPasswordMutation.mutateAsync({ token, password });\n    },\n    generate2FA: async () => {\n      const result = await generate2FAMutation.mutateAsync();\n      return result;\n    },\n    enable2FA: async (token: string) => {\n      await enable2FAMutation.mutateAsync(token);\n    },\n    disable2FA: async (token: string) => {\n      await disable2FAMutation.mutateAsync(token);\n    },\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuthNew() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthNew must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport default useAuthNew;","size_bytes":11488},"client/src/pages/EmailVerification.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuthNew } from '@/hooks/useAuthNew';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { CheckCircle, XCircle, Mail, ArrowLeft } from 'lucide-react';\nimport BackButton from '@/components/BackButton';\n\nexport default function EmailVerification() {\n  const [, setLocation] = useLocation();\n  const { verifyEmail, resendVerification } = useAuthNew();\n  const [status, setStatus] = useState<'loading' | 'success' | 'error' | 'resend'>('loading');\n  const [email, setEmail] = useState('');\n  const [isResending, setIsResending] = useState(false);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const token = params.get('token');\n\n    if (token) {\n      verifyEmail(token)\n        .then(() => {\n          setStatus('success');\n          // Redirect to login after 3 seconds\n          setTimeout(() => {\n            setLocation('/login');\n          }, 3000);\n        })\n        .catch(() => {\n          setStatus('error');\n        });\n    } else {\n      setStatus('resend');\n    }\n  }, [verifyEmail, setLocation]);\n\n  const handleResendVerification = async () => {\n    if (!email) return;\n    \n    setIsResending(true);\n    try {\n      await resendVerification(email);\n      setStatus('loading');\n    } catch (error) {\n      // Error handled by the hook\n    } finally {\n      setIsResending(false);\n    }\n  };\n\n  if (status === 'loading') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 w-12 h-12 bg-teal-100 rounded-full flex items-center justify-center\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-teal-600 border-t-transparent rounded-full\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Verifying Email</CardTitle>\n            <CardDescription>\n              Please wait while we verify your email address...\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  if (status === 'success') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <CardTitle className=\"text-2xl text-green-800\">Email Verified!</CardTitle>\n            <CardDescription>\n              Your email has been successfully verified. You can now log in to your account.\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"text-center\">\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Redirecting to login page in 3 seconds...\n            </p>\n            <Button \n              onClick={() => setLocation('/login')}\n              className=\"bg-teal-600 hover:bg-teal-700\"\n            >\n              Go to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (status === 'error') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n              <XCircle className=\"h-6 w-6 text-red-600\" />\n            </div>\n            <CardTitle className=\"text-2xl text-red-800\">Verification Failed</CardTitle>\n            <CardDescription>\n              The verification link is invalid or has expired. Please request a new verification email.\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Email Address\n              </label>\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <Button\n              onClick={handleResendVerification}\n              disabled={!email || isResending}\n              className=\"w-full bg-teal-600 hover:bg-teal-700\"\n              data-testid=\"button-resend-verification\"\n            >\n              {isResending ? 'Sending...' : 'Resend Verification Email'}\n            </Button>\n            \n            <div className=\"text-center\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setLocation('/login')}\n                className=\"text-gray-600\"\n                data-testid=\"button-back-to-login\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Login\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Resend verification form\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n            <Mail className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Email Verification</CardTitle>\n          <CardDescription>\n            Enter your email address to receive a new verification link.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Email Address\n            </label>\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              data-testid=\"input-email\"\n            />\n          </div>\n          \n          <Button\n            onClick={handleResendVerification}\n            disabled={!email || isResending}\n            className=\"w-full bg-teal-600 hover:bg-teal-700\"\n            data-testid=\"button-resend-verification\"\n          >\n            {isResending ? 'Sending...' : 'Send Verification Email'}\n          </Button>\n          \n          <div className=\"text-center\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setLocation('/login')}\n              className=\"text-gray-600\"\n              data-testid=\"button-back-to-login\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7351},"client/src/pages/LoginNew.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuthNew } from '@/hooks/useAuthNew';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Stethoscope, User, Eye, EyeOff, Mail, Lock, AlertCircle } from 'lucide-react';\nimport BackButton from '@/components/BackButton';\nimport { useActivityLogger } from '@/hooks/useActivityLogger';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n  twoFactorToken?: string;\n}\n\nexport default function LoginNew() {\n  useActivityLogger('enhanced_login_page');\n  \n  const [, setLocation] = useLocation();\n  const { login, forgotPassword } = useAuthNew();\n  const [activeTab, setActiveTab] = useState('doctor');\n  const [showPassword, setShowPassword] = useState(false);\n  const [show2FA, setShow2FA] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState<LoginForm>({\n    email: '',\n    password: '',\n    twoFactorToken: '',\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    setIsLoading(true);\n    try {\n      await login(formData.email, formData.password, formData.twoFactorToken);\n      \n      // Redirect based on role\n      if (activeTab === 'doctor') {\n        setLocation('/doctor-portal');\n      } else {\n        setLocation('/');\n      }\n    } catch (error: any) {\n      if (error.message.includes('2FA_REQUIRED')) {\n        setShow2FA(true);\n      }\n      // Other errors handled by the hook\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    if (!formData.email) {\n      alert('Please enter your email address first');\n      return;\n    }\n    \n    try {\n      await forgotPassword(formData.email);\n    } catch (error) {\n      // Error handled by the hook\n    }\n  };\n\n  const fillDemoCredentials = () => {\n    setFormData({\n      email: 'dr.johnson@example.com',\n      password: 'TempPass123!',\n      twoFactorToken: '',\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"mb-6\">\n          <BackButton />\n        </div>\n        \n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              Sign In to Your Account\n            </CardTitle>\n            <CardDescription>\n              Access your medical platform dashboard securely\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"doctor\" className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"h-4 w-4\" />\n                  Doctor\n                </TabsTrigger>\n                <TabsTrigger value=\"patient\" className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Patient\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"doctor\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Email Address\n                    </label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        type=\"email\"\n                        required\n                        placeholder=\"doctor@example.com\"\n                        className=\"pl-10\"\n                        value={formData.email}\n                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                        data-testid=\"input-doctor-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Password\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        type={showPassword ? 'text' : 'password'}\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10 pr-10\"\n                        value={formData.password}\n                        onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                        data-testid=\"input-doctor-password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {show2FA && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Two-Factor Authentication Code\n                      </label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"000000\"\n                        maxLength={6}\n                        className=\"text-center text-lg font-mono\"\n                        value={formData.twoFactorToken}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          twoFactorToken: e.target.value.replace(/\\D/g, '').slice(0, 6)\n                        }))}\n                        data-testid=\"input-2fa-token\"\n                      />\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        Enter the 6-digit code from your authenticator app\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <button\n                      type=\"button\"\n                      onClick={handleForgotPassword}\n                      className=\"text-sm text-teal-600 hover:text-teal-500\"\n                      data-testid=\"button-forgot-password\"\n                    >\n                      Forgot password?\n                    </button>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      onClick={fillDemoCredentials}\n                      className=\"text-xs text-blue-600 hover:text-blue-500\"\n                      data-testid=\"button-demo-credentials\"\n                    >\n                      Use Demo Credentials\n                    </Button>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                    data-testid=\"button-doctor-login\"\n                  >\n                    {isLoading ? 'Signing In...' : 'Sign In as Doctor'}\n                  </Button>\n                </form>\n              </TabsContent>\n              \n              <TabsContent value=\"patient\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Email Address\n                    </label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        type=\"email\"\n                        required\n                        placeholder=\"patient@example.com\"\n                        className=\"pl-10\"\n                        value={formData.email}\n                        onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                        data-testid=\"input-patient-email\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Password\n                    </label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <Input\n                        type={showPassword ? 'text' : 'password'}\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10 pr-10\"\n                        value={formData.password}\n                        onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                        data-testid=\"input-patient-password\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </div>\n\n                  {show2FA && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Two-Factor Authentication Code\n                      </label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"000000\"\n                        maxLength={6}\n                        className=\"text-center text-lg font-mono\"\n                        value={formData.twoFactorToken}\n                        onChange={(e) => setFormData(prev => ({ \n                          ...prev, \n                          twoFactorToken: e.target.value.replace(/\\D/g, '').slice(0, 6)\n                        }))}\n                        data-testid=\"input-2fa-token\"\n                      />\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        Enter the 6-digit code from your authenticator app\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"flex items-center justify-between\">\n                    <button\n                      type=\"button\"\n                      onClick={handleForgotPassword}\n                      className=\"text-sm text-teal-600 hover:text-teal-500\"\n                      data-testid=\"button-forgot-password\"\n                    >\n                      Forgot password?\n                    </button>\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    data-testid=\"button-patient-login\"\n                  >\n                    {isLoading ? 'Signing In...' : 'Sign In as Patient'}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Don't have an account?{' '}\n                <button\n                  onClick={() => setLocation(activeTab === 'doctor' ? '/doctor-signup' : '/signup')}\n                  className=\"text-teal-600 hover:text-teal-500 font-medium\"\n                  data-testid=\"button-signup-link\"\n                >\n                  Sign up here\n                </button>\n              </p>\n            </div>\n\n            {/* Security Notice */}\n            <Alert className=\"mt-4 border-blue-200 bg-blue-50\">\n              <Lock className=\"h-4 w-4 text-blue-600\" />\n              <AlertDescription className=\"text-blue-800 text-xs\">\n                <strong>Enhanced Security:</strong> This platform now features JWT authentication, \n                email verification, password strength validation, and optional two-factor authentication \n                for maximum account protection.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13125}},"version":1}